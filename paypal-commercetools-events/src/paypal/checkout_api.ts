/* tslint:disable */
/* eslint-disable */
/**
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ACTIONDOESNOTMATCHINTENT
 */
export interface ACTIONDOESNOTMATCHINTENT {
  /**
   *
   * @type {string}
   * @memberof ACTIONDOESNOTMATCHINTENT
   */
  issue?: ACTIONDOESNOTMATCHINTENTIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ACTIONDOESNOTMATCHINTENT
   */
  description?: ACTIONDOESNOTMATCHINTENTDescriptionEnum;
}

export const ACTIONDOESNOTMATCHINTENTIssueEnum = {
  ActionDoesNotMatchIntent: 'ACTION_DOES_NOT_MATCH_INTENT',
} as const;

export type ACTIONDOESNOTMATCHINTENTIssueEnum =
  (typeof ACTIONDOESNOTMATCHINTENTIssueEnum)[keyof typeof ACTIONDOESNOTMATCHINTENTIssueEnum];
export const ACTIONDOESNOTMATCHINTENTDescriptionEnum = {
  OrderWasCreatedWithAnIntentToCapturePleaseUseV2CheckoutOrdersOrderIdCaptureToCompleteTheTransactionOrAlternatelyCreateAnOrderWithAnIntentOfAuthorize:
    "Order was created with an intent to 'CAPTURE'. Please use v2/checkout/orders/order_id/capture to complete the transaction or alternately Create an order with an intent of 'AUTHORIZE'.",
} as const;

export type ACTIONDOESNOTMATCHINTENTDescriptionEnum =
  (typeof ACTIONDOESNOTMATCHINTENTDescriptionEnum)[keyof typeof ACTIONDOESNOTMATCHINTENTDescriptionEnum];

/**
 *
 * @export
 * @interface AGREEMENTALREADYCANCELLED
 */
export interface AGREEMENTALREADYCANCELLED {
  /**
   *
   * @type {string}
   * @memberof AGREEMENTALREADYCANCELLED
   */
  issue?: AGREEMENTALREADYCANCELLEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AGREEMENTALREADYCANCELLED
   */
  description?: AGREEMENTALREADYCANCELLEDDescriptionEnum;
}

export const AGREEMENTALREADYCANCELLEDIssueEnum = {
  AgreementAlreadyCancelled: 'AGREEMENT_ALREADY_CANCELLED',
} as const;

export type AGREEMENTALREADYCANCELLEDIssueEnum =
  (typeof AGREEMENTALREADYCANCELLEDIssueEnum)[keyof typeof AGREEMENTALREADYCANCELLEDIssueEnum];
export const AGREEMENTALREADYCANCELLEDDescriptionEnum = {
  TheRequestedAgreementIsAlreadyCanceled:
    'The requested agreement is already canceled.',
} as const;

export type AGREEMENTALREADYCANCELLEDDescriptionEnum =
  (typeof AGREEMENTALREADYCANCELLEDDescriptionEnum)[keyof typeof AGREEMENTALREADYCANCELLEDDescriptionEnum];

/**
 *
 * @export
 * @interface ALIASDECLINEDBYPROCESSOR
 */
export interface ALIASDECLINEDBYPROCESSOR {
  /**
   *
   * @type {string}
   * @memberof ALIASDECLINEDBYPROCESSOR
   */
  issue?: ALIASDECLINEDBYPROCESSORIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ALIASDECLINEDBYPROCESSOR
   */
  description?: ALIASDECLINEDBYPROCESSORDescriptionEnum;
}

export const ALIASDECLINEDBYPROCESSORIssueEnum = {
  AliasDeclinedByProcessor: 'ALIAS_DECLINED_BY_PROCESSOR',
} as const;

export type ALIASDECLINEDBYPROCESSORIssueEnum =
  (typeof ALIASDECLINEDBYPROCESSORIssueEnum)[keyof typeof ALIASDECLINEDBYPROCESSORIssueEnum];
export const ALIASDECLINEDBYPROCESSORDescriptionEnum = {
  TheProvidedAliasWasDeclinedByTheProcessorPleaseCreateANewOrderWithADifferentAliasKeyAndOrAliasLabelAndTryAgain:
    'The provided alias was declined by the processor. Please create a new order with a different alias_key and/or alias_label and try again.',
} as const;

export type ALIASDECLINEDBYPROCESSORDescriptionEnum =
  (typeof ALIASDECLINEDBYPROCESSORDescriptionEnum)[keyof typeof ALIASDECLINEDBYPROCESSORDescriptionEnum];

/**
 *
 * @export
 * @interface AMOUNTCANNOTBESPECIFIED
 */
export interface AMOUNTCANNOTBESPECIFIED {
  /**
   *
   * @type {string}
   * @memberof AMOUNTCANNOTBESPECIFIED
   */
  issue?: AMOUNTCANNOTBESPECIFIEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AMOUNTCANNOTBESPECIFIED
   */
  description?: AMOUNTCANNOTBESPECIFIEDDescriptionEnum;
}

export const AMOUNTCANNOTBESPECIFIEDIssueEnum = {
  AmountCannotBeSpecified: 'AMOUNT_CANNOT_BE_SPECIFIED',
} as const;

export type AMOUNTCANNOTBESPECIFIEDIssueEnum =
  (typeof AMOUNTCANNOTBESPECIFIEDIssueEnum)[keyof typeof AMOUNTCANNOTBESPECIFIEDIssueEnum];
export const AMOUNTCANNOTBESPECIFIEDDescriptionEnum = {
  AnAuthorizationAmountCanOnlyBeSpecifiedIfAnOrderHasBeenSavedByCallingV2CheckoutOrdersOrderIdSavePleaseSaveTheOrderAndTryAgain:
    'An authorization amount can only be specified if an Order has been saved by calling /v2/checkout/orders/{order_id}/save.  Please save the order and try again.',
} as const;

export type AMOUNTCANNOTBESPECIFIEDDescriptionEnum =
  (typeof AMOUNTCANNOTBESPECIFIEDDescriptionEnum)[keyof typeof AMOUNTCANNOTBESPECIFIEDDescriptionEnum];

/**
 *
 * @export
 * @interface AMOUNTCHANGENOTALLOWED
 */
export interface AMOUNTCHANGENOTALLOWED {
  /**
   *
   * @type {string}
   * @memberof AMOUNTCHANGENOTALLOWED
   */
  issue?: AMOUNTCHANGENOTALLOWEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AMOUNTCHANGENOTALLOWED
   */
  description?: AMOUNTCHANGENOTALLOWEDDescriptionEnum;
}

export const AMOUNTCHANGENOTALLOWEDIssueEnum = {
  AmountChangeNotAllowed: 'AMOUNT_CHANGE_NOT_ALLOWED',
} as const;

export type AMOUNTCHANGENOTALLOWEDIssueEnum =
  (typeof AMOUNTCHANGENOTALLOWEDIssueEnum)[keyof typeof AMOUNTCHANGENOTALLOWEDIssueEnum];
export const AMOUNTCHANGENOTALLOWEDDescriptionEnum = {
  TheAmountSpecifiedIsDifferentFromTheAmountAuthorizedByPayer:
    'The amount specified is different from the amount authorized by payer.',
} as const;

export type AMOUNTCHANGENOTALLOWEDDescriptionEnum =
  (typeof AMOUNTCHANGENOTALLOWEDDescriptionEnum)[keyof typeof AMOUNTCHANGENOTALLOWEDDescriptionEnum];

/**
 *
 * @export
 * @interface AMOUNTMISMATCH
 */
export interface AMOUNTMISMATCH {
  /**
   *
   * @type {string}
   * @memberof AMOUNTMISMATCH
   */
  issue?: AMOUNTMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AMOUNTMISMATCH
   */
  description?: AMOUNTMISMATCHDescriptionEnum;
}

export const AMOUNTMISMATCHIssueEnum = {
  AmountMismatch: 'AMOUNT_MISMATCH',
} as const;

export type AMOUNTMISMATCHIssueEnum =
  (typeof AMOUNTMISMATCHIssueEnum)[keyof typeof AMOUNTMISMATCHIssueEnum];
export const AMOUNTMISMATCHDescriptionEnum = {
  ShouldEqualItemTotalTaxTotalShippingHandlingInsuranceShippingDiscountDiscount:
    'Should equal item_total + tax_total + shipping + handling + insurance - shipping_discount - discount.',
} as const;

export type AMOUNTMISMATCHDescriptionEnum =
  (typeof AMOUNTMISMATCHDescriptionEnum)[keyof typeof AMOUNTMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface AMOUNTNOTPATCHABLE
 */
export interface AMOUNTNOTPATCHABLE {
  /**
   *
   * @type {string}
   * @memberof AMOUNTNOTPATCHABLE
   */
  issue?: AMOUNTNOTPATCHABLEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AMOUNTNOTPATCHABLE
   */
  description?: AMOUNTNOTPATCHABLEDescriptionEnum;
}

export const AMOUNTNOTPATCHABLEIssueEnum = {
  AmountNotPatchable: 'AMOUNT_NOT_PATCHABLE',
} as const;

export type AMOUNTNOTPATCHABLEIssueEnum =
  (typeof AMOUNTNOTPATCHABLEIssueEnum)[keyof typeof AMOUNTNOTPATCHABLEIssueEnum];
export const AMOUNTNOTPATCHABLEDescriptionEnum = {
  TheAmountCannotBeUpdatedAsThePayerHasChosenAndApprovedASpecificFinancingOfferForAGivenAmountPleaseCreateANewOrderWithTheUpdatedOrderAmountAndHaveThePayerApproveTheNewPaymentTerms:
    "The amount cannot be updated as the 'payer' has chosen and approved a specific financing offer for a given amount. Please Create a new Order with the updated Order amount and have the 'payer' approve the new payment terms.",
} as const;

export type AMOUNTNOTPATCHABLEDescriptionEnum =
  (typeof AMOUNTNOTPATCHABLEDescriptionEnum)[keyof typeof AMOUNTNOTPATCHABLEDescriptionEnum];

/**
 *
 * @export
 * @interface APPLEPAYAMOUNTMISMATCH
 */
export interface APPLEPAYAMOUNTMISMATCH {
  /**
   *
   * @type {string}
   * @memberof APPLEPAYAMOUNTMISMATCH
   */
  issue?: APPLEPAYAMOUNTMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof APPLEPAYAMOUNTMISMATCH
   */
  description?: APPLEPAYAMOUNTMISMATCHDescriptionEnum;
}

export const APPLEPAYAMOUNTMISMATCHIssueEnum = {
  ApplePayAmountMismatch: 'APPLE_PAY_AMOUNT_MISMATCH',
} as const;

export type APPLEPAYAMOUNTMISMATCHIssueEnum =
  (typeof APPLEPAYAMOUNTMISMATCHIssueEnum)[keyof typeof APPLEPAYAMOUNTMISMATCHIssueEnum];
export const APPLEPAYAMOUNTMISMATCHDescriptionEnum = {
  TheAmountSpecifiedInTheOrderShouldMatchTheAmountThatWasViewedAndAuthorizedByThePayerBuyerOnApplePayIfTheAmountHasChangedPleaseRedirectTheBuyerToAuthorizeTheOrderAgainViaApplePay:
    "The 'amount' specified in the Order should match the amount that was viewed and authorized by the payer/buyer on Apple Pay. If the amount has changed, please redirect the buyer to authorize the order again via Apple Pay.",
} as const;

export type APPLEPAYAMOUNTMISMATCHDescriptionEnum =
  (typeof APPLEPAYAMOUNTMISMATCHDescriptionEnum)[keyof typeof APPLEPAYAMOUNTMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface AUTHCAPTURENOTENABLED
 */
export interface AUTHCAPTURENOTENABLED {
  /**
   *
   * @type {string}
   * @memberof AUTHCAPTURENOTENABLED
   */
  issue?: AUTHCAPTURENOTENABLEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AUTHCAPTURENOTENABLED
   */
  description?: AUTHCAPTURENOTENABLEDDescriptionEnum;
}

export const AUTHCAPTURENOTENABLEDIssueEnum = {
  AuthCaptureNotEnabled: 'AUTH_CAPTURE_NOT_ENABLED',
} as const;

export type AUTHCAPTURENOTENABLEDIssueEnum =
  (typeof AUTHCAPTURENOTENABLEDIssueEnum)[keyof typeof AUTHCAPTURENOTENABLEDIssueEnum];
export const AUTHCAPTURENOTENABLEDDescriptionEnum = {
  AuthorizationAndCaptureFeatureIsNotEnabledForTheMerchantMakeSureThatTheRecipientOfTheFundsIsAVerifiedBusinessAccount:
    'Authorization and Capture feature is not enabled for the merchant. Make sure that the recipient of the funds is a verified business account.',
} as const;

export type AUTHCAPTURENOTENABLEDDescriptionEnum =
  (typeof AUTHCAPTURENOTENABLEDDescriptionEnum)[keyof typeof AUTHCAPTURENOTENABLEDDescriptionEnum];

/**
 *
 * @export
 * @interface AUTHORIZATIONAMOUNTEXCEEDED
 */
export interface AUTHORIZATIONAMOUNTEXCEEDED {
  /**
   *
   * @type {string}
   * @memberof AUTHORIZATIONAMOUNTEXCEEDED
   */
  issue?: AUTHORIZATIONAMOUNTEXCEEDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AUTHORIZATIONAMOUNTEXCEEDED
   */
  description?: AUTHORIZATIONAMOUNTEXCEEDEDDescriptionEnum;
}

export const AUTHORIZATIONAMOUNTEXCEEDEDIssueEnum = {
  AuthorizationAmountExceeded: 'AUTHORIZATION_AMOUNT_EXCEEDED',
} as const;

export type AUTHORIZATIONAMOUNTEXCEEDEDIssueEnum =
  (typeof AUTHORIZATIONAMOUNTEXCEEDEDIssueEnum)[keyof typeof AUTHORIZATIONAMOUNTEXCEEDEDIssueEnum];
export const AUTHORIZATIONAMOUNTEXCEEDEDDescriptionEnum = {
  AuthorizationAmountSpecifiedExceededAllowableLimitSpecifyADifferentAmountAndTryTheRequestAgainAlternatelyContactCustomerSupportToIncreaseYourLimitsLocalRegulationsEGInPsd2CountriesProhibitOveragesAboveTheAmountAuthorizedByThePayer:
    'Authorization amount specified exceeded allowable limit. Specify a different amount and try the request again. Alternately, contact Customer Support to increase your limits. Local regulations (e.g. in PSD2 countries) prohibit overages above the amount authorized by the payer.',
} as const;

export type AUTHORIZATIONAMOUNTEXCEEDEDDescriptionEnum =
  (typeof AUTHORIZATIONAMOUNTEXCEEDEDDescriptionEnum)[keyof typeof AUTHORIZATIONAMOUNTEXCEEDEDDescriptionEnum];

/**
 *
 * @export
 * @interface AUTHORIZATIONCURRENCYMISMATCH
 */
export interface AUTHORIZATIONCURRENCYMISMATCH {
  /**
   *
   * @type {string}
   * @memberof AUTHORIZATIONCURRENCYMISMATCH
   */
  issue?: AUTHORIZATIONCURRENCYMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof AUTHORIZATIONCURRENCYMISMATCH
   */
  description?: AUTHORIZATIONCURRENCYMISMATCHDescriptionEnum;
}

export const AUTHORIZATIONCURRENCYMISMATCHIssueEnum = {
  AuthorizationCurrencyMismatch: 'AUTHORIZATION_CURRENCY_MISMATCH',
} as const;

export type AUTHORIZATIONCURRENCYMISMATCHIssueEnum =
  (typeof AUTHORIZATIONCURRENCYMISMATCHIssueEnum)[keyof typeof AUTHORIZATIONCURRENCYMISMATCHIssueEnum];
export const AUTHORIZATIONCURRENCYMISMATCHDescriptionEnum = {
  TheCurrencyOfTheAuthorizationShouldBeSameAsThatInWhichTheOrderWasCreatedAndApprovedByThePayerPleaseCheckTheCurrencyCodeAndTryAgain:
    "The currency of the authorization should be same as that in which the Order was created and approved by the Payer. Please check the 'currency_code' and try again.",
} as const;

export type AUTHORIZATIONCURRENCYMISMATCHDescriptionEnum =
  (typeof AUTHORIZATIONCURRENCYMISMATCHDescriptionEnum)[keyof typeof AUTHORIZATIONCURRENCYMISMATCHDescriptionEnum];

/**
 * The date and time stamps that are common to authorized payment, captured payment, and refund transactions.
 * @export
 * @interface ActivityTimestamps
 */
export interface ActivityTimestamps {
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof ActivityTimestamps
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof ActivityTimestamps
   */
  update_time?: string;
}
/**
 * The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
 * @export
 * @interface AddressDetails
 */
export interface AddressDetails {
  /**
   * The street number.
   * @type {string}
   * @memberof AddressDetails
   */
  street_number?: string;
  /**
   * The street name. Just `Drury` in `Drury Lane`.
   * @type {string}
   * @memberof AddressDetails
   */
  street_name?: string;
  /**
   * The street type. For example, avenue, boulevard, road, or expressway.
   * @type {string}
   * @memberof AddressDetails
   */
  street_type?: string;
  /**
   * The delivery service. Post office box, bag number, or post office name.
   * @type {string}
   * @memberof AddressDetails
   */
  delivery_service?: string;
  /**
   * A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>.
   * @type {string}
   * @memberof AddressDetails
   */
  building_name?: string;
  /**
   * The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.
   * @type {string}
   * @memberof AddressDetails
   */
  sub_building?: string;
}
/**
 * The non-portable additional address details include fine-grain address information for Compliance, Risk, and other scenarios. This isn\'t portable with common third-party and open source applications. This can include data that is redundant with core fields. For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
 * @export
 * @interface AddressDetails1
 */
export interface AddressDetails1 {
  /**
   * The street number.
   * @type {string}
   * @memberof AddressDetails1
   */
  street_number?: string;
  /**
   * The street name. Just `Drury` in `Drury Lane`.
   * @type {string}
   * @memberof AddressDetails1
   */
  street_name?: string;
  /**
   * The street type. For example, avenue, boulevard, road, or expressway.
   * @type {string}
   * @memberof AddressDetails1
   */
  street_type?: string;
  /**
   * The delivery service. Post office box, bag number, or post office name.
   * @type {string}
   * @memberof AddressDetails1
   */
  delivery_service?: string;
  /**
   * A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>.
   * @type {string}
   * @memberof AddressDetails1
   */
  building_name?: string;
  /**
   * The first-order entity below a named building or location that represents the sub-premise. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.
   * @type {string}
   * @memberof AddressDetails1
   */
  sub_building?: string;
}
/**
 * The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
 * @export
 * @interface AddressPortable
 */
export interface AddressPortable {
  /**
   * The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.
   * @type {string}
   * @memberof AddressPortable
   */
  address_line_1?: string;
  /**
   * The second line of the address. For example, suite or apartment number.
   * @type {string}
   * @memberof AddressPortable
   */
  address_line_2?: string;
  /**
   * The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.
   * @type {string}
   * @memberof AddressPortable
   */
  address_line_3?: string;
  /**
   * The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>
   * @type {string}
   * @memberof AddressPortable
   */
  admin_area_4?: string;
  /**
   * A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul>
   * @type {string}
   * @memberof AddressPortable
   */
  admin_area_3?: string;
  /**
   * A city, town, or village. Smaller than `admin_area_level_1`.
   * @type {string}
   * @memberof AddressPortable
   */
  admin_area_2?: string;
  /**
   * The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul>
   * @type {string}
   * @memberof AddressPortable
   */
  admin_area_1?: string;
  /**
   * The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).
   * @type {string}
   * @memberof AddressPortable
   */
  postal_code?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof AddressPortable
   */
  country_code: string;
  /**
   *
   * @type {AddressDetails}
   * @memberof AddressPortable
   */
  address_details?: AddressDetails;
}
/**
 * The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
 * @export
 * @interface AddressPortable2
 */
export interface AddressPortable2 {
  /**
   * The first line of the address, such as number and street, for example, `173 Drury Lane`. Needed for data entry, and Compliance and Risk checks. This field needs to pass the full address.
   * @type {string}
   * @memberof AddressPortable2
   */
  address_line_1?: string;
  /**
   * The second line of the address, for example, a suite or apartment number.
   * @type {string}
   * @memberof AddressPortable2
   */
  address_line_2?: string;
  /**
   * The third line of the address, if needed. Examples include a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.
   * @type {string}
   * @memberof AddressPortable2
   */
  address_line_3?: string;
  /**
   * The neighborhood, ward, or district. This is smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code that is used in Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>
   * @type {string}
   * @memberof AddressPortable2
   */
  admin_area_4?: string;
  /**
   * The sub-locality, suburb, neighborhood, or district. This is smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, *bairro*, or neighborhood.</li><li>India. Sub-locality or district. Street name information isn\'t always available, but a sub-locality or district can be a very small area.</li></ul>
   * @type {string}
   * @memberof AddressPortable2
   */
  admin_area_3?: string;
  /**
   * A city, town, or village. Smaller than `admin_area_level_1`.
   * @type {string}
   * @memberof AddressPortable2
   */
  admin_area_2?: string;
  /**
   * The highest-level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. This data is formatted for postal delivery, for example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A *kanton*.</li></ul>
   * @type {string}
   * @memberof AddressPortable2
   */
  admin_area_1?: string;
  /**
   * The postal code, which is the ZIP code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).
   * @type {string}
   * @memberof AddressPortable2
   */
  postal_code?: string;
  /**
   * The [2-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof AddressPortable2
   */
  country_code: string;
  /**
   *
   * @type {AddressDetails1}
   * @memberof AddressPortable2
   */
  address_details?: AddressDetails1;
}
/**
 * The breakdown of the amount. Breakdown provides details such as total item amount, total tax amount, shipping, handling, insurance, and discounts, if any.
 * @export
 * @interface AmountBreakdown
 */
export interface AmountBreakdown {
  /**
   *
   * @type {Money}
   * @memberof AmountBreakdown
   */
  item_total?: Money;
  /**
   *
   * @type {Money}
   * @memberof AmountBreakdown
   */
  shipping?: Money;
  /**
   *
   * @type {Money}
   * @memberof AmountBreakdown
   */
  handling?: Money;
  /**
   *
   * @type {Money}
   * @memberof AmountBreakdown
   */
  tax_total?: Money;
  /**
   *
   * @type {Money}
   * @memberof AmountBreakdown
   */
  insurance?: Money;
  /**
   *
   * @type {Money}
   * @memberof AmountBreakdown
   */
  shipping_discount?: Money;
  /**
   *
   * @type {Money}
   * @memberof AmountBreakdown
   */
  discount?: Money;
}
/**
 * The total order amount with an optional breakdown that provides details, such as the total item amount, total tax amount, shipping, handling, insurance, and discounts, if any.<br/>If you specify `amount.breakdown`, the amount equals `item_total` plus `tax_total` plus `shipping` plus `handling` plus `insurance` minus `shipping_discount` minus discount.<br/>The amount must be a positive number. For listed of supported currencies and decimal precision, see the PayPal REST APIs <a href=\"/docs/integration/direct/rest/currency-codes/\">Currency Codes</a>.
 * @export
 * @interface AmountWithBreakdown
 */
export interface AmountWithBreakdown {
  /**
   * The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
   * @type {string}
   * @memberof AmountWithBreakdown
   */
  currency_code: string;
  /**
   * The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/).
   * @type {string}
   * @memberof AmountWithBreakdown
   */
  value: string;
  /**
   *
   * @type {AmountBreakdown}
   * @memberof AmountWithBreakdown
   */
  breakdown?: AmountBreakdown;
}
/**
 *
 * @export
 * @interface AmountWithBreakdownAllOf
 */
export interface AmountWithBreakdownAllOf {
  /**
   *
   * @type {AmountBreakdown}
   * @memberof AmountWithBreakdownAllOf
   */
  breakdown?: AmountBreakdown;
}
/**
 * Information about the Payment data obtained by decrypting Apple Pay token.
 * @export
 * @interface ApplePayDecryptedTokenData
 */
export interface ApplePayDecryptedTokenData {
  /**
   *
   * @type {Money2}
   * @memberof ApplePayDecryptedTokenData
   */
  transaction_amount?: Money2;
  /**
   *
   * @type {Card}
   * @memberof ApplePayDecryptedTokenData
   */
  tokenized_card: Card;
  /**
   * Apple Pay Hex-encoded device manufacturer identifier. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof ApplePayDecryptedTokenData
   */
  device_manufacturer_id?: string;
  /**
   * Indicates the type of payment data passed, in case of Non China the payment data is 3DSECURE and for China it is EMV.
   * @type {string}
   * @memberof ApplePayDecryptedTokenData
   */
  payment_data_type?: ApplePayDecryptedTokenDataPaymentDataTypeEnum;
  /**
   *
   * @type {ApplePayPaymentData}
   * @memberof ApplePayDecryptedTokenData
   */
  payment_data?: ApplePayPaymentData;
}

export const ApplePayDecryptedTokenDataPaymentDataTypeEnum = {
  _3Dsecure: '3DSECURE',
  Emv: 'EMV',
} as const;

export type ApplePayDecryptedTokenDataPaymentDataTypeEnum =
  (typeof ApplePayDecryptedTokenDataPaymentDataTypeEnum)[keyof typeof ApplePayDecryptedTokenDataPaymentDataTypeEnum];

/**
 * Information about the decrypted apple pay payment data for the token like cryptogram, eci indicator.
 * @export
 * @interface ApplePayPaymentData
 */
export interface ApplePayPaymentData {
  /**
   * Online payment cryptogram, as defined by 3D Secure. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof ApplePayPaymentData
   */
  cryptogram?: string;
  /**
   * ECI indicator, as defined by 3- Secure. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof ApplePayPaymentData
   */
  eci_indicator?: string;
  /**
   * Encoded Apple Pay EMV Payment Structure used for payments in China. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof ApplePayPaymentData
   */
  emv_data?: string;
  /**
   * Bank Key encrypted Apple Pay PIN. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof ApplePayPaymentData
   */
  pin?: string;
}
/**
 * Information needed to pay using ApplePay.
 * @export
 * @interface ApplePayRequest
 */
export interface ApplePayRequest {
  /**
   * ApplePay transaction identifier, this will be the unique identifier for this transaction provided by Apple. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof ApplePayRequest
   */
  id?: string;
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof ApplePayRequest
   */
  name?: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof ApplePayRequest
   */
  email_address?: string;
  /**
   *
   * @type {Phone}
   * @memberof ApplePayRequest
   */
  phone_number?: Phone;
  /**
   *
   * @type {ApplePayDecryptedTokenData}
   * @memberof ApplePayRequest
   */
  decrypted_token?: ApplePayDecryptedTokenData;
  /**
   *
   * @type {CardStoredCredential}
   * @memberof ApplePayRequest
   */
  stored_credential?: CardStoredCredential;
  /**
   * The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant\'s server so the saved payment source can be used for future transactions.
   * @type {string}
   * @memberof ApplePayRequest
   */
  vault_id?: string;
  /**
   *
   * @type {any}
   * @memberof ApplePayRequest
   */
  attributes?: any;
}
/**
 * Results of Authentication such as 3D Secure.
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
  /**
   *
   * @type {LiabilityShift}
   * @memberof AuthenticationResponse
   */
  liability_shift?: LiabilityShift;
  /**
   *
   * @type {ThreeDSecureAuthenticationResponse}
   * @memberof AuthenticationResponse
   */
  three_d_secure?: ThreeDSecureAuthenticationResponse;
  /**
   *
   * @type {any}
   * @memberof AuthenticationResponse
   */
  authentication_flow?: any;
  /**
   *
   * @type {any}
   * @memberof AuthenticationResponse
   */
  exemption_details?: any;
}

/**
 * The authorized payment transaction.
 * @export
 * @interface Authorization
 */
export interface Authorization {
  /**
   * The status for the authorized payment.
   * @type {string}
   * @memberof Authorization
   */
  status?: AuthorizationStatusEnum;
  /**
   *
   * @type {AuthorizationStatusDetails}
   * @memberof Authorization
   */
  status_details?: AuthorizationStatusDetails;
  /**
   * The PayPal-generated ID for the authorized payment.
   * @type {string}
   * @memberof Authorization
   */
  id?: string;
  /**
   *
   * @type {Money}
   * @memberof Authorization
   */
  amount?: Money;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof Authorization
   */
  invoice_id?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof Authorization
   */
  custom_id?: string;
  /**
   *
   * @type {NetworkTransactionReference}
   * @memberof Authorization
   */
  network_transaction_reference?: NetworkTransactionReference;
  /**
   *
   * @type {SellerProtection}
   * @memberof Authorization
   */
  seller_protection?: SellerProtection;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Authorization
   */
  expiration_time?: string;
  /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @type {Array<LinkDescription>}
   * @memberof Authorization
   */
  links?: Array<LinkDescription>;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Authorization
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Authorization
   */
  update_time?: string;
}

export const AuthorizationStatusEnum = {
  Created: 'CREATED',
  Captured: 'CAPTURED',
  Denied: 'DENIED',
  PartiallyCaptured: 'PARTIALLY_CAPTURED',
  Voided: 'VOIDED',
  Pending: 'PENDING',
} as const;

export type AuthorizationStatusEnum =
  (typeof AuthorizationStatusEnum)[keyof typeof AuthorizationStatusEnum];

/**
 *
 * @export
 * @interface AuthorizationAllOf
 */
export interface AuthorizationAllOf {
  /**
   * The PayPal-generated ID for the authorized payment.
   * @type {string}
   * @memberof AuthorizationAllOf
   */
  id?: string;
  /**
   *
   * @type {Money}
   * @memberof AuthorizationAllOf
   */
  amount?: Money;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof AuthorizationAllOf
   */
  invoice_id?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof AuthorizationAllOf
   */
  custom_id?: string;
  /**
   *
   * @type {NetworkTransactionReference}
   * @memberof AuthorizationAllOf
   */
  network_transaction_reference?: NetworkTransactionReference;
  /**
   *
   * @type {SellerProtection}
   * @memberof AuthorizationAllOf
   */
  seller_protection?: SellerProtection;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof AuthorizationAllOf
   */
  expiration_time?: string;
  /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @type {Array<LinkDescription>}
   * @memberof AuthorizationAllOf
   */
  links?: Array<LinkDescription>;
}
/**
 * The status fields for an authorized payment.
 * @export
 * @interface AuthorizationStatus
 */
export interface AuthorizationStatus {
  /**
   * The status for the authorized payment.
   * @type {string}
   * @memberof AuthorizationStatus
   */
  status?: AuthorizationStatusStatusEnum;
  /**
   *
   * @type {AuthorizationStatusDetails}
   * @memberof AuthorizationStatus
   */
  status_details?: AuthorizationStatusDetails;
}

export const AuthorizationStatusStatusEnum = {
  Created: 'CREATED',
  Captured: 'CAPTURED',
  Denied: 'DENIED',
  PartiallyCaptured: 'PARTIALLY_CAPTURED',
  Voided: 'VOIDED',
  Pending: 'PENDING',
} as const;

export type AuthorizationStatusStatusEnum =
  (typeof AuthorizationStatusStatusEnum)[keyof typeof AuthorizationStatusStatusEnum];

/**
 * The details of the authorized payment status.
 * @export
 * @interface AuthorizationStatusDetails
 */
export interface AuthorizationStatusDetails {
  /**
   * The reason why the authorized status is `PENDING`.
   * @type {string}
   * @memberof AuthorizationStatusDetails
   */
  reason?: AuthorizationStatusDetailsReasonEnum;
}

export const AuthorizationStatusDetailsReasonEnum = {
  PendingReview: 'PENDING_REVIEW',
} as const;

export type AuthorizationStatusDetailsReasonEnum =
  (typeof AuthorizationStatusDetailsReasonEnum)[keyof typeof AuthorizationStatusDetailsReasonEnum];

/**
 * The authorization with additional payment details, such as risk assessment and processor response. These details are populated only for certain payment methods.
 * @export
 * @interface AuthorizationWithAdditionalData
 */
export interface AuthorizationWithAdditionalData {
  /**
   * The status for the authorized payment.
   * @type {string}
   * @memberof AuthorizationWithAdditionalData
   */
  status?: AuthorizationWithAdditionalDataStatusEnum;
  /**
   *
   * @type {AuthorizationStatusDetails}
   * @memberof AuthorizationWithAdditionalData
   */
  status_details?: AuthorizationStatusDetails;
  /**
   * The PayPal-generated ID for the authorized payment.
   * @type {string}
   * @memberof AuthorizationWithAdditionalData
   */
  id?: string;
  /**
   *
   * @type {Money}
   * @memberof AuthorizationWithAdditionalData
   */
  amount?: Money;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof AuthorizationWithAdditionalData
   */
  invoice_id?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof AuthorizationWithAdditionalData
   */
  custom_id?: string;
  /**
   *
   * @type {NetworkTransactionReference}
   * @memberof AuthorizationWithAdditionalData
   */
  network_transaction_reference?: NetworkTransactionReference;
  /**
   *
   * @type {SellerProtection}
   * @memberof AuthorizationWithAdditionalData
   */
  seller_protection?: SellerProtection;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof AuthorizationWithAdditionalData
   */
  expiration_time?: string;
  /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @type {Array<LinkDescription>}
   * @memberof AuthorizationWithAdditionalData
   */
  links?: Array<LinkDescription>;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof AuthorizationWithAdditionalData
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof AuthorizationWithAdditionalData
   */
  update_time?: string;
  /**
   *
   * @type {ProcessorResponse}
   * @memberof AuthorizationWithAdditionalData
   */
  processor_response?: ProcessorResponse;
}

export const AuthorizationWithAdditionalDataStatusEnum = {
  Created: 'CREATED',
  Captured: 'CAPTURED',
  Denied: 'DENIED',
  PartiallyCaptured: 'PARTIALLY_CAPTURED',
  Voided: 'VOIDED',
  Pending: 'PENDING',
} as const;

export type AuthorizationWithAdditionalDataStatusEnum =
  (typeof AuthorizationWithAdditionalDataStatusEnum)[keyof typeof AuthorizationWithAdditionalDataStatusEnum];

/**
 *
 * @export
 * @interface AuthorizationWithAdditionalDataAllOf
 */
export interface AuthorizationWithAdditionalDataAllOf {
  /**
   *
   * @type {ProcessorResponse}
   * @memberof AuthorizationWithAdditionalDataAllOf
   */
  processor_response?: ProcessorResponse;
}
/**
 *
 * @export
 * @interface BANKNOTSUPPORTEDFORVERIFICATION
 */
export interface BANKNOTSUPPORTEDFORVERIFICATION {
  /**
   *
   * @type {string}
   * @memberof BANKNOTSUPPORTEDFORVERIFICATION
   */
  issue?: BANKNOTSUPPORTEDFORVERIFICATIONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof BANKNOTSUPPORTEDFORVERIFICATION
   */
  description?: BANKNOTSUPPORTEDFORVERIFICATIONDescriptionEnum;
}

export const BANKNOTSUPPORTEDFORVERIFICATIONIssueEnum = {
  BankNotSupportedForVerification: 'BANK_NOT_SUPPORTED_FOR_VERIFICATION',
} as const;

export type BANKNOTSUPPORTEDFORVERIFICATIONIssueEnum =
  (typeof BANKNOTSUPPORTEDFORVERIFICATIONIssueEnum)[keyof typeof BANKNOTSUPPORTEDFORVERIFICATIONIssueEnum];
export const BANKNOTSUPPORTEDFORVERIFICATIONDescriptionEnum = {
  VerificationForThisBankAccountIsNotSupported:
    'Verification for this bank account is not supported.',
} as const;

export type BANKNOTSUPPORTEDFORVERIFICATIONDescriptionEnum =
  (typeof BANKNOTSUPPORTEDFORVERIFICATIONDescriptionEnum)[keyof typeof BANKNOTSUPPORTEDFORVERIFICATIONDescriptionEnum];

/**
 *
 * @export
 * @interface BILLINGADDRESSINVALID
 */
export interface BILLINGADDRESSINVALID {
  /**
   *
   * @type {string}
   * @memberof BILLINGADDRESSINVALID
   */
  issue?: BILLINGADDRESSINVALIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof BILLINGADDRESSINVALID
   */
  description?: BILLINGADDRESSINVALIDDescriptionEnum;
}

export const BILLINGADDRESSINVALIDIssueEnum = {
  BillingAddressInvalid: 'BILLING_ADDRESS_INVALID',
} as const;

export type BILLINGADDRESSINVALIDIssueEnum =
  (typeof BILLINGADDRESSINVALIDIssueEnum)[keyof typeof BILLINGADDRESSINVALIDIssueEnum];
export const BILLINGADDRESSINVALIDDescriptionEnum = {
  ProvidedBillingAddressIsInvalid: 'Provided billing address is invalid.',
} as const;

export type BILLINGADDRESSINVALIDDescriptionEnum =
  (typeof BILLINGADDRESSINVALIDDescriptionEnum)[keyof typeof BILLINGADDRESSINVALIDDescriptionEnum];

/**
 *
 * @export
 * @interface BILLINGAGREEMENTIDMISMATCH
 */
export interface BILLINGAGREEMENTIDMISMATCH {
  /**
   *
   * @type {string}
   * @memberof BILLINGAGREEMENTIDMISMATCH
   */
  issue?: BILLINGAGREEMENTIDMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof BILLINGAGREEMENTIDMISMATCH
   */
  description?: BILLINGAGREEMENTIDMISMATCHDescriptionEnum;
}

export const BILLINGAGREEMENTIDMISMATCHIssueEnum = {
  BillingAgreementIdMismatch: 'BILLING_AGREEMENT_ID_MISMATCH',
} as const;

export type BILLINGAGREEMENTIDMISMATCHIssueEnum =
  (typeof BILLINGAGREEMENTIDMISMATCHIssueEnum)[keyof typeof BILLINGAGREEMENTIDMISMATCHIssueEnum];
export const BILLINGAGREEMENTIDMISMATCHDescriptionEnum = {
  BillingAgreementIdMustExactlyMatchTheBillingAgreementIdThatWasProvidedDuringOrderCreation:
    'Billing Agreement ID must exactly match the Billing Agreement ID that was provided during order creation.',
} as const;

export type BILLINGAGREEMENTIDMISMATCHDescriptionEnum =
  (typeof BILLINGAGREEMENTIDMISMATCHDescriptionEnum)[keyof typeof BILLINGAGREEMENTIDMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface BILLINGAGREEMENTNOTFOUND
 */
export interface BILLINGAGREEMENTNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof BILLINGAGREEMENTNOTFOUND
   */
  issue?: BILLINGAGREEMENTNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof BILLINGAGREEMENTNOTFOUND
   */
  description?: BILLINGAGREEMENTNOTFOUNDDescriptionEnum;
}

export const BILLINGAGREEMENTNOTFOUNDIssueEnum = {
  BillingAgreementNotFound: 'BILLING_AGREEMENT_NOT_FOUND',
} as const;

export type BILLINGAGREEMENTNOTFOUNDIssueEnum =
  (typeof BILLINGAGREEMENTNOTFOUNDIssueEnum)[keyof typeof BILLINGAGREEMENTNOTFOUNDIssueEnum];
export const BILLINGAGREEMENTNOTFOUNDDescriptionEnum = {
  TheRequestedBillingAgreementTokenWasNotFound:
    'The requested Billing Agreement token was not found.',
} as const;

export type BILLINGAGREEMENTNOTFOUNDDescriptionEnum =
  (typeof BILLINGAGREEMENTNOTFOUNDDescriptionEnum)[keyof typeof BILLINGAGREEMENTNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface BLIKONECLICKMISSINGREQUIREDPARAMETER
 */
export interface BLIKONECLICKMISSINGREQUIREDPARAMETER {
  /**
   *
   * @type {string}
   * @memberof BLIKONECLICKMISSINGREQUIREDPARAMETER
   */
  issue?: BLIKONECLICKMISSINGREQUIREDPARAMETERIssueEnum;
  /**
   *
   * @type {string}
   * @memberof BLIKONECLICKMISSINGREQUIREDPARAMETER
   */
  description?: BLIKONECLICKMISSINGREQUIREDPARAMETERDescriptionEnum;
}

export const BLIKONECLICKMISSINGREQUIREDPARAMETERIssueEnum = {
  BlikOneClickMissingRequiredParameter:
    'BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER',
} as const;

export type BLIKONECLICKMISSINGREQUIREDPARAMETERIssueEnum =
  (typeof BLIKONECLICKMISSINGREQUIREDPARAMETERIssueEnum)[keyof typeof BLIKONECLICKMISSINGREQUIREDPARAMETERIssueEnum];
export const BLIKONECLICKMISSINGREQUIREDPARAMETERDescriptionEnum = {
  BliksOneClickFlowRequiresOneClickAuthCodeAndOneClickAliasLabelParametersForTheBuyersFirstTransactionForAllSubsequentTransactionsonlyTheOneClickAliasKeyParameterIsRequired:
    "Blik's one_click flow requires one_click.auth_code and one_click.alias_label parameters for the buyer's first transaction. For all subsequent transactions,only the one_click.alias_key parameter is required.",
} as const;

export type BLIKONECLICKMISSINGREQUIREDPARAMETERDescriptionEnum =
  (typeof BLIKONECLICKMISSINGREQUIREDPARAMETERDescriptionEnum)[keyof typeof BLIKONECLICKMISSINGREQUIREDPARAMETERDescriptionEnum];

/**
 * Information used to pay Bancontact.
 * @export
 * @interface Bancontact
 */
export interface Bancontact {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Bancontact
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Bancontact
   */
  country_code?: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof Bancontact
   */
  bic?: string;
  /**
   * The last characters of the IBAN used to pay.
   * @type {string}
   * @memberof Bancontact
   */
  iban_last_chars?: string;
  /**
   * The last digits of the card used to fund the Bancontact payment.
   * @type {string}
   * @memberof Bancontact
   */
  card_last_digits?: string;
  /**
   *
   * @type {any}
   * @memberof Bancontact
   */
  attributes?: any;
}
/**
 * Information needed to pay using Bancontact.
 * @export
 * @interface BancontactRequest
 */
export interface BancontactRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof BancontactRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof BancontactRequest
   */
  country_code: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof BancontactRequest
   */
  experience_context?: ExperienceContextBase;
  /**
   *
   * @type {any}
   * @memberof BancontactRequest
   */
  attributes?: any;
}
/**
 * Bank Identification Number (BIN) details used to fund a payment.
 * @export
 * @interface BinDetails
 */
export interface BinDetails {
  /**
   * The Bank Identification Number (BIN) signifies the number that is being used to identify the granular level details (except the PII information) of the card.
   * @type {string}
   * @memberof BinDetails
   */
  bin?: string;
  /**
   * The issuer of the card instrument.
   * @type {string}
   * @memberof BinDetails
   */
  issuing_bank?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof BinDetails
   */
  bin_country_code?: string;
  /**
   * The type of card product assigned to the BIN by the issuer. These values are defined by the issuer and may change over time. Some examples include: PREPAID_GIFT, CONSUMER, CORPORATE.
   * @type {Array<string>}
   * @memberof BinDetails
   */
  products?: Array<string>;
}
/**
 * Information used to pay using BLIK.
 * @export
 * @interface Blik
 */
export interface Blik {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Blik
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Blik
   */
  country_code?: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof Blik
   */
  email?: string;
  /**
   *
   * @type {BlikOneClickResponse}
   * @memberof Blik
   */
  one_click?: BlikOneClickResponse;
}
/**
 * Customizes the payer experience during the approval process for the BLIK payment.
 * @export
 * @interface BlikExperienceContext
 */
export interface BlikExperienceContext {
  /**
   * The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof BlikExperienceContext
   */
  brand_name?: string;
  /**
   * The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).
   * @type {string}
   * @memberof BlikExperienceContext
   */
  locale?: string;
  /**
   * The location from which the shipping address is derived.
   * @type {string}
   * @memberof BlikExperienceContext
   */
  shipping_preference?: BlikExperienceContextShippingPreferenceEnum;
  /**
   * Describes the URL.
   * @type {string}
   * @memberof BlikExperienceContext
   */
  return_url?: string;
  /**
   * Describes the URL.
   * @type {string}
   * @memberof BlikExperienceContext
   */
  cancel_url?: string;
  /**
   * An Internet Protocol address (IP address). This address assigns a numerical label to each device that is connected to a computer network through the Internet Protocol. Supports IPv4 and IPv6 addresses.
   * @type {string}
   * @memberof BlikExperienceContext
   */
  consumer_ip?: string;
  /**
   * The payer\'s User Agent. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0).
   * @type {string}
   * @memberof BlikExperienceContext
   */
  consumer_user_agent?: string;
}

export const BlikExperienceContextShippingPreferenceEnum = {
  GetFromFile: 'GET_FROM_FILE',
  NoShipping: 'NO_SHIPPING',
  SetProvidedAddress: 'SET_PROVIDED_ADDRESS',
} as const;

export type BlikExperienceContextShippingPreferenceEnum =
  (typeof BlikExperienceContextShippingPreferenceEnum)[keyof typeof BlikExperienceContextShippingPreferenceEnum];

/**
 *
 * @export
 * @interface BlikExperienceContextAllOf
 */
export interface BlikExperienceContextAllOf {
  /**
   * An Internet Protocol address (IP address). This address assigns a numerical label to each device that is connected to a computer network through the Internet Protocol. Supports IPv4 and IPv6 addresses.
   * @type {string}
   * @memberof BlikExperienceContextAllOf
   */
  consumer_ip?: string;
  /**
   * The payer\'s User Agent. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0).
   * @type {string}
   * @memberof BlikExperienceContextAllOf
   */
  consumer_user_agent?: string;
}
/**
 * Information used to pay using BLIK one-click flow.
 * @export
 * @interface BlikOneClick
 */
export interface BlikOneClick {
  /**
   * The 6-digit code used to authenticate a consumer within BLIK.
   * @type {string}
   * @memberof BlikOneClick
   */
  auth_code?: string;
  /**
   * The merchant generated, unique reference serving as a primary identifier for accounts connected between Blik and a merchant.
   * @type {string}
   * @memberof BlikOneClick
   */
  consumer_reference: string;
  /**
   * A bank defined identifier used as a display name to allow the payer to differentiate between multiple registered bank accounts.
   * @type {string}
   * @memberof BlikOneClick
   */
  alias_label?: string;
  /**
   * A Blik-defined identifier for a specific Blik-enabled bank account that is associated with a given merchant. Used only in conjunction with a Consumer Reference.
   * @type {string}
   * @memberof BlikOneClick
   */
  alias_key?: string;
}
/**
 * Information used to pay using BLIK one-click flow.
 * @export
 * @interface BlikOneClickResponse
 */
export interface BlikOneClickResponse {
  /**
   * The merchant generated, unique reference serving as a primary identifier for accounts connected between Blik and a merchant.
   * @type {string}
   * @memberof BlikOneClickResponse
   */
  consumer_reference?: string;
}
/**
 * Information needed to pay using BLIK.
 * @export
 * @interface BlikRequest
 */
export interface BlikRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof BlikRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof BlikRequest
   */
  country_code: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof BlikRequest
   */
  email?: string;
  /**
   *
   * @type {BlikExperienceContext}
   * @memberof BlikRequest
   */
  experience_context?: BlikExperienceContext;
  /**
   *
   * @type {BlikSeamless}
   * @memberof BlikRequest
   */
  level_0?: BlikSeamless;
  /**
   *
   * @type {BlikOneClick}
   * @memberof BlikRequest
   */
  one_click?: BlikOneClick;
}
/**
 * Information used to pay using BLIK level_0 flow.
 * @export
 * @interface BlikSeamless
 */
export interface BlikSeamless {
  /**
   * The 6-digit code used to authenticate a consumer within BLIK.
   * @type {string}
   * @memberof BlikSeamless
   */
  auth_code: string;
}
/**
 *
 * @export
 * @interface CANCELURLREQUIRED
 */
export interface CANCELURLREQUIRED {
  /**
   *
   * @type {string}
   * @memberof CANCELURLREQUIRED
   */
  issue?: CANCELURLREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CANCELURLREQUIRED
   */
  description?: CANCELURLREQUIREDDescriptionEnum;
}

export const CANCELURLREQUIREDIssueEnum = {
  CancelUrlRequired: 'CANCEL_URL_REQUIRED',
} as const;

export type CANCELURLREQUIREDIssueEnum =
  (typeof CANCELURLREQUIREDIssueEnum)[keyof typeof CANCELURLREQUIREDIssueEnum];
export const CANCELURLREQUIREDDescriptionEnum = {
  TheCancelUrlIsRequiredWhenAttemptingToVaultThisSource:
    'The cancel url is required when attempting to vault this source.',
} as const;

export type CANCELURLREQUIREDDescriptionEnum =
  (typeof CANCELURLREQUIREDDescriptionEnum)[keyof typeof CANCELURLREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface CANNOTBENEGATIVE
 */
export interface CANNOTBENEGATIVE {
  /**
   *
   * @type {string}
   * @memberof CANNOTBENEGATIVE
   */
  issue?: CANNOTBENEGATIVEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CANNOTBENEGATIVE
   */
  description?: CANNOTBENEGATIVEDescriptionEnum;
}

export const CANNOTBENEGATIVEIssueEnum = {
  CannotBeNegative: 'CANNOT_BE_NEGATIVE',
} as const;

export type CANNOTBENEGATIVEIssueEnum =
  (typeof CANNOTBENEGATIVEIssueEnum)[keyof typeof CANNOTBENEGATIVEIssueEnum];
export const CANNOTBENEGATIVEDescriptionEnum = {
  MustBeGreaterThanOrEqualTo0IfTheCurrencySupportsDecimalsOnlyTwoDecimalPlacePrecisionIsSupported:
    'Must be greater than or equal to 0. If the currency supports decimals, only two decimal place precision is supported.',
} as const;

export type CANNOTBENEGATIVEDescriptionEnum =
  (typeof CANNOTBENEGATIVEDescriptionEnum)[keyof typeof CANNOTBENEGATIVEDescriptionEnum];

/**
 *
 * @export
 * @interface CANNOTBEZEROORNEGATIVE
 */
export interface CANNOTBEZEROORNEGATIVE {
  /**
   *
   * @type {string}
   * @memberof CANNOTBEZEROORNEGATIVE
   */
  issue?: CANNOTBEZEROORNEGATIVEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CANNOTBEZEROORNEGATIVE
   */
  description?: CANNOTBEZEROORNEGATIVEDescriptionEnum;
}

export const CANNOTBEZEROORNEGATIVEIssueEnum = {
  CannotBeZeroOrNegative: 'CANNOT_BE_ZERO_OR_NEGATIVE',
} as const;

export type CANNOTBEZEROORNEGATIVEIssueEnum =
  (typeof CANNOTBEZEROORNEGATIVEIssueEnum)[keyof typeof CANNOTBEZEROORNEGATIVEIssueEnum];
export const CANNOTBEZEROORNEGATIVEDescriptionEnum = {
  MustBeGreaterThanZeroIfTheCurrencySupportsDecimalsOnlyTwoDecimalPlacePrecisionIsSupported:
    'Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported.',
} as const;

export type CANNOTBEZEROORNEGATIVEDescriptionEnum =
  (typeof CANNOTBEZEROORNEGATIVEDescriptionEnum)[keyof typeof CANNOTBEZEROORNEGATIVEDescriptionEnum];

/**
 *
 * @export
 * @interface CAPTUREIDNOTFOUND
 */
export interface CAPTUREIDNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof CAPTUREIDNOTFOUND
   */
  issue?: CAPTUREIDNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CAPTUREIDNOTFOUND
   */
  description?: CAPTUREIDNOTFOUNDDescriptionEnum;
}

export const CAPTUREIDNOTFOUNDIssueEnum = {
  CaptureIdNotFound: 'CAPTURE_ID_NOT_FOUND',
} as const;

export type CAPTUREIDNOTFOUNDIssueEnum =
  (typeof CAPTUREIDNOTFOUNDIssueEnum)[keyof typeof CAPTUREIDNOTFOUNDIssueEnum];
export const CAPTUREIDNOTFOUNDDescriptionEnum = {
  SpecifiedCaptureIdDoesNotExistCheckTheCaptureIdAndTryAgain:
    'Specified capture ID does not exist. Check the capture ID and try again.',
} as const;

export type CAPTUREIDNOTFOUNDDescriptionEnum =
  (typeof CAPTUREIDNOTFOUNDDescriptionEnum)[keyof typeof CAPTUREIDNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface CAPTURESTATUSNOTVALID
 */
export interface CAPTURESTATUSNOTVALID {
  /**
   *
   * @type {string}
   * @memberof CAPTURESTATUSNOTVALID
   */
  issue?: CAPTURESTATUSNOTVALIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CAPTURESTATUSNOTVALID
   */
  description?: CAPTURESTATUSNOTVALIDDescriptionEnum;
}

export const CAPTURESTATUSNOTVALIDIssueEnum = {
  CaptureStatusNotValid: 'CAPTURE_STATUS_NOT_VALID',
} as const;

export type CAPTURESTATUSNOTVALIDIssueEnum =
  (typeof CAPTURESTATUSNOTVALIDIssueEnum)[keyof typeof CAPTURESTATUSNOTVALIDIssueEnum];
export const CAPTURESTATUSNOTVALIDDescriptionEnum = {
  InvalidCaptureStatusTrackerInformationCanOnlyBeAddedToCapturesInCompletedState:
    'Invalid capture status. Tracker information can only be added to captures in `COMPLETED` state.',
} as const;

export type CAPTURESTATUSNOTVALIDDescriptionEnum =
  (typeof CAPTURESTATUSNOTVALIDDescriptionEnum)[keyof typeof CAPTURESTATUSNOTVALIDDescriptionEnum];

/**
 *
 * @export
 * @interface CARDBRANDNOTSUPPORTED
 */
export interface CARDBRANDNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof CARDBRANDNOTSUPPORTED
   */
  issue?: CARDBRANDNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CARDBRANDNOTSUPPORTED
   */
  description?: CARDBRANDNOTSUPPORTEDDescriptionEnum;
}

export const CARDBRANDNOTSUPPORTEDIssueEnum = {
  CardBrandNotSupported: 'CARD_BRAND_NOT_SUPPORTED',
} as const;

export type CARDBRANDNOTSUPPORTEDIssueEnum =
  (typeof CARDBRANDNOTSUPPORTEDIssueEnum)[keyof typeof CARDBRANDNOTSUPPORTEDIssueEnum];
export const CARDBRANDNOTSUPPORTEDDescriptionEnum = {
  ProcessingOfThisCardBrandIsNotSupportedPleaseUseAnotherCardToContinueWithThisTransaction:
    'Processing of this card brand is not supported. Please use another card to continue with this transaction.',
} as const;

export type CARDBRANDNOTSUPPORTEDDescriptionEnum =
  (typeof CARDBRANDNOTSUPPORTEDDescriptionEnum)[keyof typeof CARDBRANDNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface CARDEXPIRED
 */
export interface CARDEXPIRED {
  /**
   *
   * @type {string}
   * @memberof CARDEXPIRED
   */
  issue?: CARDEXPIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CARDEXPIRED
   */
  description?: CARDEXPIREDDescriptionEnum;
}

export const CARDEXPIREDIssueEnum = {
  CardExpired: 'CARD_EXPIRED',
} as const;

export type CARDEXPIREDIssueEnum =
  (typeof CARDEXPIREDIssueEnum)[keyof typeof CARDEXPIREDIssueEnum];
export const CARDEXPIREDDescriptionEnum = {
  TheCardIsExpired: 'The card is expired',
} as const;

export type CARDEXPIREDDescriptionEnum =
  (typeof CARDEXPIREDDescriptionEnum)[keyof typeof CARDEXPIREDDescriptionEnum];

/**
 *
 * @export
 * @interface CARDEXPIRYREQUIRED
 */
export interface CARDEXPIRYREQUIRED {
  /**
   *
   * @type {string}
   * @memberof CARDEXPIRYREQUIRED
   */
  issue?: CARDEXPIRYREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CARDEXPIRYREQUIRED
   */
  description?: CARDEXPIRYREQUIREDDescriptionEnum;
}

export const CARDEXPIRYREQUIREDIssueEnum = {
  CardExpiryRequired: 'CARD_EXPIRY_REQUIRED',
} as const;

export type CARDEXPIRYREQUIREDIssueEnum =
  (typeof CARDEXPIRYREQUIREDIssueEnum)[keyof typeof CARDEXPIRYREQUIREDIssueEnum];
export const CARDEXPIRYREQUIREDDescriptionEnum = {
  TheCardExpiryIsRequiredWhenAttemptingToProcessPaymentWithCard:
    'The card expiry is required when attempting to process payment with card.',
} as const;

export type CARDEXPIRYREQUIREDDescriptionEnum =
  (typeof CARDEXPIRYREQUIREDDescriptionEnum)[keyof typeof CARDEXPIRYREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface CARDNUMBERREQUIRED
 */
export interface CARDNUMBERREQUIRED {
  /**
   *
   * @type {string}
   * @memberof CARDNUMBERREQUIRED
   */
  issue?: CARDNUMBERREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CARDNUMBERREQUIRED
   */
  description?: CARDNUMBERREQUIREDDescriptionEnum;
}

export const CARDNUMBERREQUIREDIssueEnum = {
  CardNumberRequired: 'CARD_NUMBER_REQUIRED',
} as const;

export type CARDNUMBERREQUIREDIssueEnum =
  (typeof CARDNUMBERREQUIREDIssueEnum)[keyof typeof CARDNUMBERREQUIREDIssueEnum];
export const CARDNUMBERREQUIREDDescriptionEnum = {
  TheCardNumberIsRequiredWhenAttemptingToProcessPaymentWithCard:
    'The card number is required when attempting to process payment with card.',
} as const;

export type CARDNUMBERREQUIREDDescriptionEnum =
  (typeof CARDNUMBERREQUIREDDescriptionEnum)[keyof typeof CARDNUMBERREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface CARDTYPENOTSUPPORTED
 */
export interface CARDTYPENOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof CARDTYPENOTSUPPORTED
   */
  issue?: CARDTYPENOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CARDTYPENOTSUPPORTED
   */
  description?: CARDTYPENOTSUPPORTEDDescriptionEnum;
}

export const CARDTYPENOTSUPPORTEDIssueEnum = {
  CardTypeNotSupported: 'CARD_TYPE_NOT_SUPPORTED',
} as const;

export type CARDTYPENOTSUPPORTEDIssueEnum =
  (typeof CARDTYPENOTSUPPORTEDIssueEnum)[keyof typeof CARDTYPENOTSUPPORTEDIssueEnum];
export const CARDTYPENOTSUPPORTEDDescriptionEnum = {
  ProcessingOfThisCardTypeIsNotSupportedUseAnotherCardType:
    'Processing of this card type is not supported. Use another card type.',
} as const;

export type CARDTYPENOTSUPPORTEDDescriptionEnum =
  (typeof CARDTYPENOTSUPPORTEDDescriptionEnum)[keyof typeof CARDTYPENOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface CITYREQUIRED
 */
export interface CITYREQUIRED {
  /**
   *
   * @type {string}
   * @memberof CITYREQUIRED
   */
  issue?: CITYREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CITYREQUIRED
   */
  description?: CITYREQUIREDDescriptionEnum;
}

export const CITYREQUIREDIssueEnum = {
  CityRequired: 'CITY_REQUIRED',
} as const;

export type CITYREQUIREDIssueEnum =
  (typeof CITYREQUIREDIssueEnum)[keyof typeof CITYREQUIREDIssueEnum];
export const CITYREQUIREDDescriptionEnum = {
  TheSpecifiedCountryRequiresACityAddressAdminArea2:
    'The specified country requires a city (address.admin_area_2).',
} as const;

export type CITYREQUIREDDescriptionEnum =
  (typeof CITYREQUIREDDescriptionEnum)[keyof typeof CITYREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface COMPLIANCEVIOLATION
 */
export interface COMPLIANCEVIOLATION {
  /**
   *
   * @type {string}
   * @memberof COMPLIANCEVIOLATION
   */
  issue?: COMPLIANCEVIOLATIONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof COMPLIANCEVIOLATION
   */
  description?: COMPLIANCEVIOLATIONDescriptionEnum;
}

export const COMPLIANCEVIOLATIONIssueEnum = {
  ComplianceViolation: 'COMPLIANCE_VIOLATION',
} as const;

export type COMPLIANCEVIOLATIONIssueEnum =
  (typeof COMPLIANCEVIOLATIONIssueEnum)[keyof typeof COMPLIANCEVIOLATIONIssueEnum];
export const COMPLIANCEVIOLATIONDescriptionEnum = {
  TransactionIsDeclinedDueToComplianceViolation:
    'Transaction is declined due to compliance violation.',
} as const;

export type COMPLIANCEVIOLATIONDescriptionEnum =
  (typeof COMPLIANCEVIOLATIONDescriptionEnum)[keyof typeof COMPLIANCEVIOLATIONDescriptionEnum];

/**
 *
 * @export
 * @interface CONSENTNEEDED
 */
export interface CONSENTNEEDED {
  /**
   *
   * @type {string}
   * @memberof CONSENTNEEDED
   */
  issue?: CONSENTNEEDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CONSENTNEEDED
   */
  description?: CONSENTNEEDEDDescriptionEnum;
}

export const CONSENTNEEDEDIssueEnum = {
  ConsentNeeded: 'CONSENT_NEEDED',
} as const;

export type CONSENTNEEDEDIssueEnum =
  (typeof CONSENTNEEDEDIssueEnum)[keyof typeof CONSENTNEEDEDIssueEnum];
export const CONSENTNEEDEDDescriptionEnum = {
  ConsentNeeded: 'CONSENT_NEEDED',
} as const;

export type CONSENTNEEDEDDescriptionEnum =
  (typeof CONSENTNEEDEDDescriptionEnum)[keyof typeof CONSENTNEEDEDDescriptionEnum];

/**
 *
 * @export
 * @interface COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE
 */
export interface COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE {
  /**
   *
   * @type {string}
   * @memberof COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE
   */
  issue?: COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof COUNTRYNOTSUPPORTEDBYPAYMENTSOURCE
   */
  description?: COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum;
}

export const COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum = {
  CountryNotSupportedByPaymentSource: 'COUNTRY_NOT_SUPPORTED_BY_PAYMENT_SOURCE',
} as const;

export type COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum =
  (typeof COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum)[keyof typeof COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum];
export const COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum = {
  CountryCodeProvidedIsNotSupportedByTheProvidedPaymentSource:
    'Country code provided is not supported by the provided payment source.',
} as const;

export type COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum =
  (typeof COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum)[keyof typeof COUNTRYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum];

/**
 *
 * @export
 * @interface CRYPTOGRAMREQUIRED
 */
export interface CRYPTOGRAMREQUIRED {
  /**
   *
   * @type {string}
   * @memberof CRYPTOGRAMREQUIRED
   */
  issue?: CRYPTOGRAMREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CRYPTOGRAMREQUIRED
   */
  description?: CRYPTOGRAMREQUIREDDescriptionEnum;
}

export const CRYPTOGRAMREQUIREDIssueEnum = {
  CryptogramRequired: 'CRYPTOGRAM_REQUIRED',
} as const;

export type CRYPTOGRAMREQUIREDIssueEnum =
  (typeof CRYPTOGRAMREQUIREDIssueEnum)[keyof typeof CRYPTOGRAMREQUIREDIssueEnum];
export const CRYPTOGRAMREQUIREDDescriptionEnum = {
  CryptogramIsRequiredIfAuthenticationMethodIsCryptogram3Ds:
    'Cryptogram is required if authentication method is CRYPTOGRAM 3DS.',
} as const;

export type CRYPTOGRAMREQUIREDDescriptionEnum =
  (typeof CRYPTOGRAMREQUIREDDescriptionEnum)[keyof typeof CRYPTOGRAMREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface CURRENCYNOTSUPPORTEDFORBANK
 */
export interface CURRENCYNOTSUPPORTEDFORBANK {
  /**
   *
   * @type {string}
   * @memberof CURRENCYNOTSUPPORTEDFORBANK
   */
  issue?: CURRENCYNOTSUPPORTEDFORBANKIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CURRENCYNOTSUPPORTEDFORBANK
   */
  description?: CURRENCYNOTSUPPORTEDFORBANKDescriptionEnum;
}

export const CURRENCYNOTSUPPORTEDFORBANKIssueEnum = {
  CurrencyNotSupportedForBank: 'CURRENCY_NOT_SUPPORTED_FOR_BANK',
} as const;

export type CURRENCYNOTSUPPORTEDFORBANKIssueEnum =
  (typeof CURRENCYNOTSUPPORTEDFORBANKIssueEnum)[keyof typeof CURRENCYNOTSUPPORTEDFORBANKIssueEnum];
export const CURRENCYNOTSUPPORTEDFORBANKDescriptionEnum = {
  ThePaymentSourceDoesNotSupportTheCurrencyOfTheOrderForAchDebitOnlyUsdIsSupportedAndForSepaDebitOnlyEurIsSupported:
    'The payment_source does not support the currency of the Order. For ACH debit, only USD is supported and for SEPA debit, only EUR is supported.',
} as const;

export type CURRENCYNOTSUPPORTEDFORBANKDescriptionEnum =
  (typeof CURRENCYNOTSUPPORTEDFORBANKDescriptionEnum)[keyof typeof CURRENCYNOTSUPPORTEDFORBANKDescriptionEnum];

/**
 *
 * @export
 * @interface CURRENCYNOTSUPPORTEDFORCARDTYPE
 */
export interface CURRENCYNOTSUPPORTEDFORCARDTYPE {
  /**
   *
   * @type {string}
   * @memberof CURRENCYNOTSUPPORTEDFORCARDTYPE
   */
  issue?: CURRENCYNOTSUPPORTEDFORCARDTYPEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CURRENCYNOTSUPPORTEDFORCARDTYPE
   */
  description?: CURRENCYNOTSUPPORTEDFORCARDTYPEDescriptionEnum;
}

export const CURRENCYNOTSUPPORTEDFORCARDTYPEIssueEnum = {
  CurrencyNotSupportedForCardType: 'CURRENCY_NOT_SUPPORTED_FOR_CARD_TYPE',
} as const;

export type CURRENCYNOTSUPPORTEDFORCARDTYPEIssueEnum =
  (typeof CURRENCYNOTSUPPORTEDFORCARDTYPEIssueEnum)[keyof typeof CURRENCYNOTSUPPORTEDFORCARDTYPEIssueEnum];
export const CURRENCYNOTSUPPORTEDFORCARDTYPEDescriptionEnum = {
  TheIssuedCurrencyCodeOfThisCardIsNotSupportedForDirectCardPaymentsPleaseReferHttpsDeveloperPaypalComApiRestReferenceCurrencyCodesForListOfSupportedCurrencyCodes:
    'The issued currency code of this card is not supported for direct card payments. Please refer https://developer.paypal.com/api/rest/reference/currency-codes/ for list of supported currency codes.',
} as const;

export type CURRENCYNOTSUPPORTEDFORCARDTYPEDescriptionEnum =
  (typeof CURRENCYNOTSUPPORTEDFORCARDTYPEDescriptionEnum)[keyof typeof CURRENCYNOTSUPPORTEDFORCARDTYPEDescriptionEnum];

/**
 *
 * @export
 * @interface CURRENCYNOTSUPPORTEDFORCOUNTRY
 */
export interface CURRENCYNOTSUPPORTEDFORCOUNTRY {
  /**
   *
   * @type {string}
   * @memberof CURRENCYNOTSUPPORTEDFORCOUNTRY
   */
  issue?: CURRENCYNOTSUPPORTEDFORCOUNTRYIssueEnum;
  /**
   *
   * @type {string}
   * @memberof CURRENCYNOTSUPPORTEDFORCOUNTRY
   */
  description?: CURRENCYNOTSUPPORTEDFORCOUNTRYDescriptionEnum;
}

export const CURRENCYNOTSUPPORTEDFORCOUNTRYIssueEnum = {
  CurrencyNotSupportedForCountry: 'CURRENCY_NOT_SUPPORTED_FOR_COUNTRY',
} as const;

export type CURRENCYNOTSUPPORTEDFORCOUNTRYIssueEnum =
  (typeof CURRENCYNOTSUPPORTEDFORCOUNTRYIssueEnum)[keyof typeof CURRENCYNOTSUPPORTEDFORCOUNTRYIssueEnum];
export const CURRENCYNOTSUPPORTEDFORCOUNTRYDescriptionEnum = {
  ForThePaymentSourceSpecifiedTheCurrencyOfTheOrderIsRestrictedByTheCountryInWhichThePayeeAccountIsBasedPleaseReferHttpsDeveloperPaypalComApiRestReferenceCurrencyCodesForListOfSupportedCurrencyCodes:
    ' For the payment_source specified, the currency of the Order is restricted by the country in which the payee account is based. Please refer https://developer.paypal.com/api/rest/reference/currency-codes/ for list of supported currency codes.',
} as const;

export type CURRENCYNOTSUPPORTEDFORCOUNTRYDescriptionEnum =
  (typeof CURRENCYNOTSUPPORTEDFORCOUNTRYDescriptionEnum)[keyof typeof CURRENCYNOTSUPPORTEDFORCOUNTRYDescriptionEnum];

/**
 * A captured payment.
 * @export
 * @interface Capture
 */
export interface Capture {
  /**
   * The status of the captured payment.
   * @type {string}
   * @memberof Capture
   */
  status?: CaptureStatusEnum;
  /**
   *
   * @type {CaptureStatusDetails}
   * @memberof Capture
   */
  status_details?: CaptureStatusDetails;
  /**
   * The PayPal-generated ID for the captured payment.
   * @type {string}
   * @memberof Capture
   */
  id?: string;
  /**
   *
   * @type {Money}
   * @memberof Capture
   */
  amount?: Money;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof Capture
   */
  invoice_id?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof Capture
   */
  custom_id?: string;
  /**
   *
   * @type {NetworkTransactionReference}
   * @memberof Capture
   */
  network_transaction_reference?: NetworkTransactionReference;
  /**
   *
   * @type {SellerProtection}
   * @memberof Capture
   */
  seller_protection?: SellerProtection;
  /**
   * Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
   * @type {boolean}
   * @memberof Capture
   */
  final_capture?: boolean;
  /**
   *
   * @type {SellerReceivableBreakdown}
   * @memberof Capture
   */
  seller_receivable_breakdown?: SellerReceivableBreakdown;
  /**
   *
   * @type {DisbursementMode}
   * @memberof Capture
   */
  disbursement_mode?: DisbursementMode;
  /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @type {Array<LinkDescription>}
   * @memberof Capture
   */
  links?: Array<LinkDescription>;
  /**
   *
   * @type {ProcessorResponse}
   * @memberof Capture
   */
  processor_response?: ProcessorResponse;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Capture
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Capture
   */
  update_time?: string;
}

export const CaptureStatusEnum = {
  Completed: 'COMPLETED',
  Declined: 'DECLINED',
  PartiallyRefunded: 'PARTIALLY_REFUNDED',
  Pending: 'PENDING',
  Refunded: 'REFUNDED',
  Failed: 'FAILED',
} as const;

export type CaptureStatusEnum =
  (typeof CaptureStatusEnum)[keyof typeof CaptureStatusEnum];

/**
 *
 * @export
 * @interface CaptureAllOf
 */
export interface CaptureAllOf {
  /**
   * The PayPal-generated ID for the captured payment.
   * @type {string}
   * @memberof CaptureAllOf
   */
  id?: string;
  /**
   *
   * @type {Money}
   * @memberof CaptureAllOf
   */
  amount?: Money;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof CaptureAllOf
   */
  invoice_id?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof CaptureAllOf
   */
  custom_id?: string;
  /**
   *
   * @type {NetworkTransactionReference}
   * @memberof CaptureAllOf
   */
  network_transaction_reference?: NetworkTransactionReference;
  /**
   *
   * @type {SellerProtection}
   * @memberof CaptureAllOf
   */
  seller_protection?: SellerProtection;
  /**
   * Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
   * @type {boolean}
   * @memberof CaptureAllOf
   */
  final_capture?: boolean;
  /**
   *
   * @type {SellerReceivableBreakdown}
   * @memberof CaptureAllOf
   */
  seller_receivable_breakdown?: SellerReceivableBreakdown;
  /**
   *
   * @type {DisbursementMode}
   * @memberof CaptureAllOf
   */
  disbursement_mode?: DisbursementMode;
  /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @type {Array<LinkDescription>}
   * @memberof CaptureAllOf
   */
  links?: Array<LinkDescription>;
  /**
   *
   * @type {ProcessorResponse}
   * @memberof CaptureAllOf
   */
  processor_response?: ProcessorResponse;
}

/**
 * The status of a captured payment.
 * @export
 * @interface CaptureStatus
 */
export interface CaptureStatus {
  /**
   * The status of the captured payment.
   * @type {string}
   * @memberof CaptureStatus
   */
  status?: CaptureStatusStatusEnum;
  /**
   *
   * @type {CaptureStatusDetails}
   * @memberof CaptureStatus
   */
  status_details?: CaptureStatusDetails;
}

export const CaptureStatusStatusEnum = {
  Completed: 'COMPLETED',
  Declined: 'DECLINED',
  PartiallyRefunded: 'PARTIALLY_REFUNDED',
  Pending: 'PENDING',
  Refunded: 'REFUNDED',
  Failed: 'FAILED',
} as const;

export type CaptureStatusStatusEnum =
  (typeof CaptureStatusStatusEnum)[keyof typeof CaptureStatusStatusEnum];

/**
 * The details of the captured payment status.
 * @export
 * @interface CaptureStatusDetails
 */
export interface CaptureStatusDetails {
  /**
   * The reason why the captured payment status is `PENDING` or `DENIED`.
   * @type {string}
   * @memberof CaptureStatusDetails
   */
  reason?: CaptureStatusDetailsReasonEnum;
}

export const CaptureStatusDetailsReasonEnum = {
  BuyerComplaint: 'BUYER_COMPLAINT',
  Chargeback: 'CHARGEBACK',
  Echeck: 'ECHECK',
  InternationalWithdrawal: 'INTERNATIONAL_WITHDRAWAL',
  Other: 'OTHER',
  PendingReview: 'PENDING_REVIEW',
  ReceivingPreferenceMandatesManualAction:
    'RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION',
  Refunded: 'REFUNDED',
  TransactionApprovedAwaitingFunding: 'TRANSACTION_APPROVED_AWAITING_FUNDING',
  Unilateral: 'UNILATERAL',
  VerificationRequired: 'VERIFICATION_REQUIRED',
} as const;

export type CaptureStatusDetailsReasonEnum =
  (typeof CaptureStatusDetailsReasonEnum)[keyof typeof CaptureStatusDetailsReasonEnum];

/**
 * The payment card to use to fund a payment. Can be a credit or debit card.
 * @export
 * @interface Card
 */
export interface Card {
  /**
   * The identifier of the instrument.
   * @type {string}
   * @memberof Card
   */
  id?: string;
  /**
   * The card holder\'s name as it appears on the card.
   * @type {string}
   * @memberof Card
   */
  name?: string;
  /**
   * The primary account number (PAN) for the payment card.
   * @type {string}
   * @memberof Card
   */
  number?: string;
  /**
   * The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @type {string}
   * @memberof Card
   */
  expiry?: string;
  /**
   * The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`.
   * @type {string}
   * @memberof Card
   */
  security_code?: string;
  /**
   * The last digits of the payment card.
   * @type {string}
   * @memberof Card
   */
  last_digits?: string;
  /**
   *
   * @type {CardBrand}
   * @memberof Card
   */
  card_type?: CardBrand;
  /**
   *
   * @type {CardType}
   * @memberof Card
   */
  type?: CardType;
  /**
   *
   * @type {CardBrand}
   * @memberof Card
   */
  brand?: CardBrand;
  /**
   *
   * @type {AddressPortable}
   * @memberof Card
   */
  billing_address?: AddressPortable;
  /**
   *
   * @type {CardAttributes}
   * @memberof Card
   */
  attributes?: CardAttributes;
}

/**
 * Additional attributes associated with the use of this card.
 * @export
 * @interface CardAttributes
 */
export interface CardAttributes {
  /**
   *
   * @type {Customer}
   * @memberof CardAttributes
   */
  customer?: Customer;
  /**
   *
   * @type {VaultInstructionBase}
   * @memberof CardAttributes
   */
  vault?: VaultInstructionBase;
}
/**
 * Additional attributes associated with the use of this card.
 * @export
 * @interface CardAttributesResponse
 */
export interface CardAttributesResponse {
  /**
   *
   * @type {VaultResponse}
   * @memberof CardAttributesResponse
   */
  vault?: VaultResponse;
}
/**
 * The card network or brand. Applies to credit, debit, gift, and payment cards.
 * @export
 * @enum {string}
 */

export const CardBrand = {
  Visa: 'VISA',
  Mastercard: 'MASTERCARD',
  Discover: 'DISCOVER',
  Amex: 'AMEX',
  Solo: 'SOLO',
  Jcb: 'JCB',
  Star: 'STAR',
  Delta: 'DELTA',
  Switch: 'SWITCH',
  Maestro: 'MAESTRO',
  CbNationale: 'CB_NATIONALE',
  Configoga: 'CONFIGOGA',
  Confidis: 'CONFIDIS',
  Electron: 'ELECTRON',
  Cetelem: 'CETELEM',
  ChinaUnionPay: 'CHINA_UNION_PAY',
} as const;

export type CardBrand = (typeof CardBrand)[keyof typeof CardBrand];

/**
 * Customizes the payer experience during the 3DS Approval for payment.
 * @export
 * @interface CardExperienceContext
 */
export interface CardExperienceContext {
  /**
   * Describes the URL.
   * @type {string}
   * @memberof CardExperienceContext
   */
  return_url?: string;
  /**
   * Describes the URL.
   * @type {string}
   * @memberof CardExperienceContext
   */
  cancel_url?: string;
}
/**
 * Representation of card details as received in the request.
 * @export
 * @interface CardFromRequest
 */
export interface CardFromRequest {
  /**
   * The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @type {string}
   * @memberof CardFromRequest
   */
  expiry?: string;
  /**
   * The last digits of the payment card.
   * @type {string}
   * @memberof CardFromRequest
   */
  last_digits?: string;
}
/**
 * The payment card to use to fund a payment. Can be a credit or debit card.<blockquote><strong>Note:</strong> Passing card number, cvv and expiry directly via the API requires <a href=\"https://www.pcisecuritystandards.org/pci_security/completing_self_assessment\"> PCI SAQ D compliance</a>. <br>*PayPal offers a mechanism by which you do not have to take on the <strong>PCI SAQ D</strong> burden by using hosted fields - refer to <a href=\"https://developer.paypal.com/docs/checkout/advanced/integrate/\">this Integration Guide</a>*.</blockquote>
 * @export
 * @interface CardRequest
 */
export interface CardRequest {
  /**
   * The identifier of the instrument.
   * @type {string}
   * @memberof CardRequest
   */
  id?: string;
  /**
   * The card holder\'s name as it appears on the card.
   * @type {string}
   * @memberof CardRequest
   */
  name?: string;
  /**
   * The primary account number (PAN) for the payment card.
   * @type {string}
   * @memberof CardRequest
   */
  number?: string;
  /**
   * The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @type {string}
   * @memberof CardRequest
   */
  expiry?: string;
  /**
   * The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`.
   * @type {string}
   * @memberof CardRequest
   */
  security_code?: string;
  /**
   * The last digits of the payment card.
   * @type {string}
   * @memberof CardRequest
   */
  last_digits?: string;
  /**
   *
   * @type {CardBrand}
   * @memberof CardRequest
   */
  card_type?: CardBrand;
  /**
   *
   * @type {CardType}
   * @memberof CardRequest
   */
  type?: CardType;
  /**
   *
   * @type {CardBrand}
   * @memberof CardRequest
   */
  brand?: CardBrand;
  /**
   *
   * @type {AddressPortable}
   * @memberof CardRequest
   */
  billing_address?: AddressPortable;
  /**
   *
   * @type {CardAttributes}
   * @memberof CardRequest
   */
  attributes?: CardAttributes;
  /**
   * The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant\'s server so the saved payment source can be used for future transactions.
   * @type {string}
   * @memberof CardRequest
   */
  vault_id?: string;
  /**
   *
   * @type {CardStoredCredential}
   * @memberof CardRequest
   */
  stored_credential?: CardStoredCredential;
  /**
   *
   * @type {NetworkTokenRequest}
   * @memberof CardRequest
   */
  network_token?: NetworkTokenRequest;
  /**
   *
   * @type {CardExperienceContext}
   * @memberof CardRequest
   */
  experience_context?: CardExperienceContext;
}

/**
 *
 * @export
 * @interface CardRequestAllOf
 */
export interface CardRequestAllOf {
  /**
   * The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant\'s server so the saved payment source can be used for future transactions.
   * @type {string}
   * @memberof CardRequestAllOf
   */
  vault_id?: string;
  /**
   *
   * @type {CardStoredCredential}
   * @memberof CardRequestAllOf
   */
  stored_credential?: CardStoredCredential;
  /**
   *
   * @type {NetworkTokenRequest}
   * @memberof CardRequestAllOf
   */
  network_token?: NetworkTokenRequest;
  /**
   *
   * @type {CardExperienceContext}
   * @memberof CardRequestAllOf
   */
  experience_context?: CardExperienceContext;
}
/**
 * The payment card to use to fund a payment. Card can be a credit or debit card.
 * @export
 * @interface CardResponse
 */
export interface CardResponse {
  /**
   * The card holder\'s name as it appears on the card.
   * @type {string}
   * @memberof CardResponse
   */
  name?: string;
  /**
   * The last digits of the payment card.
   * @type {string}
   * @memberof CardResponse
   */
  last_digits?: string;
  /**
   *
   * @type {CardBrand}
   * @memberof CardResponse
   */
  brand?: CardBrand;
  /**
   * Array of brands or networks associated with the card.
   * @type {Array<CardBrand>}
   * @memberof CardResponse
   */
  available_networks?: Array<CardBrand>;
  /**
   * The payment card type.
   * @type {string}
   * @memberof CardResponse
   */
  type?: CardResponseTypeEnum;
  /**
   *
   * @type {AuthenticationResponse}
   * @memberof CardResponse
   */
  authentication_result?: AuthenticationResponse;
  /**
   *
   * @type {CardAttributesResponse}
   * @memberof CardResponse
   */
  attributes?: CardAttributesResponse;
  /**
   *
   * @type {CardFromRequest}
   * @memberof CardResponse
   */
  from_request?: CardFromRequest;
  /**
   * The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @type {string}
   * @memberof CardResponse
   */
  expiry?: string;
  /**
   *
   * @type {BinDetails}
   * @memberof CardResponse
   */
  bin_details?: BinDetails;
}

export const CardResponseTypeEnum = {
  Credit: 'CREDIT',
  Debit: 'DEBIT',
  Prepaid: 'PREPAID',
  Unknown: 'UNKNOWN',
} as const;

export type CardResponseTypeEnum =
  (typeof CardResponseTypeEnum)[keyof typeof CardResponseTypeEnum];

/**
 * Provides additional details to process a payment using a `card` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/><ul><li>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`.</li><li>Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request.</li></ul>
 * @export
 * @interface CardStoredCredential
 */
export interface CardStoredCredential {
  /**
   *
   * @type {PaymentInitiator}
   * @memberof CardStoredCredential
   */
  payment_initiator: PaymentInitiator;
  /**
   *
   * @type {StoredPaymentSourcePaymentType}
   * @memberof CardStoredCredential
   */
  payment_type: StoredPaymentSourcePaymentType;
  /**
   *
   * @type {StoredPaymentSourceUsageType}
   * @memberof CardStoredCredential
   */
  usage?: StoredPaymentSourceUsageType;
  /**
   *
   * @type {NetworkTransactionReference}
   * @memberof CardStoredCredential
   */
  previous_network_transaction_reference?: NetworkTransactionReference;
}

/**
 * Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.
 * @export
 * @interface CardSupplementaryData
 */
export interface CardSupplementaryData {
  /**
   *
   * @type {Level2CardProcessingData}
   * @memberof CardSupplementaryData
   */
  level_2?: Level2CardProcessingData;
  /**
   *
   * @type {Level3CardProcessingData}
   * @memberof CardSupplementaryData
   */
  level_3?: Level3CardProcessingData;
}
/**
 * Type of card. i.e Credit, Debit and so on.
 * @export
 * @enum {string}
 */

export const CardType = {
  Credit: 'CREDIT',
  Debit: 'DEBIT',
  Prepaid: 'PREPAID',
  Store: 'STORE',
  Unknown: 'UNKNOWN',
} as const;

export type CardType = (typeof CardType)[keyof typeof CardType];

/**
 * The intent to either capture payment immediately or authorize a payment for an order after order creation.
 * @export
 * @enum {string}
 */

export const CheckoutPaymentIntent = {
  Capture: 'CAPTURE',
  Authorize: 'AUTHORIZE',
} as const;

export type CheckoutPaymentIntent =
  (typeof CheckoutPaymentIntent)[keyof typeof CheckoutPaymentIntent];

/**
 * Details about the merchant cobranded card used for order purchase.
 * @export
 * @interface CobrandedCard
 */
export interface CobrandedCard {
  /**
   * Array of labels for the cobranded card.
   * @type {Array<string>}
   * @memberof CobrandedCard
   */
  labels?: Array<string>;
  /**
   *
   * @type {PayeeBase}
   * @memberof CobrandedCard
   */
  payee?: PayeeBase;
  /**
   *
   * @type {Money}
   * @memberof CobrandedCard
   */
  amount?: Money;
}
/**
 * Payer confirms the intent to pay for the Order using the provided payment source.
 * @export
 * @interface ConfirmOrderRequest
 */
export interface ConfirmOrderRequest {
  /**
   *
   * @type {PaymentSource}
   * @memberof ConfirmOrderRequest
   */
  payment_source: PaymentSource;
  /**
   *
   * @type {ProcessingInstruction}
   * @memberof ConfirmOrderRequest
   */
  processing_instruction?: ProcessingInstruction;
  /**
   *
   * @type {OrderConfirmApplicationContext}
   * @memberof ConfirmOrderRequest
   */
  application_context?: OrderConfirmApplicationContext;
}

/**
 * The details about a customer in PayPal\'s system of record.
 * @export
 * @interface Customer
 */
export interface Customer {
  /**
   * The unique ID for a customer generated by PayPal.
   * @type {string}
   * @memberof Customer
   */
  id?: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof Customer
   */
  email_address?: string;
  /**
   *
   * @type {PhoneWithType}
   * @memberof Customer
   */
  phone?: PhoneWithType;
}
/**
 *
 * @export
 * @interface DECIMALPRECISION
 */
export interface DECIMALPRECISION {
  /**
   *
   * @type {string}
   * @memberof DECIMALPRECISION
   */
  issue?: DECIMALPRECISIONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof DECIMALPRECISION
   */
  description?: DECIMALPRECISIONDescriptionEnum;
}

export const DECIMALPRECISIONIssueEnum = {
  DecimalPrecision: 'DECIMAL_PRECISION',
} as const;

export type DECIMALPRECISIONIssueEnum =
  (typeof DECIMALPRECISIONIssueEnum)[keyof typeof DECIMALPRECISIONIssueEnum];
export const DECIMALPRECISIONDescriptionEnum = {
  IfTheCurrencySupportsDecimalsOnlyTwoDecimalPlacePrecisionIsSupported:
    'If the currency supports decimals, only two decimal place precision is supported.',
} as const;

export type DECIMALPRECISIONDescriptionEnum =
  (typeof DECIMALPRECISIONDescriptionEnum)[keyof typeof DECIMALPRECISIONDescriptionEnum];

/**
 *
 * @export
 * @interface DECLINEDDUETORELATEDTXN
 */
export interface DECLINEDDUETORELATEDTXN {
  /**
   *
   * @type {string}
   * @memberof DECLINEDDUETORELATEDTXN
   */
  issue?: DECLINEDDUETORELATEDTXNIssueEnum;
  /**
   *
   * @type {string}
   * @memberof DECLINEDDUETORELATEDTXN
   */
  description?: DECLINEDDUETORELATEDTXNDescriptionEnum;
}

export const DECLINEDDUETORELATEDTXNIssueEnum = {
  DeclinedDueToRelatedTxn: 'DECLINED_DUE_TO_RELATED_TXN',
} as const;

export type DECLINEDDUETORELATEDTXNIssueEnum =
  (typeof DECLINEDDUETORELATEDTXNIssueEnum)[keyof typeof DECLINEDDUETORELATEDTXNIssueEnum];
export const DECLINEDDUETORELATEDTXNDescriptionEnum = {
  OneOrMoreTransactionsInThisOrderDidNotSucceedSinceThisOrderIsBeingProcessedAsAnAllOrNoneOrderIfOneOrMoreTransactionsInThisOrderDoNotSucceedThenAllPurchaseUnitsAreMarkedDeclinedAndWillNotBeProcessed:
    'One or more transactions in this Order did not succeed. Since this Order is being processed as an All or None Order, if one or more transactions in this Order do not succeed, then all purchase units are marked declined and will not be processed.',
} as const;

export type DECLINEDDUETORELATEDTXNDescriptionEnum =
  (typeof DECLINEDDUETORELATEDTXNDescriptionEnum)[keyof typeof DECLINEDDUETORELATEDTXNDescriptionEnum];

/**
 *
 * @export
 * @interface DEVICEDATANOTAVAILABLE
 */
export interface DEVICEDATANOTAVAILABLE {
  /**
   *
   * @type {string}
   * @memberof DEVICEDATANOTAVAILABLE
   */
  issue?: DEVICEDATANOTAVAILABLEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof DEVICEDATANOTAVAILABLE
   */
  description?: DEVICEDATANOTAVAILABLEDescriptionEnum;
}

export const DEVICEDATANOTAVAILABLEIssueEnum = {
  DeviceDataNotAvailable: 'DEVICE_DATA_NOT_AVAILABLE',
} as const;

export type DEVICEDATANOTAVAILABLEIssueEnum =
  (typeof DEVICEDATANOTAVAILABLEIssueEnum)[keyof typeof DEVICEDATANOTAVAILABLEIssueEnum];
export const DEVICEDATANOTAVAILABLEDescriptionEnum = {
  DeviceDataIsNotAvailableForProcessingThisOrderThePayPalClientMetadataIdHeaderValueSentDuringCreateOrderApiCallIsEitherMissingOrIncorrectOrThereWasAnErrorInCollectingRequiredDataPleaseVerifyIfAppropriateValueForPayPalClientMetadataIdHeaderIsBeingSentDuringCreateOrderApiCallPleaseNoteThisErrorOnlyAppliesToPaymentSourcePayUponInvoiceAtTheMoment:
    "Device Data is not available for processing this order. The PayPal-Client-Metadata-Id header value sent during `Create Order` api call is either missing or incorrect or there was an error in collecting required data. Please verify if appropriate value for PayPal-Client-Metadata-Id header is being sent during 'Create Order' api call. Please note this error only applies to payment_source.pay_upon_invoice at the moment.",
} as const;

export type DEVICEDATANOTAVAILABLEDescriptionEnum =
  (typeof DEVICEDATANOTAVAILABLEDescriptionEnum)[keyof typeof DEVICEDATANOTAVAILABLEDescriptionEnum];

/**
 *
 * @export
 * @interface DOMESTICTRANSACTIONREQUIRED
 */
export interface DOMESTICTRANSACTIONREQUIRED {
  /**
   *
   * @type {string}
   * @memberof DOMESTICTRANSACTIONREQUIRED
   */
  issue?: DOMESTICTRANSACTIONREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof DOMESTICTRANSACTIONREQUIRED
   */
  description?: DOMESTICTRANSACTIONREQUIREDDescriptionEnum;
}

export const DOMESTICTRANSACTIONREQUIREDIssueEnum = {
  DomesticTransactionRequired: 'DOMESTIC_TRANSACTION_REQUIRED',
} as const;

export type DOMESTICTRANSACTIONREQUIREDIssueEnum =
  (typeof DOMESTICTRANSACTIONREQUIREDIssueEnum)[keyof typeof DOMESTICTRANSACTIONREQUIREDIssueEnum];
export const DOMESTICTRANSACTIONREQUIREDDescriptionEnum = {
  ThisTransactionRequiresThePayeeAndPayerToBeResidentInTheSameCountryADomesticTransactionIsRequiredToCreateThisPayment:
    'This transaction requires the payee and payer to be resident in the same country, a domestic transaction is required to create this payment.',
} as const;

export type DOMESTICTRANSACTIONREQUIREDDescriptionEnum =
  (typeof DOMESTICTRANSACTIONREQUIREDDescriptionEnum)[keyof typeof DOMESTICTRANSACTIONREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface DONATIONITEMSNOTSUPPORTED
 */
export interface DONATIONITEMSNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof DONATIONITEMSNOTSUPPORTED
   */
  issue?: DONATIONITEMSNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof DONATIONITEMSNOTSUPPORTED
   */
  description?: DONATIONITEMSNOTSUPPORTEDDescriptionEnum;
}

export const DONATIONITEMSNOTSUPPORTEDIssueEnum = {
  DonationItemsNotSupported: 'DONATION_ITEMS_NOT_SUPPORTED',
} as const;

export type DONATIONITEMSNOTSUPPORTEDIssueEnum =
  (typeof DONATIONITEMSNOTSUPPORTEDIssueEnum)[keyof typeof DONATIONITEMSNOTSUPPORTEDIssueEnum];
export const DONATIONITEMSNOTSUPPORTEDDescriptionEnum = {
  IfPurchaseUnitHasDonationAsTheItemsCategoryThenTheOrderCanAtMostHaveOnePurchaseUnitMultiplePurchaseUnitsAreNotSupportedIfEitherOfThemHaveAtLeastOneItemsWithCategoryAsDonation:
    'If \'purchase_unit\' has "DONATION" as the \'items.category\' then the Order can at most have one purchase_unit. Multiple purchase_units are not supported if either of them have at least one items with category as "DONATION".',
} as const;

export type DONATIONITEMSNOTSUPPORTEDDescriptionEnum =
  (typeof DONATIONITEMSNOTSUPPORTEDDescriptionEnum)[keyof typeof DONATIONITEMSNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface DUPLICATEINVOICEID
 */
export interface DUPLICATEINVOICEID {
  /**
   *
   * @type {string}
   * @memberof DUPLICATEINVOICEID
   */
  issue?: DUPLICATEINVOICEIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof DUPLICATEINVOICEID
   */
  description?: DUPLICATEINVOICEIDDescriptionEnum;
}

export const DUPLICATEINVOICEIDIssueEnum = {
  DuplicateInvoiceId: 'DUPLICATE_INVOICE_ID',
} as const;

export type DUPLICATEINVOICEIDIssueEnum =
  (typeof DUPLICATEINVOICEIDIssueEnum)[keyof typeof DUPLICATEINVOICEIDIssueEnum];
export const DUPLICATEINVOICEIDDescriptionEnum = {
  DuplicateInvoiceIdDetectedToAvoidAPotentialDuplicateTransactionYourAccountSettingRequiresThatInvoiceIdBeUniqueForEachTransaction:
    'Duplicate Invoice ID detected. To avoid a potential duplicate transaction your account setting requires that Invoice Id be unique for each transaction.',
} as const;

export type DUPLICATEINVOICEIDDescriptionEnum =
  (typeof DUPLICATEINVOICEIDDescriptionEnum)[keyof typeof DUPLICATEINVOICEIDDescriptionEnum];

/**
 *
 * @export
 * @interface DUPLICATEREFERENCEID
 */
export interface DUPLICATEREFERENCEID {
  /**
   *
   * @type {string}
   * @memberof DUPLICATEREFERENCEID
   */
  issue?: DUPLICATEREFERENCEIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof DUPLICATEREFERENCEID
   */
  description?: DUPLICATEREFERENCEIDDescriptionEnum;
}

export const DUPLICATEREFERENCEIDIssueEnum = {
  DuplicateReferenceId: 'DUPLICATE_REFERENCE_ID',
} as const;

export type DUPLICATEREFERENCEIDIssueEnum =
  (typeof DUPLICATEREFERENCEIDIssueEnum)[keyof typeof DUPLICATEREFERENCEIDIssueEnum];
export const DUPLICATEREFERENCEIDDescriptionEnum = {
  ReferenceIdMustBeUniqueIfMultiplePurchaseUnitAreProvided:
    '`reference_id` must be unique if multiple `purchase_unit` are provided.',
} as const;

export type DUPLICATEREFERENCEIDDescriptionEnum =
  (typeof DUPLICATEREFERENCEIDDescriptionEnum)[keyof typeof DUPLICATEREFERENCEIDDescriptionEnum];

/**
 * The funds that are held on behalf of the merchant.
 * @export
 * @enum {string}
 */

export const DisbursementMode = {
  Instant: 'INSTANT',
  Delayed: 'DELAYED',
} as const;

export type DisbursementMode =
  (typeof DisbursementMode)[keyof typeof DisbursementMode];

/**
 *
 * @export
 * @interface EMVDATAREQUIRED
 */
export interface EMVDATAREQUIRED {
  /**
   *
   * @type {string}
   * @memberof EMVDATAREQUIRED
   */
  issue?: EMVDATAREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof EMVDATAREQUIRED
   */
  description?: EMVDATAREQUIREDDescriptionEnum;
}

export const EMVDATAREQUIREDIssueEnum = {
  EmvDataRequired: 'EMV_DATA_REQUIRED',
} as const;

export type EMVDATAREQUIREDIssueEnum =
  (typeof EMVDATAREQUIREDIssueEnum)[keyof typeof EMVDATAREQUIREDIssueEnum];
export const EMVDATAREQUIREDDescriptionEnum = {
  EmvDataIsRequiredIfAuthenticationMethodIsEmv:
    'EMV Data is required if authentication method is EMV.',
} as const;

export type EMVDATAREQUIREDDescriptionEnum =
  (typeof EMVDATAREQUIREDDescriptionEnum)[keyof typeof EMVDATAREQUIREDDescriptionEnum];

/**
 * Electronic Commerce Indicator (ECI). The ECI value is part of the 2 data elements that indicate the transaction was processed electronically. This should be passed on the authorization transaction to the Gateway/Processor.
 * @export
 * @enum {string}
 */

export const EciFlag = {
  MastercardNon3DSecureTransaction: 'MASTERCARD_NON_3D_SECURE_TRANSACTION',
  MastercardAttemptedAuthenticationTransaction:
    'MASTERCARD_ATTEMPTED_AUTHENTICATION_TRANSACTION',
  MastercardFullyAuthenticatedTransaction:
    'MASTERCARD_FULLY_AUTHENTICATED_TRANSACTION',
  FullyAuthenticatedTransaction: 'FULLY_AUTHENTICATED_TRANSACTION',
  AttemptedAuthenticationTransaction: 'ATTEMPTED_AUTHENTICATION_TRANSACTION',
  Non3DSecureTransaction: 'NON_3D_SECURE_TRANSACTION',
} as const;

export type EciFlag = (typeof EciFlag)[keyof typeof EciFlag];

/**
 * Status of Authentication eligibility.
 * @export
 * @enum {string}
 */

export const Enrolled = {
  Y: 'Y',
  N: 'N',
  U: 'U',
  B: 'B',
} as const;

export type Enrolled = (typeof Enrolled)[keyof typeof Enrolled];

/**
 * Information used to pay using eps.
 * @export
 * @interface Eps
 */
export interface Eps {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Eps
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Eps
   */
  country_code?: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof Eps
   */
  bic?: string;
}
/**
 * Information needed to pay using eps.
 * @export
 * @interface EpsRequest
 */
export interface EpsRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof EpsRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof EpsRequest
   */
  country_code: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof EpsRequest
   */
  experience_context?: ExperienceContextBase;
}
/**
 * Request is not well-formed, syntactically incorrect, or violates schema.
 * @export
 * @interface Error400
 */
export interface Error400 {
  /**
   *
   * @type {string}
   * @memberof Error400
   */
  name?: Error400NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error400
   */
  message?: Error400MessageEnum;
  /**
   *
   * @type {Array<ErrorDetails>}
   * @memberof Error400
   */
  details?: Array<ErrorDetails>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error400
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error400
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error400NameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type Error400NameEnum =
  (typeof Error400NameEnum)[keyof typeof Error400NameEnum];
export const Error400MessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type Error400MessageEnum =
  (typeof Error400MessageEnum)[keyof typeof Error400MessageEnum];

/**
 * Authentication failed due to missing Authorization header, or invalid authentication credentials.
 * @export
 * @interface Error401
 */
export interface Error401 {
  /**
   *
   * @type {string}
   * @memberof Error401
   */
  name?: Error401NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error401
   */
  message?: Error401MessageEnum;
  /**
   *
   * @type {Array<ErrorDetails>}
   * @memberof Error401
   */
  details?: Array<ErrorDetails>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error401
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error401
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error401NameEnum = {
  AuthenticationFailure: 'AUTHENTICATION_FAILURE',
} as const;

export type Error401NameEnum =
  (typeof Error401NameEnum)[keyof typeof Error401NameEnum];
export const Error401MessageEnum = {
  AuthenticationFailedDueToMissingAuthorizationHeaderOrInvalidAuthenticationCredentials:
    'Authentication failed due to missing authorization header, or invalid authentication credentials.',
} as const;

export type Error401MessageEnum =
  (typeof Error401MessageEnum)[keyof typeof Error401MessageEnum];

/**
 * The client is not authorized to access this resource, although it may have valid credentials.
 * @export
 * @interface Error403
 */
export interface Error403 {
  /**
   *
   * @type {string}
   * @memberof Error403
   */
  name?: Error403NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error403
   */
  message?: Error403MessageEnum;
  /**
   *
   * @type {Array<ErrorDetails>}
   * @memberof Error403
   */
  details?: Array<ErrorDetails>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error403
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error403
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error403NameEnum = {
  NotAuthorized: 'NOT_AUTHORIZED',
} as const;

export type Error403NameEnum =
  (typeof Error403NameEnum)[keyof typeof Error403NameEnum];
export const Error403MessageEnum = {
  AuthorizationFailedDueToInsufficientPermissions:
    'Authorization failed due to insufficient permissions.',
} as const;

export type Error403MessageEnum =
  (typeof Error403MessageEnum)[keyof typeof Error403MessageEnum];

/**
 * The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
 * @export
 * @interface Error404
 */
export interface Error404 {
  /**
   *
   * @type {string}
   * @memberof Error404
   */
  name?: Error404NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error404
   */
  message?: Error404MessageEnum;
  /**
   *
   * @type {Array<ErrorDetails>}
   * @memberof Error404
   */
  details?: Array<ErrorDetails>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error404
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error404
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error404NameEnum = {
  ResourceNotFound: 'RESOURCE_NOT_FOUND',
} as const;

export type Error404NameEnum =
  (typeof Error404NameEnum)[keyof typeof Error404NameEnum];
export const Error404MessageEnum = {
  TheSpecifiedResourceDoesNotExist: 'The specified resource does not exist.',
} as const;

export type Error404MessageEnum =
  (typeof Error404MessageEnum)[keyof typeof Error404MessageEnum];

/**
 * The server has detected a conflict while processing this request.
 * @export
 * @interface Error409
 */
export interface Error409 {
  /**
   *
   * @type {string}
   * @memberof Error409
   */
  name?: Error409NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error409
   */
  message?: Error409MessageEnum;
  /**
   *
   * @type {Array<ErrorDetails>}
   * @memberof Error409
   */
  details?: Array<ErrorDetails>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error409
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error409
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error409NameEnum = {
  ResourceConflict: 'RESOURCE_CONFLICT',
} as const;

export type Error409NameEnum =
  (typeof Error409NameEnum)[keyof typeof Error409NameEnum];
export const Error409MessageEnum = {
  TheServerHasDetectedAConflictWhileProcessingThisRequest:
    'The server has detected a conflict while processing this request.',
} as const;

export type Error409MessageEnum =
  (typeof Error409MessageEnum)[keyof typeof Error409MessageEnum];

/**
 * The server does not support the request payload\'s media type.
 * @export
 * @interface Error415
 */
export interface Error415 {
  /**
   *
   * @type {string}
   * @memberof Error415
   */
  name?: Error415NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error415
   */
  message?: Error415MessageEnum;
  /**
   *
   * @type {Array<ErrorDetails>}
   * @memberof Error415
   */
  details?: Array<ErrorDetails>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error415
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error415
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error415NameEnum = {
  UnsupportedMediaType: 'UNSUPPORTED_MEDIA_TYPE',
} as const;

export type Error415NameEnum =
  (typeof Error415NameEnum)[keyof typeof Error415NameEnum];
export const Error415MessageEnum = {
  TheServerDoesNotSupportTheRequestPayloadsMediaType:
    "The server does not support the request payload's media type.",
} as const;

export type Error415MessageEnum =
  (typeof Error415MessageEnum)[keyof typeof Error415MessageEnum];

/**
 * The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
 * @export
 * @interface Error422
 */
export interface Error422 {
  /**
   *
   * @type {string}
   * @memberof Error422
   */
  name?: Error422NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error422
   */
  message?: Error422MessageEnum;
  /**
   *
   * @type {Array<ErrorDetails>}
   * @memberof Error422
   */
  details?: Array<ErrorDetails>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error422
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error422
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error422NameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type Error422NameEnum =
  (typeof Error422NameEnum)[keyof typeof Error422NameEnum];
export const Error422MessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type Error422MessageEnum =
  (typeof Error422MessageEnum)[keyof typeof Error422MessageEnum];

/**
 * This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
 * @export
 * @interface Error500
 */
export interface Error500 {
  /**
   *
   * @type {string}
   * @memberof Error500
   */
  name?: Error500NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error500
   */
  message?: Error500MessageEnum;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error500
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error500
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error500NameEnum = {
  InternalServerError: 'INTERNAL_SERVER_ERROR',
} as const;

export type Error500NameEnum =
  (typeof Error500NameEnum)[keyof typeof Error500NameEnum];
export const Error500MessageEnum = {
  AnInternalServerErrorOccurred: 'An internal server error occurred.',
} as const;

export type Error500MessageEnum =
  (typeof Error500MessageEnum)[keyof typeof Error500MessageEnum];

/**
 * The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
 * @export
 * @interface Error503
 */
export interface Error503 {
  /**
   *
   * @type {string}
   * @memberof Error503
   */
  name?: Error503NameEnum;
  /**
   *
   * @type {string}
   * @memberof Error503
   */
  message?: Error503MessageEnum;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof Error503
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof Error503
   */
  links?: Array<ErrorLinkDescription>;
}

export const Error503NameEnum = {
  ServiceUnavailable: 'SERVICE_UNAVAILABLE',
} as const;

export type Error503NameEnum =
  (typeof Error503NameEnum)[keyof typeof Error503NameEnum];
export const Error503MessageEnum = {
  ServiceUnavailable: 'Service Unavailable.',
} as const;

export type Error503MessageEnum =
  (typeof Error503MessageEnum)[keyof typeof Error503MessageEnum];

/**
 * @type ErrorDefault
 * The default error response.
 * @export
 */
export type ErrorDefault =
  | Error400
  | Error401
  | Error403
  | Error404
  | Error409
  | Error415
  | Error422
  | Error500
  | Error503;

/**
 * The error details. Required for client-side `4XX` errors.
 * @export
 * @interface ErrorDetails
 */
export interface ErrorDetails {
  /**
   * The field that caused the error. If this field is in the body, set this value to the field\'s JSON pointer value. Required for client-side errors.
   * @type {string}
   * @memberof ErrorDetails
   */
  field?: string;
  /**
   * The value of the field that caused the error.
   * @type {string}
   * @memberof ErrorDetails
   */
  value?: string;
  /**
   *
   * @type {ErrorLocation}
   * @memberof ErrorDetails
   */
  location?: ErrorLocation;
  /**
   * The unique, fine-grained application-level error code.
   * @type {string}
   * @memberof ErrorDetails
   */
  issue: string;
  /**
   * The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value.
   * @type {string}
   * @memberof ErrorDetails
   */
  description?: string;
}

/**
 * The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
 * @export
 * @interface ErrorLinkDescription
 */
export interface ErrorLinkDescription {
  /**
   * The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.
   * @type {string}
   * @memberof ErrorLinkDescription
   */
  href: string;
  /**
   * The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).
   * @type {string}
   * @memberof ErrorLinkDescription
   */
  rel: string;
  /**
   * The HTTP method required to make the related call.
   * @type {string}
   * @memberof ErrorLinkDescription
   */
  method?: ErrorLinkDescriptionMethodEnum;
}

export const ErrorLinkDescriptionMethodEnum = {
  Get: 'GET',
  Post: 'POST',
  Put: 'PUT',
  Delete: 'DELETE',
  Patch: 'PATCH',
} as const;

export type ErrorLinkDescriptionMethodEnum =
  (typeof ErrorLinkDescriptionMethodEnum)[keyof typeof ErrorLinkDescriptionMethodEnum];

/**
 * The location of the field that caused the error. Value is `body`, `path`, or `query`.
 * @export
 * @enum {string}
 */

export const ErrorLocation = {
  Body: 'body',
  Path: 'path',
  Query: 'query',
} as const;

export type ErrorLocation = (typeof ErrorLocation)[keyof typeof ErrorLocation];

/**
 * The exchange rate that determines the amount to convert from one currency to another currency.
 * @export
 * @interface ExchangeRate
 */
export interface ExchangeRate {
  /**
   * The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
   * @type {string}
   * @memberof ExchangeRate
   */
  source_currency?: string;
  /**
   * The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
   * @type {string}
   * @memberof ExchangeRate
   */
  target_currency?: string;
  /**
   * The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point.
   * @type {string}
   * @memberof ExchangeRate
   */
  value?: string;
}
/**
 * Customizes the payer experience during the approval process for the payment.
 * @export
 * @interface ExperienceContextBase
 */
export interface ExperienceContextBase {
  /**
   * The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof ExperienceContextBase
   */
  brand_name?: string;
  /**
   * The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).
   * @type {string}
   * @memberof ExperienceContextBase
   */
  locale?: string;
  /**
   * The location from which the shipping address is derived.
   * @type {string}
   * @memberof ExperienceContextBase
   */
  shipping_preference?: ExperienceContextBaseShippingPreferenceEnum;
  /**
   * Describes the URL.
   * @type {string}
   * @memberof ExperienceContextBase
   */
  return_url?: string;
  /**
   * Describes the URL.
   * @type {string}
   * @memberof ExperienceContextBase
   */
  cancel_url?: string;
}

export const ExperienceContextBaseShippingPreferenceEnum = {
  GetFromFile: 'GET_FROM_FILE',
  NoShipping: 'NO_SHIPPING',
  SetProvidedAddress: 'SET_PROVIDED_ADDRESS',
} as const;

export type ExperienceContextBaseShippingPreferenceEnum =
  (typeof ExperienceContextBaseShippingPreferenceEnum)[keyof typeof ExperienceContextBaseShippingPreferenceEnum];

/**
 *
 * @export
 * @interface FIELDNOTPATCHABLE
 */
export interface FIELDNOTPATCHABLE {
  /**
   *
   * @type {string}
   * @memberof FIELDNOTPATCHABLE
   */
  issue?: FIELDNOTPATCHABLEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof FIELDNOTPATCHABLE
   */
  description?: FIELDNOTPATCHABLEDescriptionEnum;
}

export const FIELDNOTPATCHABLEIssueEnum = {
  FieldNotPatchable: 'FIELD_NOT_PATCHABLE',
} as const;

export type FIELDNOTPATCHABLEIssueEnum =
  (typeof FIELDNOTPATCHABLEIssueEnum)[keyof typeof FIELDNOTPATCHABLEIssueEnum];
export const FIELDNOTPATCHABLEDescriptionEnum = {
  FieldCannotBePatched: 'Field cannot be patched.',
} as const;

export type FIELDNOTPATCHABLEDescriptionEnum =
  (typeof FIELDNOTPATCHABLEDescriptionEnum)[keyof typeof FIELDNOTPATCHABLEDescriptionEnum];

/**
 *
 * @export
 * @interface GOOGLEPAYGATEWAYMERCHANTIDMISMATCH
 */
export interface GOOGLEPAYGATEWAYMERCHANTIDMISMATCH {
  /**
   *
   * @type {string}
   * @memberof GOOGLEPAYGATEWAYMERCHANTIDMISMATCH
   */
  issue?: GOOGLEPAYGATEWAYMERCHANTIDMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof GOOGLEPAYGATEWAYMERCHANTIDMISMATCH
   */
  description?: GOOGLEPAYGATEWAYMERCHANTIDMISMATCHDescriptionEnum;
}

export const GOOGLEPAYGATEWAYMERCHANTIDMISMATCHIssueEnum = {
  GooglePayGatewayMerchantIdMismatch: 'GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH',
} as const;

export type GOOGLEPAYGATEWAYMERCHANTIDMISMATCHIssueEnum =
  (typeof GOOGLEPAYGATEWAYMERCHANTIDMISMATCHIssueEnum)[keyof typeof GOOGLEPAYGATEWAYMERCHANTIDMISMATCHIssueEnum];
export const GOOGLEPAYGATEWAYMERCHANTIDMISMATCHDescriptionEnum = {
  TheGatewayMerchantIdInGooglePayTokenIsNotValidThisCouldBeBecauseTheGatewayMerchantIdThatWasAuthorizedByPayerBuyerOnGooglePayDoesNotMatchWithTheApiCallerOfTheOrder:
    'The gateway merchant ID in Google Pay token is not valid. This could be because the gateway merchant Id that was authorized by payer/buyer on Google Pay does not match with the API caller of the order.',
} as const;

export type GOOGLEPAYGATEWAYMERCHANTIDMISMATCHDescriptionEnum =
  (typeof GOOGLEPAYGATEWAYMERCHANTIDMISMATCHDescriptionEnum)[keyof typeof GOOGLEPAYGATEWAYMERCHANTIDMISMATCHDescriptionEnum];

/**
 * Information needed to pay using giropay.
 * @export
 * @interface Giropay
 */
export interface Giropay {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Giropay
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Giropay
   */
  country_code?: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof Giropay
   */
  bic?: string;
}
/**
 * Information needed to pay using giropay.
 * @export
 * @interface GiropayRequest
 */
export interface GiropayRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof GiropayRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof GiropayRequest
   */
  country_code: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof GiropayRequest
   */
  experience_context?: ExperienceContextBase;
}
/**
 *
 * @export
 * @interface IBANCOUNTRYNOTSUPPORTED
 */
export interface IBANCOUNTRYNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof IBANCOUNTRYNOTSUPPORTED
   */
  issue?: IBANCOUNTRYNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof IBANCOUNTRYNOTSUPPORTED
   */
  description?: IBANCOUNTRYNOTSUPPORTEDDescriptionEnum;
}

export const IBANCOUNTRYNOTSUPPORTEDIssueEnum = {
  IbanCountryNotSupported: 'IBAN_COUNTRY_NOT_SUPPORTED',
} as const;

export type IBANCOUNTRYNOTSUPPORTEDIssueEnum =
  (typeof IBANCOUNTRYNOTSUPPORTEDIssueEnum)[keyof typeof IBANCOUNTRYNOTSUPPORTEDIssueEnum];
export const IBANCOUNTRYNOTSUPPORTEDDescriptionEnum = {
  CountryCodeOfIssuerBankForTheProvidedIbanIsNotSupportedForSepaDebitPayments:
    'Country code of issuer bank for the provided IBAN is not supported for SEPA debit payments.',
} as const;

export type IBANCOUNTRYNOTSUPPORTEDDescriptionEnum =
  (typeof IBANCOUNTRYNOTSUPPORTEDDescriptionEnum)[keyof typeof IBANCOUNTRYNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface IDENTIFIERNOTFOUND
 */
export interface IDENTIFIERNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof IDENTIFIERNOTFOUND
   */
  issue?: IDENTIFIERNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof IDENTIFIERNOTFOUND
   */
  description?: IDENTIFIERNOTFOUNDDescriptionEnum;
}

export const IDENTIFIERNOTFOUNDIssueEnum = {
  IdentifierNotFound: 'IDENTIFIER_NOT_FOUND',
} as const;

export type IDENTIFIERNOTFOUNDIssueEnum =
  (typeof IDENTIFIERNOTFOUNDIssueEnum)[keyof typeof IDENTIFIERNOTFOUNDIssueEnum];
export const IDENTIFIERNOTFOUNDDescriptionEnum = {
  SpecifiedIdentifierWasNotFoundPleaseVerifyTheCorrectIdentifierWasUsedAndTryTheRequestAgain:
    'Specified identifier was not found. Please verify the correct identifier was used and try the request again.',
} as const;

export type IDENTIFIERNOTFOUNDDescriptionEnum =
  (typeof IDENTIFIERNOTFOUNDDescriptionEnum)[keyof typeof IDENTIFIERNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface INCOMPATIBLEPARAMETERVALUE
 */
export interface INCOMPATIBLEPARAMETERVALUE {
  /**
   *
   * @type {string}
   * @memberof INCOMPATIBLEPARAMETERVALUE
   */
  issue?: INCOMPATIBLEPARAMETERVALUEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INCOMPATIBLEPARAMETERVALUE
   */
  description?: INCOMPATIBLEPARAMETERVALUEDescriptionEnum;
}

export const INCOMPATIBLEPARAMETERVALUEIssueEnum = {
  IncompatibleParameterValue: 'INCOMPATIBLE_PARAMETER_VALUE',
} as const;

export type INCOMPATIBLEPARAMETERVALUEIssueEnum =
  (typeof INCOMPATIBLEPARAMETERVALUEIssueEnum)[keyof typeof INCOMPATIBLEPARAMETERVALUEIssueEnum];
export const INCOMPATIBLEPARAMETERVALUEDescriptionEnum = {
  TheValueOfTheFieldIsIncompatibleRedundantWithOtherFieldsInTheOrder:
    'The value of the field is incompatible/redundant with other fields in the order.',
} as const;

export type INCOMPATIBLEPARAMETERVALUEDescriptionEnum =
  (typeof INCOMPATIBLEPARAMETERVALUEDescriptionEnum)[keyof typeof INCOMPATIBLEPARAMETERVALUEDescriptionEnum];

/**
 *
 * @export
 * @interface INSTRUMENTDECLINED
 */
export interface INSTRUMENTDECLINED {
  /**
   *
   * @type {string}
   * @memberof INSTRUMENTDECLINED
   */
  issue?: INSTRUMENTDECLINEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INSTRUMENTDECLINED
   */
  description?: INSTRUMENTDECLINEDDescriptionEnum;
}

export const INSTRUMENTDECLINEDIssueEnum = {
  InstrumentDeclined: 'INSTRUMENT_DECLINED',
} as const;

export type INSTRUMENTDECLINEDIssueEnum =
  (typeof INSTRUMENTDECLINEDIssueEnum)[keyof typeof INSTRUMENTDECLINEDIssueEnum];
export const INSTRUMENTDECLINEDDescriptionEnum = {
  TheInstrumentPresentedWasEitherDeclinedByTheProcessorOrBankOrItCantBeUsedForThisPayment:
    "The instrument presented  was either declined by the processor or bank, or it can't be used for this payment.",
} as const;

export type INSTRUMENTDECLINEDDescriptionEnum =
  (typeof INSTRUMENTDECLINEDDescriptionEnum)[keyof typeof INSTRUMENTDECLINEDDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDACCOUNTSTATUS
 */
export interface INVALIDACCOUNTSTATUS {
  /**
   *
   * @type {string}
   * @memberof INVALIDACCOUNTSTATUS
   */
  issue?: INVALIDACCOUNTSTATUSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDACCOUNTSTATUS
   */
  description?: INVALIDACCOUNTSTATUSDescriptionEnum;
}

export const INVALIDACCOUNTSTATUSIssueEnum = {
  InvalidAccountStatus: 'INVALID_ACCOUNT_STATUS',
} as const;

export type INVALIDACCOUNTSTATUSIssueEnum =
  (typeof INVALIDACCOUNTSTATUSIssueEnum)[keyof typeof INVALIDACCOUNTSTATUSIssueEnum];
export const INVALIDACCOUNTSTATUSDescriptionEnum = {
  AccountValidationsFailedForTheUser:
    'Account validations failed for the user.',
} as const;

export type INVALIDACCOUNTSTATUSDescriptionEnum =
  (typeof INVALIDACCOUNTSTATUSDescriptionEnum)[keyof typeof INVALIDACCOUNTSTATUSDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDARRAYMAXITEMS
 */
export interface INVALIDARRAYMAXITEMS {
  /**
   *
   * @type {string}
   * @memberof INVALIDARRAYMAXITEMS
   */
  issue?: INVALIDARRAYMAXITEMSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDARRAYMAXITEMS
   */
  description?: INVALIDARRAYMAXITEMSDescriptionEnum;
}

export const INVALIDARRAYMAXITEMSIssueEnum = {
  InvalidArrayMaxItems: 'INVALID_ARRAY_MAX_ITEMS',
} as const;

export type INVALIDARRAYMAXITEMSIssueEnum =
  (typeof INVALIDARRAYMAXITEMSIssueEnum)[keyof typeof INVALIDARRAYMAXITEMSIssueEnum];
export const INVALIDARRAYMAXITEMSDescriptionEnum = {
  TheNumberOfItemsInAnArrayParameterIsTooLarge:
    'The number of items in an array parameter is too large.',
} as const;

export type INVALIDARRAYMAXITEMSDescriptionEnum =
  (typeof INVALIDARRAYMAXITEMSDescriptionEnum)[keyof typeof INVALIDARRAYMAXITEMSDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDARRAYMINITEMS
 */
export interface INVALIDARRAYMINITEMS {
  /**
   *
   * @type {string}
   * @memberof INVALIDARRAYMINITEMS
   */
  issue?: INVALIDARRAYMINITEMSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDARRAYMINITEMS
   */
  description?: INVALIDARRAYMINITEMSDescriptionEnum;
}

export const INVALIDARRAYMINITEMSIssueEnum = {
  InvalidArrayMinItems: 'INVALID_ARRAY_MIN_ITEMS',
} as const;

export type INVALIDARRAYMINITEMSIssueEnum =
  (typeof INVALIDARRAYMINITEMSIssueEnum)[keyof typeof INVALIDARRAYMINITEMSIssueEnum];
export const INVALIDARRAYMINITEMSDescriptionEnum = {
  TheNumberOfItemsInAnArrayParameterIsTooSmall:
    'The number of items in an array parameter is too small.',
} as const;

export type INVALIDARRAYMINITEMSDescriptionEnum =
  (typeof INVALIDARRAYMINITEMSDescriptionEnum)[keyof typeof INVALIDARRAYMINITEMSDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDCOUNTRYCODE
 */
export interface INVALIDCOUNTRYCODE {
  /**
   *
   * @type {string}
   * @memberof INVALIDCOUNTRYCODE
   */
  issue?: INVALIDCOUNTRYCODEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDCOUNTRYCODE
   */
  description?: INVALIDCOUNTRYCODEDescriptionEnum;
}

export const INVALIDCOUNTRYCODEIssueEnum = {
  InvalidCountryCode: 'INVALID_COUNTRY_CODE',
} as const;

export type INVALIDCOUNTRYCODEIssueEnum =
  (typeof INVALIDCOUNTRYCODEIssueEnum)[keyof typeof INVALIDCOUNTRYCODEIssueEnum];
export const INVALIDCOUNTRYCODEDescriptionEnum = {
  CountryCodeIsInvalidPleaseReferToHttpsDeveloperPaypalComApiRestReferenceCountryCodesForAListOfSupportedCountryCodes:
    'Country code is invalid. Please refer to https://developer.paypal.com/api/rest/reference/country-codes/ for a list of supported country codes.',
} as const;

export type INVALIDCOUNTRYCODEDescriptionEnum =
  (typeof INVALIDCOUNTRYCODEDescriptionEnum)[keyof typeof INVALIDCOUNTRYCODEDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDCURRENCYCODE
 */
export interface INVALIDCURRENCYCODE {
  /**
   *
   * @type {string}
   * @memberof INVALIDCURRENCYCODE
   */
  issue?: INVALIDCURRENCYCODEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDCURRENCYCODE
   */
  description?: INVALIDCURRENCYCODEDescriptionEnum;
}

export const INVALIDCURRENCYCODEIssueEnum = {
  InvalidCurrencyCode: 'INVALID_CURRENCY_CODE',
} as const;

export type INVALIDCURRENCYCODEIssueEnum =
  (typeof INVALIDCURRENCYCODEIssueEnum)[keyof typeof INVALIDCURRENCYCODEIssueEnum];
export const INVALIDCURRENCYCODEDescriptionEnum = {
  CurrencyCodeIsInvalidOrIsNotCurrentlySupportedPleaseReferHttpsDeveloperPaypalComApiRestReferenceCurrencyCodesForListOfSupportedCurrencyCodes:
    'Currency code is invalid or is not currently supported. Please refer https://developer.paypal.com/api/rest/reference/currency-codes/ for list of supported currency codes.',
} as const;

export type INVALIDCURRENCYCODEDescriptionEnum =
  (typeof INVALIDCURRENCYCODEDescriptionEnum)[keyof typeof INVALIDCURRENCYCODEDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDEXPIRYDATE
 */
export interface INVALIDEXPIRYDATE {
  /**
   *
   * @type {string}
   * @memberof INVALIDEXPIRYDATE
   */
  issue?: INVALIDEXPIRYDATEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDEXPIRYDATE
   */
  description?: INVALIDEXPIRYDATEDescriptionEnum;
}

export const INVALIDEXPIRYDATEIssueEnum = {
  InvalidExpiryDate: 'INVALID_EXPIRY_DATE',
} as const;

export type INVALIDEXPIRYDATEIssueEnum =
  (typeof INVALIDEXPIRYDATEIssueEnum)[keyof typeof INVALIDEXPIRYDATEIssueEnum];
export const INVALIDEXPIRYDATEDescriptionEnum = {
  ExpiryDateIsInvalidExpiryDateShouldBeADateInFutureAndWithinTheThresholdForThePaymentSource:
    'Expiry date is invalid. Expiry date should be a date in future and within the threshold for the payment source.',
} as const;

export type INVALIDEXPIRYDATEDescriptionEnum =
  (typeof INVALIDEXPIRYDATEDescriptionEnum)[keyof typeof INVALIDEXPIRYDATEDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDFXRATEID
 */
export interface INVALIDFXRATEID {
  /**
   *
   * @type {string}
   * @memberof INVALIDFXRATEID
   */
  issue?: INVALIDFXRATEIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDFXRATEID
   */
  description?: INVALIDFXRATEIDDescriptionEnum;
}

export const INVALIDFXRATEIDIssueEnum = {
  InvalidFxRateId: 'INVALID_FX_RATE_ID',
} as const;

export type INVALIDFXRATEIDIssueEnum =
  (typeof INVALIDFXRATEIDIssueEnum)[keyof typeof INVALIDFXRATEIDIssueEnum];
export const INVALIDFXRATEIDDescriptionEnum = {
  TheSpecificFxRateIdIsNotValidThisCouldBeEitherBecauseWeAreNotAbleToLookUpTheFxRateBasedOnThisIdOrItCouldBeBecauseTheIdBelongsToAnotherApiCaller:
    'The specific FX Rate ID is not valid. This could be either because we are not able to look up the FX Rate based on this ID or it could be because the ID belongs to another API Caller.',
} as const;

export type INVALIDFXRATEIDDescriptionEnum =
  (typeof INVALIDFXRATEIDDescriptionEnum)[keyof typeof INVALIDFXRATEIDDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDGOOGLEPAYTOKEN
 */
export interface INVALIDGOOGLEPAYTOKEN {
  /**
   *
   * @type {string}
   * @memberof INVALIDGOOGLEPAYTOKEN
   */
  issue?: INVALIDGOOGLEPAYTOKENIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDGOOGLEPAYTOKEN
   */
  description?: INVALIDGOOGLEPAYTOKENDescriptionEnum;
}

export const INVALIDGOOGLEPAYTOKENIssueEnum = {
  InvalidGooglePayToken: 'INVALID_GOOGLE_PAY_TOKEN',
} as const;

export type INVALIDGOOGLEPAYTOKENIssueEnum =
  (typeof INVALIDGOOGLEPAYTOKENIssueEnum)[keyof typeof INVALIDGOOGLEPAYTOKENIssueEnum];
export const INVALIDGOOGLEPAYTOKENDescriptionEnum = {
  TheGooglePayTokenIsInvalidPayPalWasNotAbleToDecryptTheGooglepayTokenOrPayPalWasNotAbleToFindTheNecessaryDataInTheTokenAfterDecryption:
    'The google pay token is invalid. PayPal was not able to decrypt the googlepay token or PayPal was not able to find the necessary data in the token after decryption.',
} as const;

export type INVALIDGOOGLEPAYTOKENDescriptionEnum =
  (typeof INVALIDGOOGLEPAYTOKENDescriptionEnum)[keyof typeof INVALIDGOOGLEPAYTOKENDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDIBAN
 */
export interface INVALIDIBAN {
  /**
   *
   * @type {string}
   * @memberof INVALIDIBAN
   */
  issue?: INVALIDIBANIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDIBAN
   */
  description?: INVALIDIBANDescriptionEnum;
}

export const INVALIDIBANIssueEnum = {
  InvalidIban: 'INVALID_IBAN',
} as const;

export type INVALIDIBANIssueEnum =
  (typeof INVALIDIBANIssueEnum)[keyof typeof INVALIDIBANIssueEnum];
export const INVALIDIBANDescriptionEnum = {
  IbanProvidedIsNotAValidBankAccountNumber:
    'IBAN provided is not a valid bank account number.',
} as const;

export type INVALIDIBANDescriptionEnum =
  (typeof INVALIDIBANDescriptionEnum)[keyof typeof INVALIDIBANDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDJSONPOINTERFORMAT
 */
export interface INVALIDJSONPOINTERFORMAT {
  /**
   *
   * @type {string}
   * @memberof INVALIDJSONPOINTERFORMAT
   */
  issue?: INVALIDJSONPOINTERFORMATIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDJSONPOINTERFORMAT
   */
  description?: INVALIDJSONPOINTERFORMATDescriptionEnum;
}

export const INVALIDJSONPOINTERFORMATIssueEnum = {
  InvalidJsonPointerFormat: 'INVALID_JSON_POINTER_FORMAT',
} as const;

export type INVALIDJSONPOINTERFORMATIssueEnum =
  (typeof INVALIDJSONPOINTERFORMATIssueEnum)[keyof typeof INVALIDJSONPOINTERFORMATIssueEnum];
export const INVALIDJSONPOINTERFORMATDescriptionEnum = {
  PathShouldBeAValidJsonPointerHttpsToolsIetfOrgHtmlRfc6901ThatReferencesALocationWithinTheRequestWhereTheOperationIsPerformed:
    'Path should be a valid JSON Pointer https://tools.ietf.org/html/rfc6901 that references a location within the request where the operation is performed.',
} as const;

export type INVALIDJSONPOINTERFORMATDescriptionEnum =
  (typeof INVALIDJSONPOINTERFORMATDescriptionEnum)[keyof typeof INVALIDJSONPOINTERFORMATDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDJSONPOINTERFORMAT1
 */
export interface INVALIDJSONPOINTERFORMAT1 {
  /**
   *
   * @type {string}
   * @memberof INVALIDJSONPOINTERFORMAT1
   */
  issue?: INVALIDJSONPOINTERFORMAT1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDJSONPOINTERFORMAT1
   */
  description?: INVALIDJSONPOINTERFORMAT1DescriptionEnum;
}

export const INVALIDJSONPOINTERFORMAT1IssueEnum = {
  InvalidJsonPointerFormat: 'INVALID_JSON_POINTER_FORMAT',
} as const;

export type INVALIDJSONPOINTERFORMAT1IssueEnum =
  (typeof INVALIDJSONPOINTERFORMAT1IssueEnum)[keyof typeof INVALIDJSONPOINTERFORMAT1IssueEnum];
export const INVALIDJSONPOINTERFORMAT1DescriptionEnum = {
  PathShouldBeAValidJsonPointerHttpsToolsIetfOrgHtmlRfc6901ThatReferencesALocationWithinTheRequestWhereTheOperationIsPerformed:
    'Path should be a valid [JSON Pointer](https://tools.ietf.org/html/rfc6901) that references a location within the request where the operation is performed.',
} as const;

export type INVALIDJSONPOINTERFORMAT1DescriptionEnum =
  (typeof INVALIDJSONPOINTERFORMAT1DescriptionEnum)[keyof typeof INVALIDJSONPOINTERFORMAT1DescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPARAMETER
 */
export interface INVALIDPARAMETER {
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETER
   */
  issue?: INVALIDPARAMETERIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETER
   */
  description?: INVALIDPARAMETERDescriptionEnum;
}

export const INVALIDPARAMETERIssueEnum = {
  InvalidParameter: 'INVALID_PARAMETER',
} as const;

export type INVALIDPARAMETERIssueEnum =
  (typeof INVALIDPARAMETERIssueEnum)[keyof typeof INVALIDPARAMETERIssueEnum];
export const INVALIDPARAMETERDescriptionEnum = {
  CannotBeSpecifiedAsPartOfTheRequest:
    'Cannot be specified as part of the request.',
} as const;

export type INVALIDPARAMETERDescriptionEnum =
  (typeof INVALIDPARAMETERDescriptionEnum)[keyof typeof INVALIDPARAMETERDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPARAMETERSYNTAX
 */
export interface INVALIDPARAMETERSYNTAX {
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERSYNTAX
   */
  issue?: INVALIDPARAMETERSYNTAXIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERSYNTAX
   */
  description?: INVALIDPARAMETERSYNTAXDescriptionEnum;
}

export const INVALIDPARAMETERSYNTAXIssueEnum = {
  InvalidParameterSyntax: 'INVALID_PARAMETER_SYNTAX',
} as const;

export type INVALIDPARAMETERSYNTAXIssueEnum =
  (typeof INVALIDPARAMETERSYNTAXIssueEnum)[keyof typeof INVALIDPARAMETERSYNTAXIssueEnum];
export const INVALIDPARAMETERSYNTAXDescriptionEnum = {
  TheValueOfAFieldDoesNotConformToTheExpectedFormat:
    'The value of a field does not conform to the expected format.',
} as const;

export type INVALIDPARAMETERSYNTAXDescriptionEnum =
  (typeof INVALIDPARAMETERSYNTAXDescriptionEnum)[keyof typeof INVALIDPARAMETERSYNTAXDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPARAMETERSYNTAX1
 */
export interface INVALIDPARAMETERSYNTAX1 {
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERSYNTAX1
   */
  issue?: INVALIDPARAMETERSYNTAX1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERSYNTAX1
   */
  description?: INVALIDPARAMETERSYNTAX1DescriptionEnum;
}

export const INVALIDPARAMETERSYNTAX1IssueEnum = {
  InvalidParameterSyntax: 'INVALID_PARAMETER_SYNTAX',
} as const;

export type INVALIDPARAMETERSYNTAX1IssueEnum =
  (typeof INVALIDPARAMETERSYNTAX1IssueEnum)[keyof typeof INVALIDPARAMETERSYNTAX1IssueEnum];
export const INVALIDPARAMETERSYNTAX1DescriptionEnum = {
  TheValueOfTheFieldDoesNotConformToTheExpectedFormat:
    'The value of the field does not conform to the expected format.',
} as const;

export type INVALIDPARAMETERSYNTAX1DescriptionEnum =
  (typeof INVALIDPARAMETERSYNTAX1DescriptionEnum)[keyof typeof INVALIDPARAMETERSYNTAX1DescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPARAMETERVALUE
 */
export interface INVALIDPARAMETERVALUE {
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERVALUE
   */
  issue?: INVALIDPARAMETERVALUEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERVALUE
   */
  description?: INVALIDPARAMETERVALUEDescriptionEnum;
}

export const INVALIDPARAMETERVALUEIssueEnum = {
  InvalidParameterValue: 'INVALID_PARAMETER_VALUE',
} as const;

export type INVALIDPARAMETERVALUEIssueEnum =
  (typeof INVALIDPARAMETERVALUEIssueEnum)[keyof typeof INVALIDPARAMETERVALUEIssueEnum];
export const INVALIDPARAMETERVALUEDescriptionEnum = {
  AParameterValueIsNotValid: 'A parameter value is not valid.',
} as const;

export type INVALIDPARAMETERVALUEDescriptionEnum =
  (typeof INVALIDPARAMETERVALUEDescriptionEnum)[keyof typeof INVALIDPARAMETERVALUEDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPARAMETERVALUE1
 */
export interface INVALIDPARAMETERVALUE1 {
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERVALUE1
   */
  issue?: INVALIDPARAMETERVALUE1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPARAMETERVALUE1
   */
  description?: INVALIDPARAMETERVALUE1DescriptionEnum;
}

export const INVALIDPARAMETERVALUE1IssueEnum = {
  InvalidParameterValue: 'INVALID_PARAMETER_VALUE',
} as const;

export type INVALIDPARAMETERVALUE1IssueEnum =
  (typeof INVALIDPARAMETERVALUE1IssueEnum)[keyof typeof INVALIDPARAMETERVALUE1IssueEnum];
export const INVALIDPARAMETERVALUE1DescriptionEnum = {
  TheValueOfAFieldIsInvalid: 'The value of a field is invalid.',
} as const;

export type INVALIDPARAMETERVALUE1DescriptionEnum =
  (typeof INVALIDPARAMETERVALUE1DescriptionEnum)[keyof typeof INVALIDPARAMETERVALUE1DescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPATCHOPERATION
 */
export interface INVALIDPATCHOPERATION {
  /**
   *
   * @type {string}
   * @memberof INVALIDPATCHOPERATION
   */
  issue?: INVALIDPATCHOPERATIONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPATCHOPERATION
   */
  description?: INVALIDPATCHOPERATIONDescriptionEnum;
}

export const INVALIDPATCHOPERATIONIssueEnum = {
  InvalidPatchOperation: 'INVALID_PATCH_OPERATION',
} as const;

export type INVALIDPATCHOPERATIONIssueEnum =
  (typeof INVALIDPATCHOPERATIONIssueEnum)[keyof typeof INVALIDPATCHOPERATIONIssueEnum];
export const INVALIDPATCHOPERATIONDescriptionEnum = {
  TheOperationCannotBeHonoredCannotAddAPropertyThatsAlreadyPresentUseReplaceCannotRemoveAPropertyThatsNotPresentUseAddCannotReplaceAPropertyThatsNotPresentUseAdd:
    "The operation cannot be honored. Cannot add a property that's already present, use replace. Cannot remove a property thats not present, use add. Cannot replace a property thats not present, use add.",
} as const;

export type INVALIDPATCHOPERATIONDescriptionEnum =
  (typeof INVALIDPATCHOPERATIONDescriptionEnum)[keyof typeof INVALIDPATCHOPERATIONDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPAYEEPRICINGTIERID
 */
export interface INVALIDPAYEEPRICINGTIERID {
  /**
   *
   * @type {string}
   * @memberof INVALIDPAYEEPRICINGTIERID
   */
  issue?: INVALIDPAYEEPRICINGTIERIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPAYEEPRICINGTIERID
   */
  description?: INVALIDPAYEEPRICINGTIERIDDescriptionEnum;
}

export const INVALIDPAYEEPRICINGTIERIDIssueEnum = {
  InvalidPayeePricingTierId: 'INVALID_PAYEE_PRICING_TIER_ID',
} as const;

export type INVALIDPAYEEPRICINGTIERIDIssueEnum =
  (typeof INVALIDPAYEEPRICINGTIERIDIssueEnum)[keyof typeof INVALIDPAYEEPRICINGTIERIDIssueEnum];
export const INVALIDPAYEEPRICINGTIERIDDescriptionEnum = {
  PleaseCheckTheValueSpecifiedOrConfirmWithYourAccountManagerThatThePayeePricingTierIdSpecifiedHasBeenSetupForTheAccount:
    "Please check the value specified or confirm with your Account Manager that the 'payee_pricing_tier_id' specified has been setup for the account.",
} as const;

export type INVALIDPAYEEPRICINGTIERIDDescriptionEnum =
  (typeof INVALIDPAYEEPRICINGTIERIDDescriptionEnum)[keyof typeof INVALIDPAYEEPRICINGTIERIDDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPAYERID
 */
export interface INVALIDPAYERID {
  /**
   *
   * @type {string}
   * @memberof INVALIDPAYERID
   */
  issue?: INVALIDPAYERIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPAYERID
   */
  description?: INVALIDPAYERIDDescriptionEnum;
}

export const INVALIDPAYERIDIssueEnum = {
  InvalidPayerId: 'INVALID_PAYER_ID',
} as const;

export type INVALIDPAYERIDIssueEnum =
  (typeof INVALIDPAYERIDIssueEnum)[keyof typeof INVALIDPAYERIDIssueEnum];
export const INVALIDPAYERIDDescriptionEnum = {
  ThePayerIdIsNotValid: 'The payer ID is not valid.',
} as const;

export type INVALIDPAYERIDDescriptionEnum =
  (typeof INVALIDPAYERIDDescriptionEnum)[keyof typeof INVALIDPAYERIDDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPICKUPADDRESS
 */
export interface INVALIDPICKUPADDRESS {
  /**
   *
   * @type {string}
   * @memberof INVALIDPICKUPADDRESS
   */
  issue?: INVALIDPICKUPADDRESSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPICKUPADDRESS
   */
  description?: INVALIDPICKUPADDRESSDescriptionEnum;
}

export const INVALIDPICKUPADDRESSIssueEnum = {
  InvalidPickupAddress: 'INVALID_PICKUP_ADDRESS',
} as const;

export type INVALIDPICKUPADDRESSIssueEnum =
  (typeof INVALIDPICKUPADDRESSIssueEnum)[keyof typeof INVALIDPICKUPADDRESSIssueEnum];
export const INVALIDPICKUPADDRESSDescriptionEnum = {
  IfTheShippingOptionTypeIsSetAsPickupThenTheShippingDetailNameFullNameShouldStartWithS2SMeaningShipToStoreExampleS2SMyStore:
    "If the 'shipping_option.type' is set as 'PICKUP' then the 'shipping_detail.name.full_name' should start with 'S2S' meaning Ship To Store. Example: 'S2S My Store'.",
} as const;

export type INVALIDPICKUPADDRESSDescriptionEnum =
  (typeof INVALIDPICKUPADDRESSDescriptionEnum)[keyof typeof INVALIDPICKUPADDRESSDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPLATFORMFEESACCOUNT
 */
export interface INVALIDPLATFORMFEESACCOUNT {
  /**
   *
   * @type {string}
   * @memberof INVALIDPLATFORMFEESACCOUNT
   */
  issue?: INVALIDPLATFORMFEESACCOUNTIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPLATFORMFEESACCOUNT
   */
  description?: INVALIDPLATFORMFEESACCOUNTDescriptionEnum;
}

export const INVALIDPLATFORMFEESACCOUNTIssueEnum = {
  InvalidPlatformFeesAccount: 'INVALID_PLATFORM_FEES_ACCOUNT',
} as const;

export type INVALIDPLATFORMFEESACCOUNTIssueEnum =
  (typeof INVALIDPLATFORMFEESACCOUNTIssueEnum)[keyof typeof INVALIDPLATFORMFEESACCOUNTIssueEnum];
export const INVALIDPLATFORMFEESACCOUNTDescriptionEnum = {
  TheSpecifiedPlatformFeesPayeeAccountIsEitherInvalidOrAccountSetupIsIncompletePleaseWorkWithYourPayPalAccountManagerToEnableThisOptionForYourAccount:
    'The specified platform_fees payee account is either invalid or account setup is incomplete.Please work with your PayPal Account Manager to enable this option for your account.',
} as const;

export type INVALIDPLATFORMFEESACCOUNTDescriptionEnum =
  (typeof INVALIDPLATFORMFEESACCOUNTDescriptionEnum)[keyof typeof INVALIDPLATFORMFEESACCOUNTDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPLATFORMFEESAMOUNT
 */
export interface INVALIDPLATFORMFEESAMOUNT {
  /**
   *
   * @type {string}
   * @memberof INVALIDPLATFORMFEESAMOUNT
   */
  issue?: INVALIDPLATFORMFEESAMOUNTIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPLATFORMFEESAMOUNT
   */
  description?: INVALIDPLATFORMFEESAMOUNTDescriptionEnum;
}

export const INVALIDPLATFORMFEESAMOUNTIssueEnum = {
  InvalidPlatformFeesAmount: 'INVALID_PLATFORM_FEES_AMOUNT',
} as const;

export type INVALIDPLATFORMFEESAMOUNTIssueEnum =
  (typeof INVALIDPLATFORMFEESAMOUNTIssueEnum)[keyof typeof INVALIDPLATFORMFEESAMOUNTIssueEnum];
export const INVALIDPLATFORMFEESAMOUNTDescriptionEnum = {
  ThePlatformFeesAmountCannotBeGreaterThanOrderAmount:
    'The platform_fees amount cannot be greater than order amount.',
} as const;

export type INVALIDPLATFORMFEESAMOUNTDescriptionEnum =
  (typeof INVALIDPLATFORMFEESAMOUNTDescriptionEnum)[keyof typeof INVALIDPLATFORMFEESAMOUNTDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDPREVIOUSTRANSACTIONREFERENCE
 */
export interface INVALIDPREVIOUSTRANSACTIONREFERENCE {
  /**
   *
   * @type {string}
   * @memberof INVALIDPREVIOUSTRANSACTIONREFERENCE
   */
  issue?: INVALIDPREVIOUSTRANSACTIONREFERENCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDPREVIOUSTRANSACTIONREFERENCE
   */
  description?: INVALIDPREVIOUSTRANSACTIONREFERENCEDescriptionEnum;
}

export const INVALIDPREVIOUSTRANSACTIONREFERENCEIssueEnum = {
  InvalidPreviousTransactionReference: 'INVALID_PREVIOUS_TRANSACTION_REFERENCE',
} as const;

export type INVALIDPREVIOUSTRANSACTIONREFERENCEIssueEnum =
  (typeof INVALIDPREVIOUSTRANSACTIONREFERENCEIssueEnum)[keyof typeof INVALIDPREVIOUSTRANSACTIONREFERENCEIssueEnum];
export const INVALIDPREVIOUSTRANSACTIONREFERENCEDescriptionEnum = {
  TheAuthorizationOrCaptureReferencedByPreviousTransactionReferenceIsNotValidThisCouldBeEitherBecauseThePreviousTransactionReferenceIsNotFoundOrDoesntBelongToThePayeePleaseUseAValidPreviousTransactionReference:
    "The authorization or capture referenced by `previous_transaction_reference` is not valid. This could be either because the previous_transaction_reference is not found or doesn't belong to the payee. Please use a valid `previous_transaction_reference`.",
} as const;

export type INVALIDPREVIOUSTRANSACTIONREFERENCEDescriptionEnum =
  (typeof INVALIDPREVIOUSTRANSACTIONREFERENCEDescriptionEnum)[keyof typeof INVALIDPREVIOUSTRANSACTIONREFERENCEDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDRESOURCEID
 */
export interface INVALIDRESOURCEID {
  /**
   *
   * @type {string}
   * @memberof INVALIDRESOURCEID
   */
  issue?: INVALIDRESOURCEIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDRESOURCEID
   */
  description?: INVALIDRESOURCEIDDescriptionEnum;
}

export const INVALIDRESOURCEIDIssueEnum = {
  InvalidResourceId: 'INVALID_RESOURCE_ID',
} as const;

export type INVALIDRESOURCEIDIssueEnum =
  (typeof INVALIDRESOURCEIDIssueEnum)[keyof typeof INVALIDRESOURCEIDIssueEnum];
export const INVALIDRESOURCEIDDescriptionEnum = {
  SpecifiedResourceIdDoesNotExistPleaseCheckTheResourceIdAndTryAgain:
    'Specified resource ID does not exist. Please check the resource ID and try again.',
} as const;

export type INVALIDRESOURCEIDDescriptionEnum =
  (typeof INVALIDRESOURCEIDDescriptionEnum)[keyof typeof INVALIDRESOURCEIDDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDSECURITYCODELENGTH
 */
export interface INVALIDSECURITYCODELENGTH {
  /**
   *
   * @type {string}
   * @memberof INVALIDSECURITYCODELENGTH
   */
  issue?: INVALIDSECURITYCODELENGTHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDSECURITYCODELENGTH
   */
  description?: INVALIDSECURITYCODELENGTHDescriptionEnum;
}

export const INVALIDSECURITYCODELENGTHIssueEnum = {
  InvalidSecurityCodeLength: 'INVALID_SECURITY_CODE_LENGTH',
} as const;

export type INVALIDSECURITYCODELENGTHIssueEnum =
  (typeof INVALIDSECURITYCODELENGTHIssueEnum)[keyof typeof INVALIDSECURITYCODELENGTHIssueEnum];
export const INVALIDSECURITYCODELENGTHDescriptionEnum = {
  TheSecurityCodeLengthIsInvalidForTheSpecifiedCardBrand:
    'The security_code length is invalid for the specified card brand.',
} as const;

export type INVALIDSECURITYCODELENGTHDescriptionEnum =
  (typeof INVALIDSECURITYCODELENGTHDescriptionEnum)[keyof typeof INVALIDSECURITYCODELENGTHDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDSTRINGLENGTH
 */
export interface INVALIDSTRINGLENGTH {
  /**
   *
   * @type {string}
   * @memberof INVALIDSTRINGLENGTH
   */
  issue?: INVALIDSTRINGLENGTHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDSTRINGLENGTH
   */
  description?: INVALIDSTRINGLENGTHDescriptionEnum;
}

export const INVALIDSTRINGLENGTHIssueEnum = {
  InvalidStringLength: 'INVALID_STRING_LENGTH',
} as const;

export type INVALIDSTRINGLENGTHIssueEnum =
  (typeof INVALIDSTRINGLENGTHIssueEnum)[keyof typeof INVALIDSTRINGLENGTHIssueEnum];
export const INVALIDSTRINGLENGTHDescriptionEnum = {
  TheValueOfAFieldIsEitherTooShortOrTooLong:
    'The value of a field is either too short or too long',
} as const;

export type INVALIDSTRINGLENGTHDescriptionEnum =
  (typeof INVALIDSTRINGLENGTHDescriptionEnum)[keyof typeof INVALIDSTRINGLENGTHDescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDSTRINGLENGTH1
 */
export interface INVALIDSTRINGLENGTH1 {
  /**
   *
   * @type {string}
   * @memberof INVALIDSTRINGLENGTH1
   */
  issue?: INVALIDSTRINGLENGTH1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDSTRINGLENGTH1
   */
  description?: INVALIDSTRINGLENGTH1DescriptionEnum;
}

export const INVALIDSTRINGLENGTH1IssueEnum = {
  InvalidStringLength: 'INVALID_STRING_LENGTH',
} as const;

export type INVALIDSTRINGLENGTH1IssueEnum =
  (typeof INVALIDSTRINGLENGTH1IssueEnum)[keyof typeof INVALIDSTRINGLENGTH1IssueEnum];
export const INVALIDSTRINGLENGTH1DescriptionEnum = {
  TheValueOfAFieldIsEitherTooShortOrTooLong:
    'The value of a field is either too short or too long.',
} as const;

export type INVALIDSTRINGLENGTH1DescriptionEnum =
  (typeof INVALIDSTRINGLENGTH1DescriptionEnum)[keyof typeof INVALIDSTRINGLENGTH1DescriptionEnum];

/**
 *
 * @export
 * @interface INVALIDSTRINGMAXLENGTH
 */
export interface INVALIDSTRINGMAXLENGTH {
  /**
   *
   * @type {string}
   * @memberof INVALIDSTRINGMAXLENGTH
   */
  issue?: INVALIDSTRINGMAXLENGTHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof INVALIDSTRINGMAXLENGTH
   */
  description?: INVALIDSTRINGMAXLENGTHDescriptionEnum;
}

export const INVALIDSTRINGMAXLENGTHIssueEnum = {
  InvalidStringMaxLength: 'INVALID_STRING_MAX_LENGTH',
} as const;

export type INVALIDSTRINGMAXLENGTHIssueEnum =
  (typeof INVALIDSTRINGMAXLENGTHIssueEnum)[keyof typeof INVALIDSTRINGMAXLENGTHIssueEnum];
export const INVALIDSTRINGMAXLENGTHDescriptionEnum = {
  TheValueOfAFieldIsTooLong: 'The value of a field is too long.',
} as const;

export type INVALIDSTRINGMAXLENGTHDescriptionEnum =
  (typeof INVALIDSTRINGMAXLENGTHDescriptionEnum)[keyof typeof INVALIDSTRINGMAXLENGTHDescriptionEnum];

/**
 *
 * @export
 * @interface ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE
 */
export interface ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE {
  /**
   *
   * @type {string}
   * @memberof ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE
   */
  issue?: ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCE
   */
  description?: ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum;
}

export const ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum = {
  ItemCategoryNotSupportedByPaymentSource:
    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE',
} as const;

export type ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum =
  (typeof ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum)[keyof typeof ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEIssueEnum];
export const ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum = {
  TheProvidedPaymentSourceDoesNotSupportProvidedItemCategory:
    'The provided payment source does not support provided item category.',
} as const;

export type ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum =
  (typeof ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum)[keyof typeof ITEMCATEGORYNOTSUPPORTEDBYPAYMENTSOURCEDescriptionEnum];

/**
 *
 * @export
 * @interface ITEMSKUMISMATCH
 */
export interface ITEMSKUMISMATCH {
  /**
   *
   * @type {string}
   * @memberof ITEMSKUMISMATCH
   */
  issue?: ITEMSKUMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ITEMSKUMISMATCH
   */
  description?: ITEMSKUMISMATCHDescriptionEnum;
}

export const ITEMSKUMISMATCHIssueEnum = {
  ItemSkuMismatch: 'ITEM_SKU_MISMATCH',
} as const;

export type ITEMSKUMISMATCHIssueEnum =
  (typeof ITEMSKUMISMATCHIssueEnum)[keyof typeof ITEMSKUMISMATCHIssueEnum];
export const ITEMSKUMISMATCHDescriptionEnum = {
  ItemSkuMustMatchOneOfTheItemsSkuThatWasProvidedDuringOrderCreation:
    'Item sku must match one of the items sku that was provided during order creation.',
} as const;

export type ITEMSKUMISMATCHDescriptionEnum =
  (typeof ITEMSKUMISMATCHDescriptionEnum)[keyof typeof ITEMSKUMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface ITEMTOTALMISMATCH
 */
export interface ITEMTOTALMISMATCH {
  /**
   *
   * @type {string}
   * @memberof ITEMTOTALMISMATCH
   */
  issue?: ITEMTOTALMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ITEMTOTALMISMATCH
   */
  description?: ITEMTOTALMISMATCHDescriptionEnum;
}

export const ITEMTOTALMISMATCHIssueEnum = {
  ItemTotalMismatch: 'ITEM_TOTAL_MISMATCH',
} as const;

export type ITEMTOTALMISMATCHIssueEnum =
  (typeof ITEMTOTALMISMATCHIssueEnum)[keyof typeof ITEMTOTALMISMATCHIssueEnum];
export const ITEMTOTALMISMATCHDescriptionEnum = {
  ShouldEqualSumOfUnitAmountQuantityAcrossAllItemsForAGivenPurchaseUnit:
    'Should equal sum of (unit_amount * quantity) across all items for a given purchase_unit.',
} as const;

export type ITEMTOTALMISMATCHDescriptionEnum =
  (typeof ITEMTOTALMISMATCHDescriptionEnum)[keyof typeof ITEMTOTALMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface ITEMTOTALREQUIRED
 */
export interface ITEMTOTALREQUIRED {
  /**
   *
   * @type {string}
   * @memberof ITEMTOTALREQUIRED
   */
  issue?: ITEMTOTALREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ITEMTOTALREQUIRED
   */
  description?: ITEMTOTALREQUIREDDescriptionEnum;
}

export const ITEMTOTALREQUIREDIssueEnum = {
  ItemTotalRequired: 'ITEM_TOTAL_REQUIRED',
} as const;

export type ITEMTOTALREQUIREDIssueEnum =
  (typeof ITEMTOTALREQUIREDIssueEnum)[keyof typeof ITEMTOTALREQUIREDIssueEnum];
export const ITEMTOTALREQUIREDDescriptionEnum = {
  IfItemDetailsAreSpecifiedItemsUnitAmountAndItemsQuantityCorrespondingAmountBreakdownItemTotalIsRequired:
    'If item details are specified (items.unit_amount and items.quantity) corresponding amount.breakdown.item_total is required.',
} as const;

export type ITEMTOTALREQUIREDDescriptionEnum =
  (typeof ITEMTOTALREQUIREDDescriptionEnum)[keyof typeof ITEMTOTALREQUIREDDescriptionEnum];

/**
 * Information used to pay using iDEAL.
 * @export
 * @interface Ideal
 */
export interface Ideal {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Ideal
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Ideal
   */
  country_code?: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof Ideal
   */
  bic?: string;
  /**
   * The last characters of the IBAN used to pay.
   * @type {string}
   * @memberof Ideal
   */
  iban_last_chars?: string;
  /**
   *
   * @type {any}
   * @memberof Ideal
   */
  attributes?: any;
}
/**
 * Information needed to pay using iDEAL.
 * @export
 * @interface IdealRequest
 */
export interface IdealRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof IdealRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof IdealRequest
   */
  country_code: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof IdealRequest
   */
  bic?: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof IdealRequest
   */
  experience_context?: ExperienceContextBase;
  /**
   *
   * @type {any}
   * @memberof IdealRequest
   */
  attributes?: any;
}
/**
 * The details for the items to be purchased.
 * @export
 * @interface Item
 */
export interface Item {
  /**
   * The item name or title.
   * @type {string}
   * @memberof Item
   */
  name: string;
  /**
   *
   * @type {Money}
   * @memberof Item
   */
  unit_amount: Money;
  /**
   *
   * @type {Money}
   * @memberof Item
   */
  tax?: Money;
  /**
   * The item quantity. Must be a whole number.
   * @type {string}
   * @memberof Item
   */
  quantity: string;
  /**
   * The detailed item description.
   * @type {string}
   * @memberof Item
   */
  description?: string;
  /**
   * The stock keeping unit (SKU) for the item.
   * @type {string}
   * @memberof Item
   */
  sku?: string;
  /**
   * The item category type.
   * @type {string}
   * @memberof Item
   */
  category?: ItemCategoryEnum;
}

export const ItemCategoryEnum = {
  DigitalGoods: 'DIGITAL_GOODS',
  PhysicalGoods: 'PHYSICAL_GOODS',
  Donation: 'DONATION',
} as const;

export type ItemCategoryEnum =
  (typeof ItemCategoryEnum)[keyof typeof ItemCategoryEnum];

/**
 * The level 2 card processing data collections. If your merchant account has been configured for Level 2 processing this field will be passed to the processor on your behalf. Please contact your PayPal Technical Account Manager to define level 2 data for your business.
 * @export
 * @interface Level2CardProcessingData
 */
export interface Level2CardProcessingData {
  /**
   * Use this field to pass a purchase identification value of up to 12 ASCII characters for AIB and 17 ASCII characters for all other processors.
   * @type {string}
   * @memberof Level2CardProcessingData
   */
  invoice_id?: string;
  /**
   *
   * @type {Money}
   * @memberof Level2CardProcessingData
   */
  tax_total?: Money;
}
/**
 * The level 3 card processing data collections, If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf. Please contact your PayPal Technical Account Manager to define level 3 data for your business.
 * @export
 * @interface Level3CardProcessingData
 */
export interface Level3CardProcessingData {
  /**
   *
   * @type {Money}
   * @memberof Level3CardProcessingData
   */
  shipping_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof Level3CardProcessingData
   */
  duty_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof Level3CardProcessingData
   */
  discount_amount?: Money;
  /**
   *
   * @type {AddressPortable}
   * @memberof Level3CardProcessingData
   */
  shipping_address?: AddressPortable;
  /**
   * Use this field to specify the postal code of the shipping location.
   * @type {string}
   * @memberof Level3CardProcessingData
   */
  ships_from_postal_code?: string;
  /**
   * A list of the items that were purchased with this payment. If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf.
   * @type {Array<LineItem>}
   * @memberof Level3CardProcessingData
   */
  line_items?: Array<LineItem>;
}
/**
 * Liability shift indicator. The outcome of the issuer\'s authentication.
 * @export
 * @enum {string}
 */

export const LiabilityShift = {
  No: 'NO',
  Possible: 'POSSIBLE',
  Unknown: 'UNKNOWN',
} as const;

export type LiabilityShift =
  (typeof LiabilityShift)[keyof typeof LiabilityShift];

/**
 * The line items for this purchase. If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf.
 * @export
 * @interface LineItem
 */
export interface LineItem {
  /**
   * The item name or title.
   * @type {string}
   * @memberof LineItem
   */
  name: string;
  /**
   *
   * @type {Money}
   * @memberof LineItem
   */
  unit_amount: Money;
  /**
   *
   * @type {Money}
   * @memberof LineItem
   */
  tax?: Money;
  /**
   * The item quantity. Must be a whole number.
   * @type {string}
   * @memberof LineItem
   */
  quantity: string;
  /**
   * The detailed item description.
   * @type {string}
   * @memberof LineItem
   */
  description?: string;
  /**
   * The stock keeping unit (SKU) for the item.
   * @type {string}
   * @memberof LineItem
   */
  sku?: string;
  /**
   * The item category type.
   * @type {string}
   * @memberof LineItem
   */
  category?: LineItemCategoryEnum;
  /**
   * Code used to classify items purchased and track the total amount spent across various categories of products and services. Different corporate purchasing organizations may use different standards, but the United Nations Standard Products and Services Code (UNSPSC) is frequently used.
   * @type {string}
   * @memberof LineItem
   */
  commodity_code?: string;
  /**
   *
   * @type {Money}
   * @memberof LineItem
   */
  discount_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof LineItem
   */
  total_amount?: Money;
  /**
   * Unit of measure is a standard used to express the magnitude of a quantity in international trade. Most commonly used (but not limited to) examples are: Acre (ACR), Ampere (AMP), Centigram (CGM), Centimetre (CMT), Cubic inch (INQ), Cubic metre (MTQ), Fluid ounce (OZA), Foot (FOT), Hour (HUR), Item (ITM), Kilogram (KGM), Kilometre (KMT), Kilowatt (KWT), Liquid gallon (GLL), Liter (LTR), Pounds (LBS), Square foot (FTK).
   * @type {string}
   * @memberof LineItem
   */
  unit_of_measure?: string;
}

export const LineItemCategoryEnum = {
  DigitalGoods: 'DIGITAL_GOODS',
  PhysicalGoods: 'PHYSICAL_GOODS',
  Donation: 'DONATION',
} as const;

export type LineItemCategoryEnum =
  (typeof LineItemCategoryEnum)[keyof typeof LineItemCategoryEnum];

/**
 *
 * @export
 * @interface LineItemAllOf
 */
export interface LineItemAllOf {
  /**
   * Code used to classify items purchased and track the total amount spent across various categories of products and services. Different corporate purchasing organizations may use different standards, but the United Nations Standard Products and Services Code (UNSPSC) is frequently used.
   * @type {string}
   * @memberof LineItemAllOf
   */
  commodity_code?: string;
  /**
   *
   * @type {Money}
   * @memberof LineItemAllOf
   */
  discount_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof LineItemAllOf
   */
  total_amount?: Money;
  /**
   * Unit of measure is a standard used to express the magnitude of a quantity in international trade. Most commonly used (but not limited to) examples are: Acre (ACR), Ampere (AMP), Centigram (CGM), Centimetre (CMT), Cubic inch (INQ), Cubic metre (MTQ), Fluid ounce (OZA), Foot (FOT), Hour (HUR), Item (ITM), Kilogram (KGM), Kilometre (KMT), Kilowatt (KWT), Liquid gallon (GLL), Liter (LTR), Pounds (LBS), Square foot (FTK).
   * @type {string}
   * @memberof LineItemAllOf
   */
  unit_of_measure?: string;
}
/**
 * The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
 * @export
 * @interface LinkDescription
 */
export interface LinkDescription {
  /**
   * The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.
   * @type {string}
   * @memberof LinkDescription
   */
  href: string;
  /**
   * The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).
   * @type {string}
   * @memberof LinkDescription
   */
  rel: string;
  /**
   * The HTTP method required to make the related call.
   * @type {string}
   * @memberof LinkDescription
   */
  method?: LinkDescriptionMethodEnum;
}

export const LinkDescriptionMethodEnum = {
  Get: 'GET',
  Post: 'POST',
  Put: 'PUT',
  Delete: 'DELETE',
  Head: 'HEAD',
  Connect: 'CONNECT',
  Options: 'OPTIONS',
  Patch: 'PATCH',
} as const;

export type LinkDescriptionMethodEnum =
  (typeof LinkDescriptionMethodEnum)[keyof typeof LinkDescriptionMethodEnum];

/**
 *
 * @export
 * @interface MALFORMEDREQUESTJSON
 */
export interface MALFORMEDREQUESTJSON {
  /**
   *
   * @type {string}
   * @memberof MALFORMEDREQUESTJSON
   */
  issue?: MALFORMEDREQUESTJSONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MALFORMEDREQUESTJSON
   */
  description?: MALFORMEDREQUESTJSONDescriptionEnum;
}

export const MALFORMEDREQUESTJSONIssueEnum = {
  MalformedRequestJson: 'MALFORMED_REQUEST_JSON',
} as const;

export type MALFORMEDREQUESTJSONIssueEnum =
  (typeof MALFORMEDREQUESTJSONIssueEnum)[keyof typeof MALFORMEDREQUESTJSONIssueEnum];
export const MALFORMEDREQUESTJSONDescriptionEnum = {
  TheRequestJsonIsNotWellFormed: 'The request JSON is not well formed.',
} as const;

export type MALFORMEDREQUESTJSONDescriptionEnum =
  (typeof MALFORMEDREQUESTJSONDescriptionEnum)[keyof typeof MALFORMEDREQUESTJSONDescriptionEnum];

/**
 *
 * @export
 * @interface MAXAUTHORIZATIONCOUNTEXCEEDED
 */
export interface MAXAUTHORIZATIONCOUNTEXCEEDED {
  /**
   *
   * @type {string}
   * @memberof MAXAUTHORIZATIONCOUNTEXCEEDED
   */
  issue?: MAXAUTHORIZATIONCOUNTEXCEEDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MAXAUTHORIZATIONCOUNTEXCEEDED
   */
  description?: MAXAUTHORIZATIONCOUNTEXCEEDEDDescriptionEnum;
}

export const MAXAUTHORIZATIONCOUNTEXCEEDEDIssueEnum = {
  MaxAuthorizationCountExceeded: 'MAX_AUTHORIZATION_COUNT_EXCEEDED',
} as const;

export type MAXAUTHORIZATIONCOUNTEXCEEDEDIssueEnum =
  (typeof MAXAUTHORIZATIONCOUNTEXCEEDEDIssueEnum)[keyof typeof MAXAUTHORIZATIONCOUNTEXCEEDEDIssueEnum];
export const MAXAUTHORIZATIONCOUNTEXCEEDEDDescriptionEnum = {
  MaximumNumberOfAuthorizationAllowedForTheOrderIsReachedPleaseContactCustomerSupportIfYouNeedToIncreaseYourLimit:
    'Maximum number of authorization allowed for the order is reached. Please contact Customer Support if you need to increase your limit.',
} as const;

export type MAXAUTHORIZATIONCOUNTEXCEEDEDDescriptionEnum =
  (typeof MAXAUTHORIZATIONCOUNTEXCEEDEDDescriptionEnum)[keyof typeof MAXAUTHORIZATIONCOUNTEXCEEDEDDescriptionEnum];

/**
 *
 * @export
 * @interface MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED
 */
export interface MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED {
  /**
   *
   * @type {string}
   * @memberof MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED
   */
  issue?: MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED
   */
  description?: MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDDescriptionEnum;
}

export const MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDIssueEnum = {
  MaxNumberOfPaymentAttemptsExceeded: 'MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED',
} as const;

export type MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDIssueEnum =
  (typeof MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDIssueEnum)[keyof typeof MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDIssueEnum];
export const MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDDescriptionEnum = {
  YouHaveExceededTheMaximumNumberOfPaymentAttempts:
    'You have exceeded the maximum number of payment attempts.',
} as const;

export type MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDDescriptionEnum =
  (typeof MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDDescriptionEnum)[keyof typeof MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDDescriptionEnum];

/**
 *
 * @export
 * @interface MAXVALUEEXCEEDED
 */
export interface MAXVALUEEXCEEDED {
  /**
   *
   * @type {string}
   * @memberof MAXVALUEEXCEEDED
   */
  issue?: MAXVALUEEXCEEDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MAXVALUEEXCEEDED
   */
  description?: MAXVALUEEXCEEDEDDescriptionEnum;
}

export const MAXVALUEEXCEEDEDIssueEnum = {
  MaxValueExceeded: 'MAX_VALUE_EXCEEDED',
} as const;

export type MAXVALUEEXCEEDEDIssueEnum =
  (typeof MAXVALUEEXCEEDEDIssueEnum)[keyof typeof MAXVALUEEXCEEDEDIssueEnum];
export const MAXVALUEEXCEEDEDDescriptionEnum = {
  ShouldBeLessThanOrEqualTo99999999999999999:
    'Should be less than or equal to 999999999999999.99.',
} as const;

export type MAXVALUEEXCEEDEDDescriptionEnum =
  (typeof MAXVALUEEXCEEDEDDescriptionEnum)[keyof typeof MAXVALUEEXCEEDEDDescriptionEnum];

/**
 *
 * @export
 * @interface MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS
 */
export interface MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS {
  /**
   *
   * @type {string}
   * @memberof MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS
   */
  issue?: MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS
   */
  description?: MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSDescriptionEnum;
}

export const MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSIssueEnum = {
  MerchantInitiatedWithAuthenticationResults:
    'MERCHANT_INITIATED_WITH_AUTHENTICATION_RESULTS',
} as const;

export type MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSIssueEnum =
  (typeof MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSIssueEnum)[keyof typeof MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSIssueEnum];
export const MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSDescriptionEnum = {
  StoredPaymentSourcePaymentInitiatorMerchantIsNotSupportedIf3DSecureAuthenticationResultsArePresentInTheOrder3DSecureAuthenticationResultsCanBePresentInTheOrderOnlyWhenCustomerIsThePaymentInitiatorItIsSemanticallyIncorrectToPerformAMerchantInitiatedPaymentWith3DSecureAuthenticationResultsIsTheOrder:
    '`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if 3D-Secure authentication results are present in the order. 3D-Secure authentication results can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with 3D-Secure authentication results is the order.',
} as const;

export type MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSDescriptionEnum =
  (typeof MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSDescriptionEnum)[keyof typeof MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSDescriptionEnum];

/**
 *
 * @export
 * @interface MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS
 */
export interface MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS {
  /**
   *
   * @type {string}
   * @memberof MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS
   */
  issue?: MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS
   */
  description?: MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSDescriptionEnum;
}

export const MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSIssueEnum = {
  MerchantInitiatedWithMultiplePurchaseUnits:
    'MERCHANT_INITIATED_WITH_MULTIPLE_PURCHASE_UNITS',
} as const;

export type MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSIssueEnum =
  (typeof MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSIssueEnum)[keyof typeof MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSIssueEnum];
export const MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSDescriptionEnum = {
  StoredPaymentSourcePaymentInitiatorMerchantIsNotSupportedIfMoreThanOnePurchaseUnitIsPresentInTheOrderMerchantInitiatedPaymentsAreNotSupportedFromOrdersWithMoreThanOnePurchaseUnitPleaseRetryTheRequestWithMultipleOrderRequestsOneForEachPurchaseUnit:
    '`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if more than one purchase_unit is present in the Order. Merchant initiated payments are not supported from orders with more than one purchase_unit. Please retry the request with multiple Order requests (one for each purchase_unit).',
} as const;

export type MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSDescriptionEnum =
  (typeof MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSDescriptionEnum)[keyof typeof MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSDescriptionEnum];

/**
 *
 * @export
 * @interface MERCHANTINITIATEDWITHSECURITYCODE
 */
export interface MERCHANTINITIATEDWITHSECURITYCODE {
  /**
   *
   * @type {string}
   * @memberof MERCHANTINITIATEDWITHSECURITYCODE
   */
  issue?: MERCHANTINITIATEDWITHSECURITYCODEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MERCHANTINITIATEDWITHSECURITYCODE
   */
  description?: MERCHANTINITIATEDWITHSECURITYCODEDescriptionEnum;
}

export const MERCHANTINITIATEDWITHSECURITYCODEIssueEnum = {
  MerchantInitiatedWithSecurityCode: 'MERCHANT_INITIATED_WITH_SECURITY_CODE',
} as const;

export type MERCHANTINITIATEDWITHSECURITYCODEIssueEnum =
  (typeof MERCHANTINITIATEDWITHSECURITYCODEIssueEnum)[keyof typeof MERCHANTINITIATEDWITHSECURITYCODEIssueEnum];
export const MERCHANTINITIATEDWITHSECURITYCODEDescriptionEnum = {
  StoredPaymentSourcePaymentInitiatorMerchantIsNotSupportedIfPaymentSourceCardSecurityCodeIsPresentInTheOrderSecurityCodeCanBePresentInTheOrderOnlyWhenCustomerIsThePaymentInitiatorItIsSemanticallyIncorrectToPerformAMerchantInitiatedPaymentWithSecurityCodeIsTheOrder:
    '`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if `payment_source.card.security_code` is present in the order. `security_code` can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with `security_code` is the order.',
} as const;

export type MERCHANTINITIATEDWITHSECURITYCODEDescriptionEnum =
  (typeof MERCHANTINITIATEDWITHSECURITYCODEDescriptionEnum)[keyof typeof MERCHANTINITIATEDWITHSECURITYCODEDescriptionEnum];

/**
 *
 * @export
 * @interface MISMATCHEDVAULTIDTOPAYMENTSOURCE
 */
export interface MISMATCHEDVAULTIDTOPAYMENTSOURCE {
  /**
   *
   * @type {string}
   * @memberof MISMATCHEDVAULTIDTOPAYMENTSOURCE
   */
  issue?: MISMATCHEDVAULTIDTOPAYMENTSOURCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISMATCHEDVAULTIDTOPAYMENTSOURCE
   */
  description?: MISMATCHEDVAULTIDTOPAYMENTSOURCEDescriptionEnum;
}

export const MISMATCHEDVAULTIDTOPAYMENTSOURCEIssueEnum = {
  MismatchedVaultIdToPaymentSource: 'MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE',
} as const;

export type MISMATCHEDVAULTIDTOPAYMENTSOURCEIssueEnum =
  (typeof MISMATCHEDVAULTIDTOPAYMENTSOURCEIssueEnum)[keyof typeof MISMATCHEDVAULTIDTOPAYMENTSOURCEIssueEnum];
export const MISMATCHEDVAULTIDTOPAYMENTSOURCEDescriptionEnum = {
  TheVaultIdDoesNotMatchThePaymentSourceProvidedPleaseVerifyThatTheVaultIdTokenUsedRefersToTheMatchingPaymentSourceAndTryAgainForExampleAPayPalTokenCannotBePassedInTheVaultIdFieldInThePaymentSourceCardObject:
    'The vault_id does not match the payment_source provided. Please verify that the vault_id token used refers to the matching payment_source and try again. For example, a PayPal token cannot be passed in the vault_id field in the payment_source.card object.',
} as const;

export type MISMATCHEDVAULTIDTOPAYMENTSOURCEDescriptionEnum =
  (typeof MISMATCHEDVAULTIDTOPAYMENTSOURCEDescriptionEnum)[keyof typeof MISMATCHEDVAULTIDTOPAYMENTSOURCEDescriptionEnum];

/**
 *
 * @export
 * @interface MISSINGCRYPTOGRAM
 */
export interface MISSINGCRYPTOGRAM {
  /**
   *
   * @type {string}
   * @memberof MISSINGCRYPTOGRAM
   */
  issue?: MISSINGCRYPTOGRAMIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISSINGCRYPTOGRAM
   */
  description?: MISSINGCRYPTOGRAMDescriptionEnum;
}

export const MISSINGCRYPTOGRAMIssueEnum = {
  MissingCryptogram: 'MISSING_CRYPTOGRAM',
} as const;

export type MISSINGCRYPTOGRAMIssueEnum =
  (typeof MISSINGCRYPTOGRAMIssueEnum)[keyof typeof MISSINGCRYPTOGRAMIssueEnum];
export const MISSINGCRYPTOGRAMDescriptionEnum = {
  CryptogramIsMandatoryForAnyCustomerInitiatedNetworkTokenTransactions:
    'Cryptogram is mandatory for any customer initiated network token transactions.',
} as const;

export type MISSINGCRYPTOGRAMDescriptionEnum =
  (typeof MISSINGCRYPTOGRAMDescriptionEnum)[keyof typeof MISSINGCRYPTOGRAMDescriptionEnum];

/**
 *
 * @export
 * @interface MISSINGPICKUPADDRESS
 */
export interface MISSINGPICKUPADDRESS {
  /**
   *
   * @type {string}
   * @memberof MISSINGPICKUPADDRESS
   */
  issue?: MISSINGPICKUPADDRESSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISSINGPICKUPADDRESS
   */
  description?: MISSINGPICKUPADDRESSDescriptionEnum;
}

export const MISSINGPICKUPADDRESSIssueEnum = {
  MissingPickupAddress: 'MISSING_PICKUP_ADDRESS',
} as const;

export type MISSINGPICKUPADDRESSIssueEnum =
  (typeof MISSINGPICKUPADDRESSIssueEnum)[keyof typeof MISSINGPICKUPADDRESSIssueEnum];
export const MISSINGPICKUPADDRESSDescriptionEnum = {
  APickupAddressShippingAddressIsRequiredForTheProvidedShippingType:
    'A pickup address(`shipping.address`) is required for the provided `shipping.type`.',
} as const;

export type MISSINGPICKUPADDRESSDescriptionEnum =
  (typeof MISSINGPICKUPADDRESSDescriptionEnum)[keyof typeof MISSINGPICKUPADDRESSDescriptionEnum];

/**
 *
 * @export
 * @interface MISSINGPREVIOUSREFERENCE
 */
export interface MISSINGPREVIOUSREFERENCE {
  /**
   *
   * @type {string}
   * @memberof MISSINGPREVIOUSREFERENCE
   */
  issue?: MISSINGPREVIOUSREFERENCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISSINGPREVIOUSREFERENCE
   */
  description?: MISSINGPREVIOUSREFERENCEDescriptionEnum;
}

export const MISSINGPREVIOUSREFERENCEIssueEnum = {
  MissingPreviousReference: 'MISSING_PREVIOUS_REFERENCE',
} as const;

export type MISSINGPREVIOUSREFERENCEIssueEnum =
  (typeof MISSINGPREVIOUSREFERENCEIssueEnum)[keyof typeof MISSINGPREVIOUSREFERENCEIssueEnum];
export const MISSINGPREVIOUSREFERENCEDescriptionEnum = {
  ForMerchantInitiatedNetworkTokenTransactionsEitherThePaymentSourceCardStoredCredentialPreviousNetworkTransactionReferenceOrPaymentSourceCardStoredCredentialPreviousTransactionReferenceMustBeIncludedInTheRequest:
    'For Merchant initiated network token transactions, either the payment_source.card.stored_credential.previous_network_transaction_reference or payment_source.card.stored_credential.previous_transaction_reference must be included in the request.',
} as const;

export type MISSINGPREVIOUSREFERENCEDescriptionEnum =
  (typeof MISSINGPREVIOUSREFERENCEDescriptionEnum)[keyof typeof MISSINGPREVIOUSREFERENCEDescriptionEnum];

/**
 *
 * @export
 * @interface MISSINGREQUIREDPARAMETER
 */
export interface MISSINGREQUIREDPARAMETER {
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER
   */
  issue?: MISSINGREQUIREDPARAMETERIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER
   */
  description?: MISSINGREQUIREDPARAMETERDescriptionEnum;
}

export const MISSINGREQUIREDPARAMETERIssueEnum = {
  MissingRequiredParameter: 'MISSING_REQUIRED_PARAMETER',
} as const;

export type MISSINGREQUIREDPARAMETERIssueEnum =
  (typeof MISSINGREQUIREDPARAMETERIssueEnum)[keyof typeof MISSINGREQUIREDPARAMETERIssueEnum];
export const MISSINGREQUIREDPARAMETERDescriptionEnum = {
  ARequiredParameterIsMissing: 'A required parameter is missing.',
} as const;

export type MISSINGREQUIREDPARAMETERDescriptionEnum =
  (typeof MISSINGREQUIREDPARAMETERDescriptionEnum)[keyof typeof MISSINGREQUIREDPARAMETERDescriptionEnum];

/**
 *
 * @export
 * @interface MISSINGREQUIREDPARAMETER1
 */
export interface MISSINGREQUIREDPARAMETER1 {
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER1
   */
  issue?: MISSINGREQUIREDPARAMETER1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER1
   */
  description?: MISSINGREQUIREDPARAMETER1DescriptionEnum;
}

export const MISSINGREQUIREDPARAMETER1IssueEnum = {
  MissingRequiredParameter: 'MISSING_REQUIRED_PARAMETER',
} as const;

export type MISSINGREQUIREDPARAMETER1IssueEnum =
  (typeof MISSINGREQUIREDPARAMETER1IssueEnum)[keyof typeof MISSINGREQUIREDPARAMETER1IssueEnum];
export const MISSINGREQUIREDPARAMETER1DescriptionEnum = {
  ARequiredFieldParameterIsMissing: 'A required field / parameter is missing.',
} as const;

export type MISSINGREQUIREDPARAMETER1DescriptionEnum =
  (typeof MISSINGREQUIREDPARAMETER1DescriptionEnum)[keyof typeof MISSINGREQUIREDPARAMETER1DescriptionEnum];

/**
 *
 * @export
 * @interface MISSINGREQUIREDPARAMETER2
 */
export interface MISSINGREQUIREDPARAMETER2 {
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER2
   */
  issue?: MISSINGREQUIREDPARAMETER2IssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER2
   */
  description?: MISSINGREQUIREDPARAMETER2DescriptionEnum;
}

export const MISSINGREQUIREDPARAMETER2IssueEnum = {
  MissingRequiredParameter: 'MISSING_REQUIRED_PARAMETER',
} as const;

export type MISSINGREQUIREDPARAMETER2IssueEnum =
  (typeof MISSINGREQUIREDPARAMETER2IssueEnum)[keyof typeof MISSINGREQUIREDPARAMETER2IssueEnum];
export const MISSINGREQUIREDPARAMETER2DescriptionEnum = {
  ARequiredFieldParameterIsMissing: 'A required field / parameter is missing',
} as const;

export type MISSINGREQUIREDPARAMETER2DescriptionEnum =
  (typeof MISSINGREQUIREDPARAMETER2DescriptionEnum)[keyof typeof MISSINGREQUIREDPARAMETER2DescriptionEnum];

/**
 *
 * @export
 * @interface MISSINGREQUIREDPARAMETER3
 */
export interface MISSINGREQUIREDPARAMETER3 {
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER3
   */
  issue?: MISSINGREQUIREDPARAMETER3IssueEnum;
  /**
   *
   * @type {string}
   * @memberof MISSINGREQUIREDPARAMETER3
   */
  description?: MISSINGREQUIREDPARAMETER3DescriptionEnum;
}

export const MISSINGREQUIREDPARAMETER3IssueEnum = {
  MissingRequiredParameter: 'MISSING_REQUIRED_PARAMETER',
} as const;

export type MISSINGREQUIREDPARAMETER3IssueEnum =
  (typeof MISSINGREQUIREDPARAMETER3IssueEnum)[keyof typeof MISSINGREQUIREDPARAMETER3IssueEnum];
export const MISSINGREQUIREDPARAMETER3DescriptionEnum = {
  ARequiredFieldOrParameterIsMissing:
    'A required field or parameter is missing.',
} as const;

export type MISSINGREQUIREDPARAMETER3DescriptionEnum =
  (typeof MISSINGREQUIREDPARAMETER3DescriptionEnum)[keyof typeof MISSINGREQUIREDPARAMETER3DescriptionEnum];

/**
 *
 * @export
 * @interface MSPNOTSUPPORTED
 */
export interface MSPNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof MSPNOTSUPPORTED
   */
  issue?: MSPNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MSPNOTSUPPORTED
   */
  description?: MSPNOTSUPPORTEDDescriptionEnum;
}

export const MSPNOTSUPPORTEDIssueEnum = {
  MspNotSupported: 'MSP_NOT_SUPPORTED',
} as const;

export type MSPNOTSUPPORTEDIssueEnum =
  (typeof MSPNOTSUPPORTEDIssueEnum)[keyof typeof MSPNOTSUPPORTEDIssueEnum];
export const MSPNOTSUPPORTEDDescriptionEnum = {
  MultiplePurchaseUnitsAreNotSupportedForThisOperation:
    'Multiple purchase units are not supported for this operation.',
} as const;

export type MSPNOTSUPPORTEDDescriptionEnum =
  (typeof MSPNOTSUPPORTEDDescriptionEnum)[keyof typeof MSPNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface MULTICURRENCYORDER
 */
export interface MULTICURRENCYORDER {
  /**
   *
   * @type {string}
   * @memberof MULTICURRENCYORDER
   */
  issue?: MULTICURRENCYORDERIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MULTICURRENCYORDER
   */
  description?: MULTICURRENCYORDERDescriptionEnum;
}

export const MULTICURRENCYORDERIssueEnum = {
  MultiCurrencyOrder: 'MULTI_CURRENCY_ORDER',
} as const;

export type MULTICURRENCYORDERIssueEnum =
  (typeof MULTICURRENCYORDERIssueEnum)[keyof typeof MULTICURRENCYORDERIssueEnum];
export const MULTICURRENCYORDERDescriptionEnum = {
  MultipleDifferingValuesOfCurrencyCodeAreNotSupportedEntireOrderRequestMustHaveTheSameCurrencyCode:
    'Multiple differing values of currency_code are not supported. Entire Order request must have the same currency_code.',
} as const;

export type MULTICURRENCYORDERDescriptionEnum =
  (typeof MULTICURRENCYORDERDescriptionEnum)[keyof typeof MULTICURRENCYORDERDescriptionEnum];

/**
 *
 * @export
 * @interface MULTIPLEITEMCATEGORIES
 */
export interface MULTIPLEITEMCATEGORIES {
  /**
   *
   * @type {string}
   * @memberof MULTIPLEITEMCATEGORIES
   */
  issue?: MULTIPLEITEMCATEGORIESIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MULTIPLEITEMCATEGORIES
   */
  description?: MULTIPLEITEMCATEGORIESDescriptionEnum;
}

export const MULTIPLEITEMCATEGORIESIssueEnum = {
  MultipleItemCategories: 'MULTIPLE_ITEM_CATEGORIES',
} as const;

export type MULTIPLEITEMCATEGORIESIssueEnum =
  (typeof MULTIPLEITEMCATEGORIESIssueEnum)[keyof typeof MULTIPLEITEMCATEGORIESIssueEnum];
export const MULTIPLEITEMCATEGORIESDescriptionEnum = {
  ForAGivenPurchaseUnitTheItemsCategoryCouldBeEitherPhysicalGoodsAndOrDigitalGoodsOrJustDonationItemsCategoryAsDonationCannotBeCombinedWithItemsWithEitherPhysicalGoodsOrDigitalGoods:
    'For a given \'purchase_unit\' the \'items.category\' could be either "PHYSICAL_GOODS" and/or "DIGITAL_GOODS" or just "DONATION".  \'items.category\' as "DONATION" cannot be combined with items with either "PHYSICAL_GOODS" or "DIGITAL_GOODS".',
} as const;

export type MULTIPLEITEMCATEGORIESDescriptionEnum =
  (typeof MULTIPLEITEMCATEGORIESDescriptionEnum)[keyof typeof MULTIPLEITEMCATEGORIESDescriptionEnum];

/**
 *
 * @export
 * @interface MULTIPLESHIPPINGADDRESSNOTSUPPORTED
 */
export interface MULTIPLESHIPPINGADDRESSNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof MULTIPLESHIPPINGADDRESSNOTSUPPORTED
   */
  issue?: MULTIPLESHIPPINGADDRESSNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MULTIPLESHIPPINGADDRESSNOTSUPPORTED
   */
  description?: MULTIPLESHIPPINGADDRESSNOTSUPPORTEDDescriptionEnum;
}

export const MULTIPLESHIPPINGADDRESSNOTSUPPORTEDIssueEnum = {
  MultipleShippingAddressNotSupported:
    'MULTIPLE_SHIPPING_ADDRESS_NOT_SUPPORTED',
} as const;

export type MULTIPLESHIPPINGADDRESSNOTSUPPORTEDIssueEnum =
  (typeof MULTIPLESHIPPINGADDRESSNOTSUPPORTEDIssueEnum)[keyof typeof MULTIPLESHIPPINGADDRESSNOTSUPPORTEDIssueEnum];
export const MULTIPLESHIPPINGADDRESSNOTSUPPORTEDDescriptionEnum = {
  MultipleShippingAddressesAreNotSupported:
    'Multiple shipping addresses are not supported.',
} as const;

export type MULTIPLESHIPPINGADDRESSNOTSUPPORTEDDescriptionEnum =
  (typeof MULTIPLESHIPPINGADDRESSNOTSUPPORTEDDescriptionEnum)[keyof typeof MULTIPLESHIPPINGADDRESSNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface MULTIPLESHIPPINGOPTIONSELECTED
 */
export interface MULTIPLESHIPPINGOPTIONSELECTED {
  /**
   *
   * @type {string}
   * @memberof MULTIPLESHIPPINGOPTIONSELECTED
   */
  issue?: MULTIPLESHIPPINGOPTIONSELECTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MULTIPLESHIPPINGOPTIONSELECTED
   */
  description?: MULTIPLESHIPPINGOPTIONSELECTEDDescriptionEnum;
}

export const MULTIPLESHIPPINGOPTIONSELECTEDIssueEnum = {
  MultipleShippingOptionSelected: 'MULTIPLE_SHIPPING_OPTION_SELECTED',
} as const;

export type MULTIPLESHIPPINGOPTIONSELECTEDIssueEnum =
  (typeof MULTIPLESHIPPINGOPTIONSELECTEDIssueEnum)[keyof typeof MULTIPLESHIPPINGOPTIONSELECTEDIssueEnum];
export const MULTIPLESHIPPINGOPTIONSELECTEDDescriptionEnum = {
  OnlyOneShippingOptionCanBeSetToSelectedTrue:
    "Only one shipping.option can be set to 'selected = true'.",
} as const;

export type MULTIPLESHIPPINGOPTIONSELECTEDDescriptionEnum =
  (typeof MULTIPLESHIPPINGOPTIONSELECTEDDescriptionEnum)[keyof typeof MULTIPLESHIPPINGOPTIONSELECTEDDescriptionEnum];

/**
 *
 * @export
 * @interface MULTIPLESHIPPINGTYPENOTSUPPORTED
 */
export interface MULTIPLESHIPPINGTYPENOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof MULTIPLESHIPPINGTYPENOTSUPPORTED
   */
  issue?: MULTIPLESHIPPINGTYPENOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof MULTIPLESHIPPINGTYPENOTSUPPORTED
   */
  description?: MULTIPLESHIPPINGTYPENOTSUPPORTEDDescriptionEnum;
}

export const MULTIPLESHIPPINGTYPENOTSUPPORTEDIssueEnum = {
  MultipleShippingTypeNotSupported: 'MULTIPLE_SHIPPING_TYPE_NOT_SUPPORTED',
} as const;

export type MULTIPLESHIPPINGTYPENOTSUPPORTEDIssueEnum =
  (typeof MULTIPLESHIPPINGTYPENOTSUPPORTEDIssueEnum)[keyof typeof MULTIPLESHIPPINGTYPENOTSUPPORTEDIssueEnum];
export const MULTIPLESHIPPINGTYPENOTSUPPORTEDDescriptionEnum = {
  DifferentShippingTypeAreNotSupportedAcrossPurchaseUnits:
    'Different `shipping.type` are not supported across purchase units.',
} as const;

export type MULTIPLESHIPPINGTYPENOTSUPPORTEDDescriptionEnum =
  (typeof MULTIPLESHIPPINGTYPENOTSUPPORTEDDescriptionEnum)[keyof typeof MULTIPLESHIPPINGTYPENOTSUPPORTEDDescriptionEnum];

/**
 * The breakdown of the refund.
 * @export
 * @interface MerchantPayableBreakdown
 */
export interface MerchantPayableBreakdown {
  /**
   *
   * @type {Money}
   * @memberof MerchantPayableBreakdown
   */
  gross_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof MerchantPayableBreakdown
   */
  paypal_fee?: Money;
  /**
   *
   * @type {Money}
   * @memberof MerchantPayableBreakdown
   */
  paypal_fee_in_receivable_currency?: Money;
  /**
   *
   * @type {Money}
   * @memberof MerchantPayableBreakdown
   */
  net_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof MerchantPayableBreakdown
   */
  net_amount_in_receivable_currency?: Money;
  /**
   * An array of platform or partner fees, commissions, or brokerage fees for the refund.
   * @type {Array<PlatformFee>}
   * @memberof MerchantPayableBreakdown
   */
  platform_fees?: Array<PlatformFee>;
  /**
   * An array of breakdown values for the net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the payee holds their funds.
   * @type {Array<NetAmountBreakdownItem>}
   * @memberof MerchantPayableBreakdown
   */
  net_amount_breakdown?: Array<NetAmountBreakdownItem>;
  /**
   *
   * @type {Money}
   * @memberof MerchantPayableBreakdown
   */
  total_refunded_amount?: Money;
}
/**
 *
 * @export
 * @interface Model400
 */
export interface Model400 {
  /**
   *
   * @type {Array<Model400DetailsInner>}
   * @memberof Model400
   */
  details?: Array<Model400DetailsInner>;
}
/**
 *
 * @export
 * @interface Model400DetailsInner
 */
export interface Model400DetailsInner {
  /**
   *
   * @type {string}
   * @memberof Model400DetailsInner
   */
  issue?: Model400DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof Model400DetailsInner
   */
  description?: Model400DetailsInnerDescriptionEnum;
}

export const Model400DetailsInnerIssueEnum = {
  MalformedRequestJson: 'MALFORMED_REQUEST_JSON',
} as const;

export type Model400DetailsInnerIssueEnum =
  (typeof Model400DetailsInnerIssueEnum)[keyof typeof Model400DetailsInnerIssueEnum];
export const Model400DetailsInnerDescriptionEnum = {
  TheRequestJsonIsNotWellFormed: 'The request JSON is not well formed.',
} as const;

export type Model400DetailsInnerDescriptionEnum =
  (typeof Model400DetailsInnerDescriptionEnum)[keyof typeof Model400DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface Model401
 */
export interface Model401 {
  /**
   *
   * @type {Array<Model401DetailsInner>}
   * @memberof Model401
   */
  details?: Array<Model401DetailsInner>;
}
/**
 *
 * @export
 * @interface Model401DetailsInner
 */
export interface Model401DetailsInner {
  /**
   *
   * @type {string}
   * @memberof Model401DetailsInner
   */
  issue?: Model401DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof Model401DetailsInner
   */
  description?: Model401DetailsInnerDescriptionEnum;
}

export const Model401DetailsInnerIssueEnum = {
  InvalidAccountStatus: 'INVALID_ACCOUNT_STATUS',
} as const;

export type Model401DetailsInnerIssueEnum =
  (typeof Model401DetailsInnerIssueEnum)[keyof typeof Model401DetailsInnerIssueEnum];
export const Model401DetailsInnerDescriptionEnum = {
  AccountValidationsFailedForTheUser:
    'Account validations failed for the user.',
} as const;

export type Model401DetailsInnerDescriptionEnum =
  (typeof Model401DetailsInnerDescriptionEnum)[keyof typeof Model401DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface Model403
 */
export interface Model403 {
  /**
   *
   * @type {Array<Model403DetailsInner>}
   * @memberof Model403
   */
  details?: Array<Model403DetailsInner>;
}
/**
 *
 * @export
 * @interface Model403DetailsInner
 */
export interface Model403DetailsInner {
  /**
   *
   * @type {string}
   * @memberof Model403DetailsInner
   */
  issue?: Model403DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof Model403DetailsInner
   */
  description?: Model403DetailsInnerDescriptionEnum;
}

export const Model403DetailsInnerIssueEnum = {
  PayeeAccountNotVerified: 'PAYEE_ACCOUNT_NOT_VERIFIED',
} as const;

export type Model403DetailsInnerIssueEnum =
  (typeof Model403DetailsInnerIssueEnum)[keyof typeof Model403DetailsInnerIssueEnum];
export const Model403DetailsInnerDescriptionEnum = {
  PayeeHasNotVerifiedTheirAccountWithPayPalTheSelectedPaymentMethodRequiresTheRecipientToHaveAVerifiedPayPalAccountBeforeTransactionsCanBeProcessedOnTheirBehalf:
    'Payee has not verified their account with PayPal. The selected payment method requires the recipient to have a verified PayPal account before transactions can be processed on their behalf.',
} as const;

export type Model403DetailsInnerDescriptionEnum =
  (typeof Model403DetailsInnerDescriptionEnum)[keyof typeof Model403DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface Model404
 */
export interface Model404 {
  /**
   *
   * @type {Array<Model404DetailsInner>}
   * @memberof Model404
   */
  details?: Array<Model404DetailsInner>;
}
/**
 *
 * @export
 * @interface Model404DetailsInner
 */
export interface Model404DetailsInner {
  /**
   *
   * @type {string}
   * @memberof Model404DetailsInner
   */
  issue?: Model404DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof Model404DetailsInner
   */
  description?: Model404DetailsInnerDescriptionEnum;
}

export const Model404DetailsInnerIssueEnum = {
  InvalidResourceId: 'INVALID_RESOURCE_ID',
} as const;

export type Model404DetailsInnerIssueEnum =
  (typeof Model404DetailsInnerIssueEnum)[keyof typeof Model404DetailsInnerIssueEnum];
export const Model404DetailsInnerDescriptionEnum = {
  SpecifiedResourceIdDoesNotExistPleaseCheckTheResourceIdAndTryAgain:
    'Specified resource ID does not exist. Please check the resource ID and try again.',
} as const;

export type Model404DetailsInnerDescriptionEnum =
  (typeof Model404DetailsInnerDescriptionEnum)[keyof typeof Model404DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface Model422
 */
export interface Model422 {
  /**
   *
   * @type {Array<Model422DetailsInner>}
   * @memberof Model422
   */
  details?: Array<Model422DetailsInner>;
}
/**
 *
 * @export
 * @interface Model422DetailsInner
 */
export interface Model422DetailsInner {
  /**
   *
   * @type {string}
   * @memberof Model422DetailsInner
   */
  issue?: Model422DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof Model422DetailsInner
   */
  description?: Model422DetailsInnerDescriptionEnum;
}

export const Model422DetailsInnerIssueEnum = {
  BlikOneClickMissingRequiredParameter:
    'BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER',
} as const;

export type Model422DetailsInnerIssueEnum =
  (typeof Model422DetailsInnerIssueEnum)[keyof typeof Model422DetailsInnerIssueEnum];
export const Model422DetailsInnerDescriptionEnum = {
  BliksOneClickFlowRequiresOneClickAuthCodeAndOneClickAliasLabelParametersForTheBuyersFirstTransactionForAllSubsequentTransactionsonlyTheOneClickAliasKeyParameterIsRequired:
    "Blik's one_click flow requires one_click.auth_code and one_click.alias_label parameters for the buyer's first transaction. For all subsequent transactions,only the one_click.alias_key parameter is required.",
} as const;

export type Model422DetailsInnerDescriptionEnum =
  (typeof Model422DetailsInnerDescriptionEnum)[keyof typeof Model422DetailsInnerDescriptionEnum];

/**
 * The currency and amount for a financial transaction, such as a balance or payment due.
 * @export
 * @interface Money
 */
export interface Money {
  /**
   * The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
   * @type {string}
   * @memberof Money
   */
  currency_code: string;
  /**
   * The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/).
   * @type {string}
   * @memberof Money
   */
  value: string;
}
/**
 * The currency and amount for a financial transaction, such as a balance or payment due.
 * @export
 * @interface Money2
 */
export interface Money2 {
  /**
   * The [3-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
   * @type {string}
   * @memberof Money2
   */
  currency_code: string;
  /**
   * The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/).
   * @type {string}
   * @memberof Money2
   */
  value: string;
}
/**
 * Information used to pay using MyBank.
 * @export
 * @interface Mybank
 */
export interface Mybank {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Mybank
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Mybank
   */
  country_code?: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof Mybank
   */
  bic?: string;
  /**
   * The last characters of the IBAN used to pay.
   * @type {string}
   * @memberof Mybank
   */
  iban_last_chars?: string;
}
/**
 * Information needed to pay using MyBank.
 * @export
 * @interface MybankRequest
 */
export interface MybankRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof MybankRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof MybankRequest
   */
  country_code: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof MybankRequest
   */
  experience_context?: ExperienceContextBase;
}
/**
 *
 * @export
 * @interface NOPAYMENTSOURCEPROVIDED
 */
export interface NOPAYMENTSOURCEPROVIDED {
  /**
   *
   * @type {string}
   * @memberof NOPAYMENTSOURCEPROVIDED
   */
  issue?: NOPAYMENTSOURCEPROVIDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOPAYMENTSOURCEPROVIDED
   */
  description?: NOPAYMENTSOURCEPROVIDEDDescriptionEnum;
}

export const NOPAYMENTSOURCEPROVIDEDIssueEnum = {
  NoPaymentSourceProvided: 'NO_PAYMENT_SOURCE_PROVIDED',
} as const;

export type NOPAYMENTSOURCEPROVIDEDIssueEnum =
  (typeof NOPAYMENTSOURCEPROVIDEDIssueEnum)[keyof typeof NOPAYMENTSOURCEPROVIDEDIssueEnum];
export const NOPAYMENTSOURCEPROVIDEDDescriptionEnum = {
  AtLeastOnePaymentMethodIsRequiredWithinThePaymentSource:
    'At least one payment method is required within the payment source.',
} as const;

export type NOPAYMENTSOURCEPROVIDEDDescriptionEnum =
  (typeof NOPAYMENTSOURCEPROVIDEDDescriptionEnum)[keyof typeof NOPAYMENTSOURCEPROVIDEDDescriptionEnum];

/**
 *
 * @export
 * @interface NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING
 */
export interface NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING {
  /**
   *
   * @type {string}
   * @memberof NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING
   */
  issue?: NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING
   */
  description?: NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGDescriptionEnum;
}

export const NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGIssueEnum = {
  NotEligibleForPaypalTransactionIdProcessing:
    'NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING',
} as const;

export type NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGIssueEnum =
  (typeof NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGIssueEnum)[keyof typeof NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGIssueEnum];
export const NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGDescriptionEnum = {
  ApiCallerIsNotEnableToProcessPaymentsUsingPaypalTransactionIdPleaseContactCustomerSupportToRequestPermissionsToProcessTransactionsWithPayPalTransactionId:
    'API caller is not enable to process payments using `paypal_transaction_id`. Please contact customer support to request permissions to process transactions with PayPal transaction ID.',
} as const;

export type NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGDescriptionEnum =
  (typeof NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGDescriptionEnum)[keyof typeof NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGDescriptionEnum];

/**
 *
 * @export
 * @interface NOTELIGIBLEFORPNREFPROCESSING
 */
export interface NOTELIGIBLEFORPNREFPROCESSING {
  /**
   *
   * @type {string}
   * @memberof NOTELIGIBLEFORPNREFPROCESSING
   */
  issue?: NOTELIGIBLEFORPNREFPROCESSINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTELIGIBLEFORPNREFPROCESSING
   */
  description?: NOTELIGIBLEFORPNREFPROCESSINGDescriptionEnum;
}

export const NOTELIGIBLEFORPNREFPROCESSINGIssueEnum = {
  NotEligibleForPnrefProcessing: 'NOT_ELIGIBLE_FOR_PNREF_PROCESSING',
} as const;

export type NOTELIGIBLEFORPNREFPROCESSINGIssueEnum =
  (typeof NOTELIGIBLEFORPNREFPROCESSINGIssueEnum)[keyof typeof NOTELIGIBLEFORPNREFPROCESSINGIssueEnum];
export const NOTELIGIBLEFORPNREFPROCESSINGDescriptionEnum = {
  ApiCallerIsNotEnabledToProcessPaymentsWithThePnrefPleaseContactCustomerSupportToRequestPermissionsToProcessTransactionsWithPnref:
    'API caller is not enabled to process payments with the `pnref`. Please contact customer support to request permissions to process transactions with PNREF.',
} as const;

export type NOTELIGIBLEFORPNREFPROCESSINGDescriptionEnum =
  (typeof NOTELIGIBLEFORPNREFPROCESSINGDescriptionEnum)[keyof typeof NOTELIGIBLEFORPNREFPROCESSINGDescriptionEnum];

/**
 *
 * @export
 * @interface NOTELIGIBLEFORTOKENPROCESSING
 */
export interface NOTELIGIBLEFORTOKENPROCESSING {
  /**
   *
   * @type {string}
   * @memberof NOTELIGIBLEFORTOKENPROCESSING
   */
  issue?: NOTELIGIBLEFORTOKENPROCESSINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTELIGIBLEFORTOKENPROCESSING
   */
  description?: NOTELIGIBLEFORTOKENPROCESSINGDescriptionEnum;
}

export const NOTELIGIBLEFORTOKENPROCESSINGIssueEnum = {
  NotEligibleForTokenProcessing: 'NOT_ELIGIBLE_FOR_TOKEN_PROCESSING',
} as const;

export type NOTELIGIBLEFORTOKENPROCESSINGIssueEnum =
  (typeof NOTELIGIBLEFORTOKENPROCESSINGIssueEnum)[keyof typeof NOTELIGIBLEFORTOKENPROCESSINGIssueEnum];
export const NOTELIGIBLEFORTOKENPROCESSINGDescriptionEnum = {
  ApiCallerIsNotEnabledToProcessPaymentsWithTheSpecifiedTypeOfTokenPleaseContactCustomerSupportToRequestPermissionsToProcessTransactionsWithThisTypeOfToken:
    'API caller is not enabled to process payments with the specified type of token. Please contact customer support to request permissions to process transactions with this type of token.',
} as const;

export type NOTELIGIBLEFORTOKENPROCESSINGDescriptionEnum =
  (typeof NOTELIGIBLEFORTOKENPROCESSINGDescriptionEnum)[keyof typeof NOTELIGIBLEFORTOKENPROCESSINGDescriptionEnum];

/**
 *
 * @export
 * @interface NOTENABLEDFORAPPLEPAY
 */
export interface NOTENABLEDFORAPPLEPAY {
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORAPPLEPAY
   */
  issue?: NOTENABLEDFORAPPLEPAYIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORAPPLEPAY
   */
  description?: NOTENABLEDFORAPPLEPAYDescriptionEnum;
}

export const NOTENABLEDFORAPPLEPAYIssueEnum = {
  NotEnabledForApplePay: 'NOT_ENABLED_FOR_APPLE_PAY',
} as const;

export type NOTENABLEDFORAPPLEPAYIssueEnum =
  (typeof NOTENABLEDFORAPPLEPAYIssueEnum)[keyof typeof NOTENABLEDFORAPPLEPAYIssueEnum];
export const NOTENABLEDFORAPPLEPAYDescriptionEnum = {
  TheApiCallerAndOrPayeeIsNotSetupToBeAbleToProcessApplePayPleaseContactYourAccountManager:
    "The 'API caller' and/or 'payee' is not setup to be able to process apple pay. Please contact your Account Manager.",
} as const;

export type NOTENABLEDFORAPPLEPAYDescriptionEnum =
  (typeof NOTENABLEDFORAPPLEPAYDescriptionEnum)[keyof typeof NOTENABLEDFORAPPLEPAYDescriptionEnum];

/**
 *
 * @export
 * @interface NOTENABLEDFORBANKPROCESSING
 */
export interface NOTENABLEDFORBANKPROCESSING {
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORBANKPROCESSING
   */
  issue?: NOTENABLEDFORBANKPROCESSINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORBANKPROCESSING
   */
  description?: NOTENABLEDFORBANKPROCESSINGDescriptionEnum;
}

export const NOTENABLEDFORBANKPROCESSINGIssueEnum = {
  NotEnabledForBankProcessing: 'NOT_ENABLED_FOR_BANK_PROCESSING',
} as const;

export type NOTENABLEDFORBANKPROCESSINGIssueEnum =
  (typeof NOTENABLEDFORBANKPROCESSINGIssueEnum)[keyof typeof NOTENABLEDFORBANKPROCESSINGIssueEnum];
export const NOTENABLEDFORBANKPROCESSINGDescriptionEnum = {
  TheApiCallerAccountIsNotSetupToBeAbleToProcessBankPaymentsPleaseContactYourPayPalAccountManager:
    'The API Caller account is not setup to be able to process bank payments. Please contact your PayPal account manager.',
} as const;

export type NOTENABLEDFORBANKPROCESSINGDescriptionEnum =
  (typeof NOTENABLEDFORBANKPROCESSINGDescriptionEnum)[keyof typeof NOTENABLEDFORBANKPROCESSINGDescriptionEnum];

/**
 *
 * @export
 * @interface NOTENABLEDFORCARDPROCESSING
 */
export interface NOTENABLEDFORCARDPROCESSING {
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORCARDPROCESSING
   */
  issue?: NOTENABLEDFORCARDPROCESSINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORCARDPROCESSING
   */
  description?: NOTENABLEDFORCARDPROCESSINGDescriptionEnum;
}

export const NOTENABLEDFORCARDPROCESSINGIssueEnum = {
  NotEnabledForCardProcessing: 'NOT_ENABLED_FOR_CARD_PROCESSING',
} as const;

export type NOTENABLEDFORCARDPROCESSINGIssueEnum =
  (typeof NOTENABLEDFORCARDPROCESSINGIssueEnum)[keyof typeof NOTENABLEDFORCARDPROCESSINGIssueEnum];
export const NOTENABLEDFORCARDPROCESSINGDescriptionEnum = {
  TheRecipientForWhichTheApiCallIsMadeOnBehalfOfIsNotEnabledForCardProcessingPleaseContactPayPalCustomerSupport:
    'The recipient for which the API call is made on behalf of is not enabled for card processing. Please contact PayPal customer support.',
} as const;

export type NOTENABLEDFORCARDPROCESSINGDescriptionEnum =
  (typeof NOTENABLEDFORCARDPROCESSINGDescriptionEnum)[keyof typeof NOTENABLEDFORCARDPROCESSINGDescriptionEnum];

/**
 *
 * @export
 * @interface NOTENABLEDFORCARDPROCESSING1
 */
export interface NOTENABLEDFORCARDPROCESSING1 {
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORCARDPROCESSING1
   */
  issue?: NOTENABLEDFORCARDPROCESSING1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORCARDPROCESSING1
   */
  description?: NOTENABLEDFORCARDPROCESSING1DescriptionEnum;
}

export const NOTENABLEDFORCARDPROCESSING1IssueEnum = {
  NotEnabledForCardProcessing: 'NOT_ENABLED_FOR_CARD_PROCESSING',
} as const;

export type NOTENABLEDFORCARDPROCESSING1IssueEnum =
  (typeof NOTENABLEDFORCARDPROCESSING1IssueEnum)[keyof typeof NOTENABLEDFORCARDPROCESSING1IssueEnum];
export const NOTENABLEDFORCARDPROCESSING1DescriptionEnum = {
  TheApiCallerAccountIsNotSetupToBeAbleToProcessCardPaymentsPleaseContactPayPalCustomerSupport:
    'The API Caller account is not setup to be able to process card payments. Please contact PayPal customer support.',
} as const;

export type NOTENABLEDFORCARDPROCESSING1DescriptionEnum =
  (typeof NOTENABLEDFORCARDPROCESSING1DescriptionEnum)[keyof typeof NOTENABLEDFORCARDPROCESSING1DescriptionEnum];

/**
 *
 * @export
 * @interface NOTENABLEDFORGOOGLEPAY
 */
export interface NOTENABLEDFORGOOGLEPAY {
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORGOOGLEPAY
   */
  issue?: NOTENABLEDFORGOOGLEPAYIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDFORGOOGLEPAY
   */
  description?: NOTENABLEDFORGOOGLEPAYDescriptionEnum;
}

export const NOTENABLEDFORGOOGLEPAYIssueEnum = {
  NotEnabledForGooglePay: 'NOT_ENABLED_FOR_GOOGLE_PAY',
} as const;

export type NOTENABLEDFORGOOGLEPAYIssueEnum =
  (typeof NOTENABLEDFORGOOGLEPAYIssueEnum)[keyof typeof NOTENABLEDFORGOOGLEPAYIssueEnum];
export const NOTENABLEDFORGOOGLEPAYDescriptionEnum = {
  TheApiCallerAndOrPayeeIsNotSetupToBeAbleToProcessGooglePayPleaseContactYourAccountManager:
    "The 'API caller' and/or 'payee' is not setup to be able to process google pay. Please contact your Account Manager.",
} as const;

export type NOTENABLEDFORGOOGLEPAYDescriptionEnum =
  (typeof NOTENABLEDFORGOOGLEPAYDescriptionEnum)[keyof typeof NOTENABLEDFORGOOGLEPAYDescriptionEnum];

/**
 *
 * @export
 * @interface NOTENABLEDTOVAULTPAYMENTSOURCE
 */
export interface NOTENABLEDTOVAULTPAYMENTSOURCE {
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDTOVAULTPAYMENTSOURCE
   */
  issue?: NOTENABLEDTOVAULTPAYMENTSOURCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTENABLEDTOVAULTPAYMENTSOURCE
   */
  description?: NOTENABLEDTOVAULTPAYMENTSOURCEDescriptionEnum;
}

export const NOTENABLEDTOVAULTPAYMENTSOURCEIssueEnum = {
  NotEnabledToVaultPaymentSource: 'NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE',
} as const;

export type NOTENABLEDTOVAULTPAYMENTSOURCEIssueEnum =
  (typeof NOTENABLEDTOVAULTPAYMENTSOURCEIssueEnum)[keyof typeof NOTENABLEDTOVAULTPAYMENTSOURCEIssueEnum];
export const NOTENABLEDTOVAULTPAYMENTSOURCEDescriptionEnum = {
  TheApiCallerOrTheMerchantOnWhoseBehalfTheApiCallIsInitiatedIsNotAllowedToVaultTheGivenSourcePleaseContactPayPalCustomerSupportForAssistance:
    'The API caller or the merchant on whose behalf the API call is initiated is not allowed to vault the given source. Please contact PayPal customer support for assistance.',
} as const;

export type NOTENABLEDTOVAULTPAYMENTSOURCEDescriptionEnum =
  (typeof NOTENABLEDTOVAULTPAYMENTSOURCEDescriptionEnum)[keyof typeof NOTENABLEDTOVAULTPAYMENTSOURCEDescriptionEnum];

/**
 *
 * @export
 * @interface NOTPATCHABLE
 */
export interface NOTPATCHABLE {
  /**
   *
   * @type {string}
   * @memberof NOTPATCHABLE
   */
  issue?: NOTPATCHABLEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTPATCHABLE
   */
  description?: NOTPATCHABLEDescriptionEnum;
}

export const NOTPATCHABLEIssueEnum = {
  NotPatchable: 'NOT_PATCHABLE',
} as const;

export type NOTPATCHABLEIssueEnum =
  (typeof NOTPATCHABLEIssueEnum)[keyof typeof NOTPATCHABLEIssueEnum];
export const NOTPATCHABLEDescriptionEnum = {
  CannotBePatched: 'Cannot be patched.',
} as const;

export type NOTPATCHABLEDescriptionEnum =
  (typeof NOTPATCHABLEDescriptionEnum)[keyof typeof NOTPATCHABLEDescriptionEnum];

/**
 *
 * @export
 * @interface NOTSUPPORTED
 */
export interface NOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof NOTSUPPORTED
   */
  issue?: NOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof NOTSUPPORTED
   */
  description?: NOTSUPPORTEDDescriptionEnum;
}

export const NOTSUPPORTEDIssueEnum = {
  NotSupported: 'NOT_SUPPORTED',
} as const;

export type NOTSUPPORTEDIssueEnum =
  (typeof NOTSUPPORTEDIssueEnum)[keyof typeof NOTSUPPORTEDIssueEnum];
export const NOTSUPPORTEDDescriptionEnum = {
  ThisFieldIsNotCurrentlySupported: 'This field is not currently supported.',
} as const;

export type NOTSUPPORTEDDescriptionEnum =
  (typeof NOTSUPPORTEDDescriptionEnum)[keyof typeof NOTSUPPORTEDDescriptionEnum];

/**
 * The name of the party.
 * @export
 * @interface Name
 */
export interface Name {
  /**
   * The prefix, or title, to the party\'s name.
   * @type {string}
   * @memberof Name
   */
  prefix?: string;
  /**
   * When the party is a person, the party\'s given, or first, name.
   * @type {string}
   * @memberof Name
   */
  given_name?: string;
  /**
   * When the party is a person, the party\'s surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother\'s, surname.
   * @type {string}
   * @memberof Name
   */
  surname?: string;
  /**
   * When the party is a person, the party\'s middle name. Use also to store multiple middle names including the patronymic, or father\'s, middle name.
   * @type {string}
   * @memberof Name
   */
  middle_name?: string;
  /**
   * The suffix for the party\'s name.
   * @type {string}
   * @memberof Name
   */
  suffix?: string;
  /**
   * DEPRECATED. The party\'s alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.
   * @type {string}
   * @memberof Name
   */
  alternate_full_name?: string;
  /**
   * When the party is a person, the party\'s full name.
   * @type {string}
   * @memberof Name
   */
  full_name?: string;
}
/**
 * The name of the party.
 * @export
 * @interface Name2
 */
export interface Name2 {
  /**
   * The prefix, or title, to the party\'s name.
   * @type {string}
   * @memberof Name2
   */
  prefix?: string;
  /**
   * When the party is a person, the party\'s given, or first, name.
   * @type {string}
   * @memberof Name2
   */
  given_name?: string;
  /**
   * When the party is a person, the party\'s surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother\'s, surname.
   * @type {string}
   * @memberof Name2
   */
  surname?: string;
  /**
   * When the party is a person, the party\'s middle name. Use also to store multiple middle names including the patronymic, or father\'s, middle name.
   * @type {string}
   * @memberof Name2
   */
  middle_name?: string;
  /**
   * The suffix for the party\'s name.
   * @type {string}
   * @memberof Name2
   */
  suffix?: string;
  /**
   * When the party is a person, the party\'s full name.
   * @type {string}
   * @memberof Name2
   */
  full_name?: string;
}
/**
 * The net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the merchant holds their funds.
 * @export
 * @interface NetAmountBreakdownItem
 */
export interface NetAmountBreakdownItem {
  /**
   *
   * @type {Money}
   * @memberof NetAmountBreakdownItem
   */
  payable_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof NetAmountBreakdownItem
   */
  converted_amount?: Money;
  /**
   *
   * @type {ExchangeRate}
   * @memberof NetAmountBreakdownItem
   */
  exchange_rate?: ExchangeRate;
}
/**
 * The Third Party Network token used to fund a payment.
 * @export
 * @interface NetworkTokenRequest
 */
export interface NetworkTokenRequest {
  /**
   * Third party network token number.
   * @type {string}
   * @memberof NetworkTokenRequest
   */
  number: string;
  /**
   * The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @type {string}
   * @memberof NetworkTokenRequest
   */
  expiry: string;
  /**
   * An Encrypted one-time use value that\'s sent along with Network Token. This field is not required to be present for recurring transactions.
   * @type {string}
   * @memberof NetworkTokenRequest
   */
  cryptogram?: string;
  /**
   *
   * @type {EciFlag}
   * @memberof NetworkTokenRequest
   */
  eci_flag?: EciFlag;
  /**
   * A TRID, or a Token Requestor ID, is an identifier used by merchants to request network tokens from card networks. A TRID is a precursor to obtaining a network token for a credit card primary account number (PAN), and will aid in enabling secure card on file (COF) payments and reducing fraud.
   * @type {string}
   * @memberof NetworkTokenRequest
   */
  token_requestor_id?: string;
}

/**
 * Reference values used by the card network to identify a transaction.
 * @export
 * @interface NetworkTransactionReference
 */
export interface NetworkTransactionReference {
  /**
   * Transaction reference id returned by the scheme. For Visa and Amex, this is the \"Tran id\" field in response. For MasterCard, this is the \"BankNet reference id\" field in response. For Discover, this is the \"NRID\" field in response. The pattern we expect for this field from Visa/Amex/CB/Discover is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric with special character -.
   * @type {string}
   * @memberof NetworkTransactionReference
   */
  id: string;
  /**
   * The date that the transaction was authorized by the scheme. This field may not be returned for all networks. MasterCard refers to this field as \"BankNet reference date.
   * @type {string}
   * @memberof NetworkTransactionReference
   */
  date?: string;
  /**
   *
   * @type {CardBrand}
   * @memberof NetworkTransactionReference
   */
  network?: CardBrand;
  /**
   * Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.
   * @type {string}
   * @memberof NetworkTransactionReference
   */
  acquirer_reference_number?: string;
}

/**
 *
 * @export
 * @interface ONEOFPARAMETERSREQUIRED
 */
export interface ONEOFPARAMETERSREQUIRED {
  /**
   *
   * @type {string}
   * @memberof ONEOFPARAMETERSREQUIRED
   */
  issue?: ONEOFPARAMETERSREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ONEOFPARAMETERSREQUIRED
   */
  description?: ONEOFPARAMETERSREQUIREDDescriptionEnum;
}

export const ONEOFPARAMETERSREQUIREDIssueEnum = {
  OneOfParametersRequired: 'ONE_OF_PARAMETERS_REQUIRED',
} as const;

export type ONEOFPARAMETERSREQUIREDIssueEnum =
  (typeof ONEOFPARAMETERSREQUIREDIssueEnum)[keyof typeof ONEOFPARAMETERSREQUIREDIssueEnum];
export const ONEOFPARAMETERSREQUIREDDescriptionEnum = {
  OneOrMoreFieldIsRequiredToContinueWithThisRequest:
    'One or more field is required to continue with this request.',
} as const;

export type ONEOFPARAMETERSREQUIREDDescriptionEnum =
  (typeof ONEOFPARAMETERSREQUIREDDescriptionEnum)[keyof typeof ONEOFPARAMETERSREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface ONEOFTHEPARAMETERSREQUIRED
 */
export interface ONEOFTHEPARAMETERSREQUIRED {
  /**
   *
   * @type {string}
   * @memberof ONEOFTHEPARAMETERSREQUIRED
   */
  issue?: ONEOFTHEPARAMETERSREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ONEOFTHEPARAMETERSREQUIRED
   */
  description?: ONEOFTHEPARAMETERSREQUIREDDescriptionEnum;
}

export const ONEOFTHEPARAMETERSREQUIREDIssueEnum = {
  OneOfTheParametersRequired: 'ONE_OF_THE_PARAMETERS_REQUIRED',
} as const;

export type ONEOFTHEPARAMETERSREQUIREDIssueEnum =
  (typeof ONEOFTHEPARAMETERSREQUIREDIssueEnum)[keyof typeof ONEOFTHEPARAMETERSREQUIREDIssueEnum];
export const ONEOFTHEPARAMETERSREQUIREDDescriptionEnum = {
  OneOrMoreFieldIsRequiredToContinueWithThisRequest:
    'One or more field is required to continue with this request.',
} as const;

export type ONEOFTHEPARAMETERSREQUIREDDescriptionEnum =
  (typeof ONEOFTHEPARAMETERSREQUIREDDescriptionEnum)[keyof typeof ONEOFTHEPARAMETERSREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface ONLYONEBANKSOURCEALLOWED
 */
export interface ONLYONEBANKSOURCEALLOWED {
  /**
   *
   * @type {string}
   * @memberof ONLYONEBANKSOURCEALLOWED
   */
  issue?: ONLYONEBANKSOURCEALLOWEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ONLYONEBANKSOURCEALLOWED
   */
  description?: ONLYONEBANKSOURCEALLOWEDDescriptionEnum;
}

export const ONLYONEBANKSOURCEALLOWEDIssueEnum = {
  OnlyOneBankSourceAllowed: 'ONLY_ONE_BANK_SOURCE_ALLOWED',
} as const;

export type ONLYONEBANKSOURCEALLOWEDIssueEnum =
  (typeof ONLYONEBANKSOURCEALLOWEDIssueEnum)[keyof typeof ONLYONEBANKSOURCEALLOWEDIssueEnum];
export const ONLYONEBANKSOURCEALLOWEDDescriptionEnum = {
  MoreThanOnePaymentMethodWithinTheBankPaymentObjectIsNotSupported:
    'More than one payment method within the bank payment object is not supported.',
} as const;

export type ONLYONEBANKSOURCEALLOWEDDescriptionEnum =
  (typeof ONLYONEBANKSOURCEALLOWEDDescriptionEnum)[keyof typeof ONLYONEBANKSOURCEALLOWEDDescriptionEnum];

/**
 *
 * @export
 * @interface ONLYONEPAYMENTSOURCEALLOWED
 */
export interface ONLYONEPAYMENTSOURCEALLOWED {
  /**
   *
   * @type {string}
   * @memberof ONLYONEPAYMENTSOURCEALLOWED
   */
  issue?: ONLYONEPAYMENTSOURCEALLOWEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ONLYONEPAYMENTSOURCEALLOWED
   */
  description?: ONLYONEPAYMENTSOURCEALLOWEDDescriptionEnum;
}

export const ONLYONEPAYMENTSOURCEALLOWEDIssueEnum = {
  OnlyOnePaymentSourceAllowed: 'ONLY_ONE_PAYMENT_SOURCE_ALLOWED',
} as const;

export type ONLYONEPAYMENTSOURCEALLOWEDIssueEnum =
  (typeof ONLYONEPAYMENTSOURCEALLOWEDIssueEnum)[keyof typeof ONLYONEPAYMENTSOURCEALLOWEDIssueEnum];
export const ONLYONEPAYMENTSOURCEALLOWEDDescriptionEnum = {
  MoreThanOnePaymentMethodWithinThePaymentSourceIsNotSupported:
    'More than one payment method within the payment source is not supported.',
} as const;

export type ONLYONEPAYMENTSOURCEALLOWEDDescriptionEnum =
  (typeof ONLYONEPAYMENTSOURCEALLOWEDDescriptionEnum)[keyof typeof ONLYONEPAYMENTSOURCEALLOWEDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERALREADYAUTHORIZED
 */
export interface ORDERALREADYAUTHORIZED {
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYAUTHORIZED
   */
  issue?: ORDERALREADYAUTHORIZEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYAUTHORIZED
   */
  description?: ORDERALREADYAUTHORIZEDDescriptionEnum;
}

export const ORDERALREADYAUTHORIZEDIssueEnum = {
  OrderAlreadyAuthorized: 'ORDER_ALREADY_AUTHORIZED',
} as const;

export type ORDERALREADYAUTHORIZEDIssueEnum =
  (typeof ORDERALREADYAUTHORIZEDIssueEnum)[keyof typeof ORDERALREADYAUTHORIZEDIssueEnum];
export const ORDERALREADYAUTHORIZEDDescriptionEnum = {
  OrderAlreadyCapturedIfIntentCaptureOnlyOneCapturePerOrderIsAllowed:
    "Order already captured. If 'intent=CAPTURE' only one capture per order is allowed.",
} as const;

export type ORDERALREADYAUTHORIZEDDescriptionEnum =
  (typeof ORDERALREADYAUTHORIZEDDescriptionEnum)[keyof typeof ORDERALREADYAUTHORIZEDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERALREADYAUTHORIZED1
 */
export interface ORDERALREADYAUTHORIZED1 {
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYAUTHORIZED1
   */
  issue?: ORDERALREADYAUTHORIZED1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYAUTHORIZED1
   */
  description?: ORDERALREADYAUTHORIZED1DescriptionEnum;
}

export const ORDERALREADYAUTHORIZED1IssueEnum = {
  OrderAlreadyAuthorized: 'ORDER_ALREADY_AUTHORIZED',
} as const;

export type ORDERALREADYAUTHORIZED1IssueEnum =
  (typeof ORDERALREADYAUTHORIZED1IssueEnum)[keyof typeof ORDERALREADYAUTHORIZED1IssueEnum];
export const ORDERALREADYAUTHORIZED1DescriptionEnum = {
  OrderAlreadyAuthorizedIfIntentAuthorizeOnlyOneAuthorizationPerOrderIsAllowed:
    "Order already authorized.If 'intent=AUTHORIZE' only one authorization per order is allowed.",
} as const;

export type ORDERALREADYAUTHORIZED1DescriptionEnum =
  (typeof ORDERALREADYAUTHORIZED1DescriptionEnum)[keyof typeof ORDERALREADYAUTHORIZED1DescriptionEnum];

/**
 *
 * @export
 * @interface ORDERALREADYCAPTURED
 */
export interface ORDERALREADYCAPTURED {
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYCAPTURED
   */
  issue?: ORDERALREADYCAPTUREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYCAPTURED
   */
  description?: ORDERALREADYCAPTUREDDescriptionEnum;
}

export const ORDERALREADYCAPTUREDIssueEnum = {
  OrderAlreadyCaptured: 'ORDER_ALREADY_CAPTURED',
} as const;

export type ORDERALREADYCAPTUREDIssueEnum =
  (typeof ORDERALREADYCAPTUREDIssueEnum)[keyof typeof ORDERALREADYCAPTUREDIssueEnum];
export const ORDERALREADYCAPTUREDDescriptionEnum = {
  OrderAlreadyCapturedIfIntentCaptureOnlyOneCapturePerOrderIsAllowed:
    "Order already captured. If 'intent=CAPTURE' only one capture per order is allowed.",
} as const;

export type ORDERALREADYCAPTUREDDescriptionEnum =
  (typeof ORDERALREADYCAPTUREDDescriptionEnum)[keyof typeof ORDERALREADYCAPTUREDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERALREADYCAPTURED1
 */
export interface ORDERALREADYCAPTURED1 {
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYCAPTURED1
   */
  issue?: ORDERALREADYCAPTURED1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYCAPTURED1
   */
  description?: ORDERALREADYCAPTURED1DescriptionEnum;
}

export const ORDERALREADYCAPTURED1IssueEnum = {
  OrderAlreadyCaptured: 'ORDER_ALREADY_CAPTURED',
} as const;

export type ORDERALREADYCAPTURED1IssueEnum =
  (typeof ORDERALREADYCAPTURED1IssueEnum)[keyof typeof ORDERALREADYCAPTURED1IssueEnum];
export const ORDERALREADYCAPTURED1DescriptionEnum = {
  OrderAlreadyCapturedIfIntentCaptureOnlyOneCapturePerOrderIsAllowed:
    "Order already captured.If 'intent=CAPTURE' only one capture per order is allowed.",
} as const;

export type ORDERALREADYCAPTURED1DescriptionEnum =
  (typeof ORDERALREADYCAPTURED1DescriptionEnum)[keyof typeof ORDERALREADYCAPTURED1DescriptionEnum];

/**
 *
 * @export
 * @interface ORDERALREADYCOMPLETED
 */
export interface ORDERALREADYCOMPLETED {
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYCOMPLETED
   */
  issue?: ORDERALREADYCOMPLETEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERALREADYCOMPLETED
   */
  description?: ORDERALREADYCOMPLETEDDescriptionEnum;
}

export const ORDERALREADYCOMPLETEDIssueEnum = {
  OrderAlreadyCompleted: 'ORDER_ALREADY_COMPLETED',
} as const;

export type ORDERALREADYCOMPLETEDIssueEnum =
  (typeof ORDERALREADYCOMPLETEDIssueEnum)[keyof typeof ORDERALREADYCOMPLETEDIssueEnum];
export const ORDERALREADYCOMPLETEDDescriptionEnum = {
  TheOrderCannotBePatchedAfterItIsCompleted:
    'The order cannot be patched after it is completed.',
} as const;

export type ORDERALREADYCOMPLETEDDescriptionEnum =
  (typeof ORDERALREADYCOMPLETEDDescriptionEnum)[keyof typeof ORDERALREADYCOMPLETEDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERCANNOTBECONFIRMED
 */
export interface ORDERCANNOTBECONFIRMED {
  /**
   *
   * @type {string}
   * @memberof ORDERCANNOTBECONFIRMED
   */
  issue?: ORDERCANNOTBECONFIRMEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERCANNOTBECONFIRMED
   */
  description?: ORDERCANNOTBECONFIRMEDDescriptionEnum;
}

export const ORDERCANNOTBECONFIRMEDIssueEnum = {
  OrderCannotBeConfirmed: 'ORDER_CANNOT_BE_CONFIRMED',
} as const;

export type ORDERCANNOTBECONFIRMEDIssueEnum =
  (typeof ORDERCANNOTBECONFIRMEDIssueEnum)[keyof typeof ORDERCANNOTBECONFIRMEDIssueEnum];
export const ORDERCANNOTBECONFIRMEDDescriptionEnum = {
  AnOrderWithStatusCompletedCannotBeConfirmedAgain:
    "An order with status = 'COMPLETED' cannot be confirmed again.",
} as const;

export type ORDERCANNOTBECONFIRMEDDescriptionEnum =
  (typeof ORDERCANNOTBECONFIRMEDDescriptionEnum)[keyof typeof ORDERCANNOTBECONFIRMEDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERCANNOTBESAVED
 */
export interface ORDERCANNOTBESAVED {
  /**
   *
   * @type {string}
   * @memberof ORDERCANNOTBESAVED
   */
  issue?: ORDERCANNOTBESAVEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERCANNOTBESAVED
   */
  description?: ORDERCANNOTBESAVEDDescriptionEnum;
}

export const ORDERCANNOTBESAVEDIssueEnum = {
  OrderCannotBeSaved: 'ORDER_CANNOT_BE_SAVED',
} as const;

export type ORDERCANNOTBESAVEDIssueEnum =
  (typeof ORDERCANNOTBESAVEDIssueEnum)[keyof typeof ORDERCANNOTBESAVEDIssueEnum];
export const ORDERCANNOTBESAVEDDescriptionEnum = {
  TheOptionToSaveAnOrderIsOnlyAvailableIfTheIntentIsAuthorizeAndProcessingInstructionUsesOneOfTheOrderSavedOptionsForExampleIntentAuthorizeProcessingInstructionOrderSavedExplicitlyPleaseChangeTheIntentAndOrProcessingInstructionAndTryAgain:
    'The option to save an order is only available if the `intent` is AUTHORIZE and `processing_instruction` uses one of the `ORDER_SAVED` options. For example, `intent`=AUTHORIZE, `processing_instruction`=ORDER_SAVED_EXPLICITLY. Please change the intent and/or processing_instruction` and try again.',
} as const;

export type ORDERCANNOTBESAVEDDescriptionEnum =
  (typeof ORDERCANNOTBESAVEDDescriptionEnum)[keyof typeof ORDERCANNOTBESAVEDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERCOMPLETEDORVOIDED
 */
export interface ORDERCOMPLETEDORVOIDED {
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETEDORVOIDED
   */
  issue?: ORDERCOMPLETEDORVOIDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETEDORVOIDED
   */
  description?: ORDERCOMPLETEDORVOIDEDDescriptionEnum;
}

export const ORDERCOMPLETEDORVOIDEDIssueEnum = {
  OrderCompletedOrVoided: 'ORDER_COMPLETED_OR_VOIDED',
} as const;

export type ORDERCOMPLETEDORVOIDEDIssueEnum =
  (typeof ORDERCOMPLETEDORVOIDEDIssueEnum)[keyof typeof ORDERCOMPLETEDORVOIDEDIssueEnum];
export const ORDERCOMPLETEDORVOIDEDDescriptionEnum = {
  OrderIsVoidedOrCompletedAndHenceCannotBeAuthorized:
    'Order is voided or completed and hence cannot be authorized.',
} as const;

export type ORDERCOMPLETEDORVOIDEDDescriptionEnum =
  (typeof ORDERCOMPLETEDORVOIDEDDescriptionEnum)[keyof typeof ORDERCOMPLETEDORVOIDEDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERCOMPLETEONPAYMENTAPPROVAL
 */
export interface ORDERCOMPLETEONPAYMENTAPPROVAL {
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETEONPAYMENTAPPROVAL
   */
  issue?: ORDERCOMPLETEONPAYMENTAPPROVALIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETEONPAYMENTAPPROVAL
   */
  description?: ORDERCOMPLETEONPAYMENTAPPROVALDescriptionEnum;
}

export const ORDERCOMPLETEONPAYMENTAPPROVALIssueEnum = {
  OrderCompleteOnPaymentApproval: 'ORDER_COMPLETE_ON_PAYMENT_APPROVAL',
} as const;

export type ORDERCOMPLETEONPAYMENTAPPROVALIssueEnum =
  (typeof ORDERCOMPLETEONPAYMENTAPPROVALIssueEnum)[keyof typeof ORDERCOMPLETEONPAYMENTAPPROVALIssueEnum];
export const ORDERCOMPLETEONPAYMENTAPPROVALDescriptionEnum = {
  AProcessingInstructionOfOrderCompleteOnPaymentApprovalIsRequiredForTheSpecifiedPaymentSourcePleaseReferToTheIntegrationGuideHttpsDeveloperPaypalComDocsLimitedReleaseAlternativePaymentMethodsWithOrdersForMoreDetails:
    'A processing_instruction of `ORDER_COMPLETE_ON_PAYMENT_APPROVAL` is required for the specified payment_source. Please refer to the integration guide https://developer.paypal.com/docs/limited-release/alternative-payment-methods-with-orders/ for more details',
} as const;

export type ORDERCOMPLETEONPAYMENTAPPROVALDescriptionEnum =
  (typeof ORDERCOMPLETEONPAYMENTAPPROVALDescriptionEnum)[keyof typeof ORDERCOMPLETEONPAYMENTAPPROVALDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERCOMPLETEONPAYMENTAPPROVAL1
 */
export interface ORDERCOMPLETEONPAYMENTAPPROVAL1 {
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETEONPAYMENTAPPROVAL1
   */
  issue?: ORDERCOMPLETEONPAYMENTAPPROVAL1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETEONPAYMENTAPPROVAL1
   */
  description?: ORDERCOMPLETEONPAYMENTAPPROVAL1DescriptionEnum;
}

export const ORDERCOMPLETEONPAYMENTAPPROVAL1IssueEnum = {
  OrderCompleteOnPaymentApproval: 'ORDER_COMPLETE_ON_PAYMENT_APPROVAL',
} as const;

export type ORDERCOMPLETEONPAYMENTAPPROVAL1IssueEnum =
  (typeof ORDERCOMPLETEONPAYMENTAPPROVAL1IssueEnum)[keyof typeof ORDERCOMPLETEONPAYMENTAPPROVAL1IssueEnum];
export const ORDERCOMPLETEONPAYMENTAPPROVAL1DescriptionEnum = {
  AProcessingInstructionOfOrderCompleteOnPaymentApprovalIsRequiredForTheSpecifiedPaymentSource:
    'A processing_instruction of `ORDER_COMPLETE_ON_PAYMENT_APPROVAL` is required for the specified payment_source.',
} as const;

export type ORDERCOMPLETEONPAYMENTAPPROVAL1DescriptionEnum =
  (typeof ORDERCOMPLETEONPAYMENTAPPROVAL1DescriptionEnum)[keyof typeof ORDERCOMPLETEONPAYMENTAPPROVAL1DescriptionEnum];

/**
 *
 * @export
 * @interface ORDERCOMPLETIONINPROGRESS
 */
export interface ORDERCOMPLETIONINPROGRESS {
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETIONINPROGRESS
   */
  issue?: ORDERCOMPLETIONINPROGRESSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERCOMPLETIONINPROGRESS
   */
  description?: ORDERCOMPLETIONINPROGRESSDescriptionEnum;
}

export const ORDERCOMPLETIONINPROGRESSIssueEnum = {
  OrderCompletionInProgress: 'ORDER_COMPLETION_IN_PROGRESS',
} as const;

export type ORDERCOMPLETIONINPROGRESSIssueEnum =
  (typeof ORDERCOMPLETIONINPROGRESSIssueEnum)[keyof typeof ORDERCOMPLETIONINPROGRESSIssueEnum];
export const ORDERCOMPLETIONINPROGRESSDescriptionEnum = {
  TheOrderWasCreatedWithProcessingInstructionOfOrderCompleteOnPaymentApprovalTheCustomerHasApprovedThePaymentAndPayPalIsStillInTheProcessOfCapturingTheOrderOnYourBehalfAsInstructedPleaseTryYourRequestAgain:
    'The order was created with processing_instruction of ORDER_COMPLETE_ON_PAYMENT_APPROVAL. The customer has approved the payment and PayPal is still in the process of capturing the order on your behalf as instructed. Please try your request again.',
} as const;

export type ORDERCOMPLETIONINPROGRESSDescriptionEnum =
  (typeof ORDERCOMPLETIONINPROGRESSDescriptionEnum)[keyof typeof ORDERCOMPLETIONINPROGRESSDescriptionEnum];

/**
 *
 * @export
 * @interface ORDEREXPIRED
 */
export interface ORDEREXPIRED {
  /**
   *
   * @type {string}
   * @memberof ORDEREXPIRED
   */
  issue?: ORDEREXPIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDEREXPIRED
   */
  description?: ORDEREXPIREDDescriptionEnum;
}

export const ORDEREXPIREDIssueEnum = {
  OrderExpired: 'ORDER_EXPIRED',
} as const;

export type ORDEREXPIREDIssueEnum =
  (typeof ORDEREXPIREDIssueEnum)[keyof typeof ORDEREXPIREDIssueEnum];
export const ORDEREXPIREDDescriptionEnum = {
  OrderIsExpiredAndHenceCannotBeAuthorizedPleaseContactCustomerSupportIfYouNeedToIncreaseYourOrderValidityPeriod:
    'Order is expired and hence cannot be authorized. Please contact Customer Support if you need to increase your order validity period.',
} as const;

export type ORDEREXPIREDDescriptionEnum =
  (typeof ORDEREXPIREDDescriptionEnum)[keyof typeof ORDEREXPIREDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERISPENDINGAPPROVAL
 */
export interface ORDERISPENDINGAPPROVAL {
  /**
   *
   * @type {string}
   * @memberof ORDERISPENDINGAPPROVAL
   */
  issue?: ORDERISPENDINGAPPROVALIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERISPENDINGAPPROVAL
   */
  description?: ORDERISPENDINGAPPROVALDescriptionEnum;
}

export const ORDERISPENDINGAPPROVALIssueEnum = {
  OrderIsPendingApproval: 'ORDER_IS_PENDING_APPROVAL',
} as const;

export type ORDERISPENDINGAPPROVALIssueEnum =
  (typeof ORDERISPENDINGAPPROVALIssueEnum)[keyof typeof ORDERISPENDINGAPPROVALIssueEnum];
export const ORDERISPENDINGAPPROVALDescriptionEnum = {
  TheOrderWasConfirmedAndPayerActionCompletedButOrderApprovalProcessingFromPayPalIsPendingNoActionIsNeededFromPayeeOrPayerPleaseWaitUntilOrderStatusChangesToApproved:
    "The order was confirmed and payer action completed but order approval processing from PayPal is pending. No action is needed from Payee or Payer. Please wait until order status changes to 'APPROVED'.",
} as const;

export type ORDERISPENDINGAPPROVALDescriptionEnum =
  (typeof ORDERISPENDINGAPPROVALDescriptionEnum)[keyof typeof ORDERISPENDINGAPPROVALDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERNOTAPPROVED
 */
export interface ORDERNOTAPPROVED {
  /**
   *
   * @type {string}
   * @memberof ORDERNOTAPPROVED
   */
  issue?: ORDERNOTAPPROVEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERNOTAPPROVED
   */
  description?: ORDERNOTAPPROVEDDescriptionEnum;
}

export const ORDERNOTAPPROVEDIssueEnum = {
  OrderNotApproved: 'ORDER_NOT_APPROVED',
} as const;

export type ORDERNOTAPPROVEDIssueEnum =
  (typeof ORDERNOTAPPROVEDIssueEnum)[keyof typeof ORDERNOTAPPROVEDIssueEnum];
export const ORDERNOTAPPROVEDDescriptionEnum = {
  PayerHasNotYetApprovedTheOrderForPaymentPleaseRedirectThePayerToTheRelapproveUrlReturnedAsPartOfTheHateoasLinksWithinTheCreateOrderCall:
    "Payer has not yet approved the Order for payment. Please redirect the payer to the 'rel':'approve' url returned as part of the HATEOAS links within the Create Order call.",
} as const;

export type ORDERNOTAPPROVEDDescriptionEnum =
  (typeof ORDERNOTAPPROVEDDescriptionEnum)[keyof typeof ORDERNOTAPPROVEDDescriptionEnum];

/**
 *
 * @export
 * @interface ORDERNOTAPPROVED1
 */
export interface ORDERNOTAPPROVED1 {
  /**
   *
   * @type {string}
   * @memberof ORDERNOTAPPROVED1
   */
  issue?: ORDERNOTAPPROVED1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof ORDERNOTAPPROVED1
   */
  description?: ORDERNOTAPPROVED1DescriptionEnum;
}

export const ORDERNOTAPPROVED1IssueEnum = {
  OrderNotApproved: 'ORDER_NOT_APPROVED',
} as const;

export type ORDERNOTAPPROVED1IssueEnum =
  (typeof ORDERNOTAPPROVED1IssueEnum)[keyof typeof ORDERNOTAPPROVED1IssueEnum];
export const ORDERNOTAPPROVED1DescriptionEnum = {
  PayerHasNotYetApprovedTheOrderForPaymentPleaseRedirectThePayerToTheRelapproveUrlReturnedAsPartOfTheHateoasLinksWithinTheCreateOrderCallOrProvideAValidPaymentSourceInTheRequest:
    "Payer has not yet approved the Order for payment. Please redirect the payer to the 'rel':'approve' url returned as part of the HATEOAS links within the Create Order call or provide a valid `payment_source` in the request.",
} as const;

export type ORDERNOTAPPROVED1DescriptionEnum =
  (typeof ORDERNOTAPPROVED1DescriptionEnum)[keyof typeof ORDERNOTAPPROVED1DescriptionEnum];

/**
 * The order details.
 * @export
 * @interface Order
 */
export interface Order {
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Order
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Order
   */
  update_time?: string;
  /**
   * The ID of the order.
   * @type {string}
   * @memberof Order
   */
  id?: string;
  /**
   *
   * @type {PaymentSourceResponse}
   * @memberof Order
   */
  payment_source?: PaymentSourceResponse;
  /**
   *
   * @type {CheckoutPaymentIntent}
   * @memberof Order
   */
  intent?: CheckoutPaymentIntent;
  /**
   *
   * @type {ProcessingInstruction}
   * @memberof Order
   */
  processing_instruction?: ProcessingInstruction;
  /**
   *
   * @type {Payer}
   * @memberof Order
   */
  payer?: Payer;
  /**
   * An array of purchase units. Each purchase unit establishes a contract between a customer and merchant. Each purchase unit represents either a full or partial order that the customer intends to purchase from the merchant.
   * @type {Array<PurchaseUnit>}
   * @memberof Order
   */
  purchase_units?: Array<PurchaseUnit>;
  /**
   *
   * @type {OrderStatus}
   * @memberof Order
   */
  status?: OrderStatus;
  /**
   * An array of request-related HATEOAS links. To complete payer approval, use the `approve` link to redirect the payer. The API caller has 3 hours (default setting, this which can be changed by your account manager to 24/48/72 hours to accommodate your use case) from the time the order is created, to redirect your payer. Once redirected, the API caller has 3 hours for the payer to approve the order and either authorize or capture the order. If you are not using the PayPal JavaScript SDK to initiate PayPal Checkout (in context) ensure that you include `application_context.return_url` is specified or you will get \"We\'re sorry, Things don\'t appear to be working at the moment\" after the payer approves the payment.
   * @type {Array<LinkDescription>}
   * @memberof Order
   */
  links?: Array<LinkDescription>;
}

/**
 *
 * @export
 * @interface OrderAllOf
 */
export interface OrderAllOf {
  /**
   * The ID of the order.
   * @type {string}
   * @memberof OrderAllOf
   */
  id?: string;
  /**
   *
   * @type {PaymentSourceResponse}
   * @memberof OrderAllOf
   */
  payment_source?: PaymentSourceResponse;
  /**
   *
   * @type {CheckoutPaymentIntent}
   * @memberof OrderAllOf
   */
  intent?: CheckoutPaymentIntent;
  /**
   *
   * @type {ProcessingInstruction}
   * @memberof OrderAllOf
   */
  processing_instruction?: ProcessingInstruction;
  /**
   *
   * @type {Payer}
   * @memberof OrderAllOf
   */
  payer?: Payer;
  /**
   * An array of purchase units. Each purchase unit establishes a contract between a customer and merchant. Each purchase unit represents either a full or partial order that the customer intends to purchase from the merchant.
   * @type {Array<PurchaseUnit>}
   * @memberof OrderAllOf
   */
  purchase_units?: Array<PurchaseUnit>;
  /**
   *
   * @type {OrderStatus}
   * @memberof OrderAllOf
   */
  status?: OrderStatus;
  /**
   * An array of request-related HATEOAS links. To complete payer approval, use the `approve` link to redirect the payer. The API caller has 3 hours (default setting, this which can be changed by your account manager to 24/48/72 hours to accommodate your use case) from the time the order is created, to redirect your payer. Once redirected, the API caller has 3 hours for the payer to approve the order and either authorize or capture the order. If you are not using the PayPal JavaScript SDK to initiate PayPal Checkout (in context) ensure that you include `application_context.return_url` is specified or you will get \"We\'re sorry, Things don\'t appear to be working at the moment\" after the payer approves the payment.
   * @type {Array<LinkDescription>}
   * @memberof OrderAllOf
   */
  links?: Array<LinkDescription>;
}

/**
 * Customizes the payer experience during the approval process for the payment with PayPal.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>brand_name</code> and <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>
 * @export
 * @interface OrderApplicationContext
 */
export interface OrderApplicationContext {
  /**
   * DEPRECATED. The label that overrides the business name in the PayPal account on the PayPal site. The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.brand_name`). Please specify this field in the `experience_context` object instead of the `application_context` object.
   * @type {string}
   * @memberof OrderApplicationContext
   */
  brand_name?: string;
  /**
   * The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).
   * @type {string}
   * @memberof OrderApplicationContext
   */
  locale?: string;
  /**
   * DEPRECATED. DEPRECATED. The type of landing page to show on the PayPal site for customer checkout.  The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.landing_page`). Please specify this field in the `experience_context` object instead of the `application_context` object.
   * @type {string}
   * @memberof OrderApplicationContext
   * @deprecated
   */
  landing_page?: OrderApplicationContextLandingPageEnum;
  /**
   * DEPRECATED. DEPRECATED. The shipping preference:<ul><li>Displays the shipping address to the customer.</li><li>Enables the customer to choose an address on the PayPal site.</li><li>Restricts the customer from changing the address during the payment-approval process.</li></ul>.  The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.shipping_preference`). Please specify this field in the `experience_context` object instead of the `application_context` object.
   * @type {string}
   * @memberof OrderApplicationContext
   * @deprecated
   */
  shipping_preference?: OrderApplicationContextShippingPreferenceEnum;
  /**
   * DEPRECATED. Configures a <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow.  The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.user_action`). Please specify this field in the `experience_context` object instead of the `application_context` object.
   * @type {string}
   * @memberof OrderApplicationContext
   */
  user_action?: OrderApplicationContextUserActionEnum;
  /**
   *
   * @type {PaymentMethod}
   * @memberof OrderApplicationContext
   */
  payment_method?: PaymentMethod;
  /**
   * DEPRECATED. The URL where the customer is redirected after the customer approves the payment. The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.return_url`). Please specify this field in the `experience_context` object instead of the `application_context` object.
   * @type {string}
   * @memberof OrderApplicationContext
   */
  return_url?: string;
  /**
   * DEPRECATED. The URL where the customer is redirected after the customer cancels the payment. The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.cancel_url`). Please specify this field in the `experience_context` object instead of the `application_context` object.
   * @type {string}
   * @memberof OrderApplicationContext
   */
  cancel_url?: string;
  /**
   *
   * @type {StoredPaymentSource}
   * @memberof OrderApplicationContext
   */
  stored_payment_source?: StoredPaymentSource;
}

export const OrderApplicationContextLandingPageEnum = {
  Login: 'LOGIN',
  Billing: 'BILLING',
  NoPreference: 'NO_PREFERENCE',
} as const;

export type OrderApplicationContextLandingPageEnum =
  (typeof OrderApplicationContextLandingPageEnum)[keyof typeof OrderApplicationContextLandingPageEnum];
export const OrderApplicationContextShippingPreferenceEnum = {
  GetFromFile: 'GET_FROM_FILE',
  NoShipping: 'NO_SHIPPING',
  SetProvidedAddress: 'SET_PROVIDED_ADDRESS',
} as const;

export type OrderApplicationContextShippingPreferenceEnum =
  (typeof OrderApplicationContextShippingPreferenceEnum)[keyof typeof OrderApplicationContextShippingPreferenceEnum];
export const OrderApplicationContextUserActionEnum = {
  Continue: 'CONTINUE',
  PayNow: 'PAY_NOW',
} as const;

export type OrderApplicationContextUserActionEnum =
  (typeof OrderApplicationContextUserActionEnum)[keyof typeof OrderApplicationContextUserActionEnum];

/**
 * The authorization of an order request.
 * @export
 * @interface OrderAuthorizeRequest
 */
export interface OrderAuthorizeRequest {
  /**
   *
   * @type {PaymentSource}
   * @memberof OrderAuthorizeRequest
   */
  payment_source?: PaymentSource;
}
/**
 * The order authorize response.
 * @export
 * @interface OrderAuthorizeResponse
 */
export interface OrderAuthorizeResponse {
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof OrderAuthorizeResponse
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof OrderAuthorizeResponse
   */
  update_time?: string;
  /**
   * The ID of the order.
   * @type {string}
   * @memberof OrderAuthorizeResponse
   */
  id?: string;
  /**
   *
   * @type {PaymentSourceResponse}
   * @memberof OrderAuthorizeResponse
   */
  payment_source?: PaymentSourceResponse;
  /**
   *
   * @type {CheckoutPaymentIntent}
   * @memberof OrderAuthorizeResponse
   */
  intent?: CheckoutPaymentIntent;
  /**
   *
   * @type {ProcessingInstruction}
   * @memberof OrderAuthorizeResponse
   */
  processing_instruction?: ProcessingInstruction;
  /**
   *
   * @type {Payer}
   * @memberof OrderAuthorizeResponse
   */
  payer?: Payer;
  /**
   * An array of purchase units. Each purchase unit establishes a contract between a customer and merchant. Each purchase unit represents either a full or partial order that the customer intends to purchase from the merchant.
   * @type {Array<PurchaseUnit>}
   * @memberof OrderAuthorizeResponse
   */
  purchase_units?: Array<PurchaseUnit>;
  /**
   *
   * @type {OrderStatus}
   * @memberof OrderAuthorizeResponse
   */
  status?: OrderStatus;
  /**
   * An array of request-related HATEOAS links. To complete payer approval, use the `approve` link to redirect the payer. The API caller has 3 hours (default setting, this which can be changed by your account manager to 24/48/72 hours to accommodate your use case) from the time the order is created, to redirect your payer. Once redirected, the API caller has 3 hours for the payer to approve the order and either authorize or capture the order. If you are not using the PayPal JavaScript SDK to initiate PayPal Checkout (in context) ensure that you include `application_context.return_url` is specified or you will get \"We\'re sorry, Things don\'t appear to be working at the moment\" after the payer approves the payment.
   * @type {Array<LinkDescription>}
   * @memberof OrderAuthorizeResponse
   */
  links?: Array<LinkDescription>;
}

/**
 * Completes an capture payment for an order.
 * @export
 * @interface OrderCaptureRequest
 */
export interface OrderCaptureRequest {
  /**
   *
   * @type {PaymentSource}
   * @memberof OrderCaptureRequest
   */
  payment_source?: PaymentSource;
}
/**
 * Customizes the payer confirmation experience.
 * @export
 * @interface OrderConfirmApplicationContext
 */
export interface OrderConfirmApplicationContext {
  /**
   * Label to present to your payer as part of the PayPal hosted web experience.
   * @type {string}
   * @memberof OrderConfirmApplicationContext
   */
  brand_name?: string;
  /**
   * The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).
   * @type {string}
   * @memberof OrderConfirmApplicationContext
   */
  locale?: string;
  /**
   * The URL where the customer is redirected after the customer approves the payment.
   * @type {string}
   * @memberof OrderConfirmApplicationContext
   */
  return_url?: string;
  /**
   * The URL where the customer is redirected after the customer cancels the payment.
   * @type {string}
   * @memberof OrderConfirmApplicationContext
   */
  cancel_url?: string;
  /**
   *
   * @type {StoredPaymentSource}
   * @memberof OrderConfirmApplicationContext
   */
  stored_payment_source?: StoredPaymentSource;
}
/**
 * The order request details.
 * @export
 * @interface OrderRequest
 */
export interface OrderRequest {
  /**
   *
   * @type {CheckoutPaymentIntent}
   * @memberof OrderRequest
   */
  intent: CheckoutPaymentIntent;
  /**
   *
   * @type {Payer}
   * @memberof OrderRequest
   */
  payer?: Payer;
  /**
   * An array of purchase units. Each purchase unit establishes a contract between a payer and the payee. Each purchase unit represents either a full or partial order that the payer intends to purchase from the payee.
   * @type {Array<PurchaseUnitRequest>}
   * @memberof OrderRequest
   */
  purchase_units: Array<PurchaseUnitRequest>;
  /**
   *
   * @type {PaymentSource}
   * @memberof OrderRequest
   */
  payment_source?: PaymentSource;
  /**
   *
   * @type {OrderApplicationContext}
   * @memberof OrderRequest
   */
  application_context?: OrderApplicationContext;
}

/**
 * The order status.
 * @export
 * @enum {string}
 */

export const OrderStatus = {
  Created: 'CREATED',
  Saved: 'SAVED',
  Approved: 'APPROVED',
  Voided: 'VOIDED',
  Completed: 'COMPLETED',
  PayerActionRequired: 'PAYER_ACTION_REQUIRED',
} as const;

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus];

/**
 * The tracking details of an order.
 * @export
 * @interface OrderTrackerRequest
 */
export interface OrderTrackerRequest {
  /**
   * The PayPal transaction ID.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  transaction_id: string;
  /**
   * The tracking number for the shipment. This property supports Unicode.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  tracking_number?: string;
  /**
   *
   * @type {ShipmentTrackingNumberType}
   * @memberof OrderTrackerRequest
   */
  tracking_number_type?: ShipmentTrackingNumberType;
  /**
   *
   * @type {ShipmentTrackingStatus}
   * @memberof OrderTrackerRequest
   */
  status: ShipmentTrackingStatus;
  /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  shipment_date?: string;
  /**
   *
   * @type {ShipmentCarrier}
   * @memberof OrderTrackerRequest
   */
  carrier?: ShipmentCarrier;
  /**
   * The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  carrier_name_other?: string;
  /**
   * The postage payment ID. This property supports Unicode.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  postage_payment_id?: string;
  /**
   * If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
   * @type {boolean}
   * @memberof OrderTrackerRequest
   */
  notify_buyer?: boolean;
  /**
   * The quantity of items shipped.
   * @type {number}
   * @memberof OrderTrackerRequest
   */
  quantity?: number;
  /**
   * Indicates whether the carrier validated the tracking number.
   * @type {boolean}
   * @memberof OrderTrackerRequest
   */
  tracking_number_validated?: boolean;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  last_updated_time?: string;
  /**
   * To denote whether the shipment is sent forward to the receiver or returned back.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  shipment_direction?: OrderTrackerRequestShipmentDirectionEnum;
  /**
   * To denote which party uploaded the shipment tracking info.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  shipment_uploader?: OrderTrackerRequestShipmentUploaderEnum;
  /**
   * The PayPal capture ID.
   * @type {string}
   * @memberof OrderTrackerRequest
   */
  capture_id: string;
  /**
   * If true, sends an email notification to the payer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
   * @type {boolean}
   * @memberof OrderTrackerRequest
   */
  notify_payer?: boolean;
  /**
   * An array of details of items in the shipment.
   * @type {Array<TrackerItem>}
   * @memberof OrderTrackerRequest
   */
  items?: Array<TrackerItem>;
}

export const OrderTrackerRequestShipmentDirectionEnum = {
  Forward: 'FORWARD',
  Return: 'RETURN',
} as const;

export type OrderTrackerRequestShipmentDirectionEnum =
  (typeof OrderTrackerRequestShipmentDirectionEnum)[keyof typeof OrderTrackerRequestShipmentDirectionEnum];
export const OrderTrackerRequestShipmentUploaderEnum = {
  Merchant: 'MERCHANT',
  Consumer: 'CONSUMER',
  Partner: 'PARTNER',
} as const;

export type OrderTrackerRequestShipmentUploaderEnum =
  (typeof OrderTrackerRequestShipmentUploaderEnum)[keyof typeof OrderTrackerRequestShipmentUploaderEnum];

/**
 *
 * @export
 * @interface OrderTrackerRequestAllOf
 */
export interface OrderTrackerRequestAllOf {
  /**
   * The PayPal capture ID.
   * @type {string}
   * @memberof OrderTrackerRequestAllOf
   */
  capture_id: string;
  /**
   * If true, sends an email notification to the payer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
   * @type {boolean}
   * @memberof OrderTrackerRequestAllOf
   */
  notify_payer?: boolean;
  /**
   * An array of details of items in the shipment.
   * @type {Array<TrackerItem>}
   * @memberof OrderTrackerRequestAllOf
   */
  items?: Array<TrackerItem>;
}
/**
 *
 * @export
 * @interface OrdersAuthorize400
 */
export interface OrdersAuthorize400 {
  /**
   *
   * @type {Array<OrdersAuthorize400DetailsInner>}
   * @memberof OrdersAuthorize400
   */
  details?: Array<OrdersAuthorize400DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersAuthorize400DetailsInner
 */
export interface OrdersAuthorize400DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize400DetailsInner
   */
  issue?: OrdersAuthorize400DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize400DetailsInner
   */
  description?: OrdersAuthorize400DetailsInnerDescriptionEnum;
}

export const OrdersAuthorize400DetailsInnerIssueEnum = {
  MalformedRequestJson: 'MALFORMED_REQUEST_JSON',
} as const;

export type OrdersAuthorize400DetailsInnerIssueEnum =
  (typeof OrdersAuthorize400DetailsInnerIssueEnum)[keyof typeof OrdersAuthorize400DetailsInnerIssueEnum];
export const OrdersAuthorize400DetailsInnerDescriptionEnum = {
  TheRequestJsonIsNotWellFormed: 'The request JSON is not well formed.',
} as const;

export type OrdersAuthorize400DetailsInnerDescriptionEnum =
  (typeof OrdersAuthorize400DetailsInnerDescriptionEnum)[keyof typeof OrdersAuthorize400DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersAuthorize400Response
 */
export interface OrdersAuthorize400Response {
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize400Response
   */
  name?: OrdersAuthorize400ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize400Response
   */
  message?: OrdersAuthorize400ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersAuthorize400DetailsInner>}
   * @memberof OrdersAuthorize400Response
   */
  details?: Array<OrdersAuthorize400DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersAuthorize400Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersAuthorize400Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersAuthorize400ResponseNameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type OrdersAuthorize400ResponseNameEnum =
  (typeof OrdersAuthorize400ResponseNameEnum)[keyof typeof OrdersAuthorize400ResponseNameEnum];
export const OrdersAuthorize400ResponseMessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type OrdersAuthorize400ResponseMessageEnum =
  (typeof OrdersAuthorize400ResponseMessageEnum)[keyof typeof OrdersAuthorize400ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersAuthorize403
 */
export interface OrdersAuthorize403 {
  /**
   *
   * @type {Array<OrdersAuthorize403DetailsInner>}
   * @memberof OrdersAuthorize403
   */
  details?: Array<OrdersAuthorize403DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersAuthorize403DetailsInner
 */
export interface OrdersAuthorize403DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize403DetailsInner
   */
  issue?: OrdersAuthorize403DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize403DetailsInner
   */
  description?: OrdersAuthorize403DetailsInnerDescriptionEnum;
}

export const OrdersAuthorize403DetailsInnerIssueEnum = {
  PermissionDeniedForDonationItems: 'PERMISSION_DENIED_FOR_DONATION_ITEMS',
} as const;

export type OrdersAuthorize403DetailsInnerIssueEnum =
  (typeof OrdersAuthorize403DetailsInnerIssueEnum)[keyof typeof OrdersAuthorize403DetailsInnerIssueEnum];
export const OrdersAuthorize403DetailsInnerDescriptionEnum = {
  TheApiCallerOrPayeeHaveNotBeenGrantedAppropriatePermissionsToSendItemsCategoryAsDonationPleaseSpeakToYourAccountManagerIfYouWantToProcessTheseTypeOfItems:
    "The API Caller or Payee have not been granted appropriate permissions to send 'items.category' as 'DONATION'. Please speak to your account manager if you want to process these type of items.",
} as const;

export type OrdersAuthorize403DetailsInnerDescriptionEnum =
  (typeof OrdersAuthorize403DetailsInnerDescriptionEnum)[keyof typeof OrdersAuthorize403DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersAuthorize403Response
 */
export interface OrdersAuthorize403Response {
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize403Response
   */
  name?: OrdersAuthorize403ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize403Response
   */
  message?: OrdersAuthorize403ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersAuthorize403DetailsInner>}
   * @memberof OrdersAuthorize403Response
   */
  details?: Array<OrdersAuthorize403DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersAuthorize403Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersAuthorize403Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersAuthorize403ResponseNameEnum = {
  NotAuthorized: 'NOT_AUTHORIZED',
} as const;

export type OrdersAuthorize403ResponseNameEnum =
  (typeof OrdersAuthorize403ResponseNameEnum)[keyof typeof OrdersAuthorize403ResponseNameEnum];
export const OrdersAuthorize403ResponseMessageEnum = {
  AuthorizationFailedDueToInsufficientPermissions:
    'Authorization failed due to insufficient permissions.',
} as const;

export type OrdersAuthorize403ResponseMessageEnum =
  (typeof OrdersAuthorize403ResponseMessageEnum)[keyof typeof OrdersAuthorize403ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersAuthorize422
 */
export interface OrdersAuthorize422 {
  /**
   *
   * @type {Array<OrdersAuthorize422DetailsInner>}
   * @memberof OrdersAuthorize422
   */
  details?: Array<OrdersAuthorize422DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersAuthorize422DetailsInner
 */
export interface OrdersAuthorize422DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize422DetailsInner
   */
  issue?: OrdersAuthorize422DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize422DetailsInner
   */
  description?: OrdersAuthorize422DetailsInnerDescriptionEnum;
}

export const OrdersAuthorize422DetailsInnerIssueEnum = {
  RequiredParameterForCustomerInitiatedPayment:
    'REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT',
} as const;

export type OrdersAuthorize422DetailsInnerIssueEnum =
  (typeof OrdersAuthorize422DetailsInnerIssueEnum)[keyof typeof OrdersAuthorize422DetailsInnerIssueEnum];
export const OrdersAuthorize422DetailsInnerDescriptionEnum = {
  ThisParameterIsRequiredWhenTheCustomerIsPresentIfTheCustomerIsNotPresentIndicateSoBySendingPaymentInitiatorMerchantForDetailsSeeAHrefhttpsDeveloperPaypalComDocsApiOrdersV2DefinitionCardStoredCredentialStoredCredentialA:
    'This parameter is required when the customer is present. If the customer is not present, indicate so by sending payment_initiator=`MERCHANT`. For details, see <a href="https://developer.paypal.com/docs/api/orders/v2/#definition-card_stored_credential">Stored Credential</a>.',
} as const;

export type OrdersAuthorize422DetailsInnerDescriptionEnum =
  (typeof OrdersAuthorize422DetailsInnerDescriptionEnum)[keyof typeof OrdersAuthorize422DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersAuthorize422Response
 */
export interface OrdersAuthorize422Response {
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize422Response
   */
  name?: OrdersAuthorize422ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersAuthorize422Response
   */
  message?: OrdersAuthorize422ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersAuthorize422DetailsInner>}
   * @memberof OrdersAuthorize422Response
   */
  details?: Array<OrdersAuthorize422DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersAuthorize422Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersAuthorize422Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersAuthorize422ResponseNameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type OrdersAuthorize422ResponseNameEnum =
  (typeof OrdersAuthorize422ResponseNameEnum)[keyof typeof OrdersAuthorize422ResponseNameEnum];
export const OrdersAuthorize422ResponseMessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type OrdersAuthorize422ResponseMessageEnum =
  (typeof OrdersAuthorize422ResponseMessageEnum)[keyof typeof OrdersAuthorize422ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersCapture400
 */
export interface OrdersCapture400 {
  /**
   *
   * @type {Array<OrdersCapture400DetailsInner>}
   * @memberof OrdersCapture400
   */
  details?: Array<OrdersCapture400DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersCapture400DetailsInner
 */
export interface OrdersCapture400DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersCapture400DetailsInner
   */
  issue?: OrdersCapture400DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCapture400DetailsInner
   */
  description?: OrdersCapture400DetailsInnerDescriptionEnum;
}

export const OrdersCapture400DetailsInnerIssueEnum = {
  MalformedRequestJson: 'MALFORMED_REQUEST_JSON',
} as const;

export type OrdersCapture400DetailsInnerIssueEnum =
  (typeof OrdersCapture400DetailsInnerIssueEnum)[keyof typeof OrdersCapture400DetailsInnerIssueEnum];
export const OrdersCapture400DetailsInnerDescriptionEnum = {
  TheRequestJsonIsNotWellFormed: 'The request JSON is not well formed.',
} as const;

export type OrdersCapture400DetailsInnerDescriptionEnum =
  (typeof OrdersCapture400DetailsInnerDescriptionEnum)[keyof typeof OrdersCapture400DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersCapture400Response
 */
export interface OrdersCapture400Response {
  /**
   *
   * @type {string}
   * @memberof OrdersCapture400Response
   */
  name?: OrdersCapture400ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCapture400Response
   */
  message?: OrdersCapture400ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersCapture400DetailsInner>}
   * @memberof OrdersCapture400Response
   */
  details?: Array<OrdersCapture400DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersCapture400Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersCapture400Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersCapture400ResponseNameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type OrdersCapture400ResponseNameEnum =
  (typeof OrdersCapture400ResponseNameEnum)[keyof typeof OrdersCapture400ResponseNameEnum];
export const OrdersCapture400ResponseMessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type OrdersCapture400ResponseMessageEnum =
  (typeof OrdersCapture400ResponseMessageEnum)[keyof typeof OrdersCapture400ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersCapture403
 */
export interface OrdersCapture403 {
  /**
   *
   * @type {Array<OrdersCapture403DetailsInner>}
   * @memberof OrdersCapture403
   */
  details?: Array<OrdersCapture403DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersCapture403DetailsInner
 */
export interface OrdersCapture403DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersCapture403DetailsInner
   */
  issue?: OrdersCapture403DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCapture403DetailsInner
   */
  description?: OrdersCapture403DetailsInnerDescriptionEnum;
}

export const OrdersCapture403DetailsInnerIssueEnum = {
  PermissionDeniedForDonationItems: 'PERMISSION_DENIED_FOR_DONATION_ITEMS',
} as const;

export type OrdersCapture403DetailsInnerIssueEnum =
  (typeof OrdersCapture403DetailsInnerIssueEnum)[keyof typeof OrdersCapture403DetailsInnerIssueEnum];
export const OrdersCapture403DetailsInnerDescriptionEnum = {
  TheApiCallerOrPayeeHaveNotBeenGrantedAppropriatePermissionsToSendItemsCategoryAsDonationPleaseSpeakToYourAccountManagerIfYouWantToProcessTheseTypeOfItems:
    "The API Caller or Payee have not been granted appropriate permissions to send 'items.category' as 'DONATION'. Please speak to your account manager if you want to process these type of items.",
} as const;

export type OrdersCapture403DetailsInnerDescriptionEnum =
  (typeof OrdersCapture403DetailsInnerDescriptionEnum)[keyof typeof OrdersCapture403DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersCapture403Response
 */
export interface OrdersCapture403Response {
  /**
   *
   * @type {string}
   * @memberof OrdersCapture403Response
   */
  name?: OrdersCapture403ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCapture403Response
   */
  message?: OrdersCapture403ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersCapture403DetailsInner>}
   * @memberof OrdersCapture403Response
   */
  details?: Array<OrdersCapture403DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersCapture403Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersCapture403Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersCapture403ResponseNameEnum = {
  NotAuthorized: 'NOT_AUTHORIZED',
} as const;

export type OrdersCapture403ResponseNameEnum =
  (typeof OrdersCapture403ResponseNameEnum)[keyof typeof OrdersCapture403ResponseNameEnum];
export const OrdersCapture403ResponseMessageEnum = {
  AuthorizationFailedDueToInsufficientPermissions:
    'Authorization failed due to insufficient permissions.',
} as const;

export type OrdersCapture403ResponseMessageEnum =
  (typeof OrdersCapture403ResponseMessageEnum)[keyof typeof OrdersCapture403ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersCapture422
 */
export interface OrdersCapture422 {
  /**
   *
   * @type {Array<OrdersCapture422DetailsInner>}
   * @memberof OrdersCapture422
   */
  details?: Array<OrdersCapture422DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersCapture422DetailsInner
 */
export interface OrdersCapture422DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersCapture422DetailsInner
   */
  issue?: OrdersCapture422DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCapture422DetailsInner
   */
  description?: OrdersCapture422DetailsInnerDescriptionEnum;
}

export const OrdersCapture422DetailsInnerIssueEnum = {
  IdentifierNotFound: 'IDENTIFIER_NOT_FOUND',
} as const;

export type OrdersCapture422DetailsInnerIssueEnum =
  (typeof OrdersCapture422DetailsInnerIssueEnum)[keyof typeof OrdersCapture422DetailsInnerIssueEnum];
export const OrdersCapture422DetailsInnerDescriptionEnum = {
  SpecifiedIdentifierWasNotFoundPleaseVerifyTheCorrectIdentifierWasUsedAndTryTheRequestAgain:
    'Specified identifier was not found. Please verify the correct identifier was used and try the request again.',
} as const;

export type OrdersCapture422DetailsInnerDescriptionEnum =
  (typeof OrdersCapture422DetailsInnerDescriptionEnum)[keyof typeof OrdersCapture422DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersCapture422Response
 */
export interface OrdersCapture422Response {
  /**
   *
   * @type {string}
   * @memberof OrdersCapture422Response
   */
  name?: OrdersCapture422ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCapture422Response
   */
  message?: OrdersCapture422ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersCapture422DetailsInner>}
   * @memberof OrdersCapture422Response
   */
  details?: Array<OrdersCapture422DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersCapture422Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersCapture422Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersCapture422ResponseNameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type OrdersCapture422ResponseNameEnum =
  (typeof OrdersCapture422ResponseNameEnum)[keyof typeof OrdersCapture422ResponseNameEnum];
export const OrdersCapture422ResponseMessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type OrdersCapture422ResponseMessageEnum =
  (typeof OrdersCapture422ResponseMessageEnum)[keyof typeof OrdersCapture422ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersConfirm400
 */
export interface OrdersConfirm400 {
  /**
   *
   * @type {Array<OrdersConfirm400DetailsInner>}
   * @memberof OrdersConfirm400
   */
  details?: Array<OrdersConfirm400DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersConfirm400DetailsInner
 */
export interface OrdersConfirm400DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm400DetailsInner
   */
  issue?: OrdersConfirm400DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm400DetailsInner
   */
  description?: OrdersConfirm400DetailsInnerDescriptionEnum;
}

export const OrdersConfirm400DetailsInnerIssueEnum = {
  MalformedRequestJson: 'MALFORMED_REQUEST_JSON',
} as const;

export type OrdersConfirm400DetailsInnerIssueEnum =
  (typeof OrdersConfirm400DetailsInnerIssueEnum)[keyof typeof OrdersConfirm400DetailsInnerIssueEnum];
export const OrdersConfirm400DetailsInnerDescriptionEnum = {
  TheRequestJsonIsNotWellFormed: 'The request JSON is not well formed.',
} as const;

export type OrdersConfirm400DetailsInnerDescriptionEnum =
  (typeof OrdersConfirm400DetailsInnerDescriptionEnum)[keyof typeof OrdersConfirm400DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersConfirm400Response
 */
export interface OrdersConfirm400Response {
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm400Response
   */
  name?: OrdersConfirm400ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm400Response
   */
  message?: OrdersConfirm400ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersConfirm400DetailsInner>}
   * @memberof OrdersConfirm400Response
   */
  details?: Array<OrdersConfirm400DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersConfirm400Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersConfirm400Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersConfirm400ResponseNameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type OrdersConfirm400ResponseNameEnum =
  (typeof OrdersConfirm400ResponseNameEnum)[keyof typeof OrdersConfirm400ResponseNameEnum];
export const OrdersConfirm400ResponseMessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type OrdersConfirm400ResponseMessageEnum =
  (typeof OrdersConfirm400ResponseMessageEnum)[keyof typeof OrdersConfirm400ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersConfirm403Response
 */
export interface OrdersConfirm403Response {
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm403Response
   */
  name?: OrdersConfirm403ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm403Response
   */
  message?: OrdersConfirm403ResponseMessageEnum;
  /**
   *
   * @type {Array<Model403DetailsInner>}
   * @memberof OrdersConfirm403Response
   */
  details?: Array<Model403DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersConfirm403Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersConfirm403Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersConfirm403ResponseNameEnum = {
  NotAuthorized: 'NOT_AUTHORIZED',
} as const;

export type OrdersConfirm403ResponseNameEnum =
  (typeof OrdersConfirm403ResponseNameEnum)[keyof typeof OrdersConfirm403ResponseNameEnum];
export const OrdersConfirm403ResponseMessageEnum = {
  AuthorizationFailedDueToInsufficientPermissions:
    'Authorization failed due to insufficient permissions.',
} as const;

export type OrdersConfirm403ResponseMessageEnum =
  (typeof OrdersConfirm403ResponseMessageEnum)[keyof typeof OrdersConfirm403ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersConfirm422
 */
export interface OrdersConfirm422 {
  /**
   *
   * @type {Array<OrdersConfirm422DetailsInner>}
   * @memberof OrdersConfirm422
   */
  details?: Array<OrdersConfirm422DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersConfirm422DetailsInner
 */
export interface OrdersConfirm422DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm422DetailsInner
   */
  issue?: OrdersConfirm422DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm422DetailsInner
   */
  description?: OrdersConfirm422DetailsInnerDescriptionEnum;
}

export const OrdersConfirm422DetailsInnerIssueEnum = {
  TransactionLimitExceeded: 'TRANSACTION_LIMIT_EXCEEDED',
} as const;

export type OrdersConfirm422DetailsInnerIssueEnum =
  (typeof OrdersConfirm422DetailsInnerIssueEnum)[keyof typeof OrdersConfirm422DetailsInnerIssueEnum];
export const OrdersConfirm422DetailsInnerDescriptionEnum = {
  TotalPaymentAmountExceededTransactionLimit:
    'Total payment amount exceeded transaction limit.',
} as const;

export type OrdersConfirm422DetailsInnerDescriptionEnum =
  (typeof OrdersConfirm422DetailsInnerDescriptionEnum)[keyof typeof OrdersConfirm422DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersConfirm422Response
 */
export interface OrdersConfirm422Response {
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm422Response
   */
  name?: OrdersConfirm422ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersConfirm422Response
   */
  message?: OrdersConfirm422ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersConfirm422DetailsInner>}
   * @memberof OrdersConfirm422Response
   */
  details?: Array<OrdersConfirm422DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersConfirm422Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersConfirm422Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersConfirm422ResponseNameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type OrdersConfirm422ResponseNameEnum =
  (typeof OrdersConfirm422ResponseNameEnum)[keyof typeof OrdersConfirm422ResponseNameEnum];
export const OrdersConfirm422ResponseMessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type OrdersConfirm422ResponseMessageEnum =
  (typeof OrdersConfirm422ResponseMessageEnum)[keyof typeof OrdersConfirm422ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersCreate400Response
 */
export interface OrdersCreate400Response {
  /**
   *
   * @type {string}
   * @memberof OrdersCreate400Response
   */
  name?: OrdersCreate400ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCreate400Response
   */
  message?: OrdersCreate400ResponseMessageEnum;
  /**
   *
   * @type {Array<Model400DetailsInner>}
   * @memberof OrdersCreate400Response
   */
  details?: Array<Model400DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersCreate400Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersCreate400Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersCreate400ResponseNameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type OrdersCreate400ResponseNameEnum =
  (typeof OrdersCreate400ResponseNameEnum)[keyof typeof OrdersCreate400ResponseNameEnum];
export const OrdersCreate400ResponseMessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type OrdersCreate400ResponseMessageEnum =
  (typeof OrdersCreate400ResponseMessageEnum)[keyof typeof OrdersCreate400ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersCreate401Response
 */
export interface OrdersCreate401Response {
  /**
   *
   * @type {string}
   * @memberof OrdersCreate401Response
   */
  name?: OrdersCreate401ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCreate401Response
   */
  message?: OrdersCreate401ResponseMessageEnum;
  /**
   *
   * @type {Array<Model401DetailsInner>}
   * @memberof OrdersCreate401Response
   */
  details?: Array<Model401DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersCreate401Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersCreate401Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersCreate401ResponseNameEnum = {
  AuthenticationFailure: 'AUTHENTICATION_FAILURE',
} as const;

export type OrdersCreate401ResponseNameEnum =
  (typeof OrdersCreate401ResponseNameEnum)[keyof typeof OrdersCreate401ResponseNameEnum];
export const OrdersCreate401ResponseMessageEnum = {
  AuthenticationFailedDueToMissingAuthorizationHeaderOrInvalidAuthenticationCredentials:
    'Authentication failed due to missing authorization header, or invalid authentication credentials.',
} as const;

export type OrdersCreate401ResponseMessageEnum =
  (typeof OrdersCreate401ResponseMessageEnum)[keyof typeof OrdersCreate401ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersCreate422Response
 */
export interface OrdersCreate422Response {
  /**
   *
   * @type {string}
   * @memberof OrdersCreate422Response
   */
  name?: OrdersCreate422ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersCreate422Response
   */
  message?: OrdersCreate422ResponseMessageEnum;
  /**
   *
   * @type {Array<Model422DetailsInner>}
   * @memberof OrdersCreate422Response
   */
  details?: Array<Model422DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersCreate422Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersCreate422Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersCreate422ResponseNameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type OrdersCreate422ResponseNameEnum =
  (typeof OrdersCreate422ResponseNameEnum)[keyof typeof OrdersCreate422ResponseNameEnum];
export const OrdersCreate422ResponseMessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type OrdersCreate422ResponseMessageEnum =
  (typeof OrdersCreate422ResponseMessageEnum)[keyof typeof OrdersCreate422ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersGet404Response
 */
export interface OrdersGet404Response {
  /**
   *
   * @type {string}
   * @memberof OrdersGet404Response
   */
  name?: OrdersGet404ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersGet404Response
   */
  message?: OrdersGet404ResponseMessageEnum;
  /**
   *
   * @type {Array<Model404DetailsInner>}
   * @memberof OrdersGet404Response
   */
  details?: Array<Model404DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersGet404Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersGet404Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersGet404ResponseNameEnum = {
  ResourceNotFound: 'RESOURCE_NOT_FOUND',
} as const;

export type OrdersGet404ResponseNameEnum =
  (typeof OrdersGet404ResponseNameEnum)[keyof typeof OrdersGet404ResponseNameEnum];
export const OrdersGet404ResponseMessageEnum = {
  TheSpecifiedResourceDoesNotExist: 'The specified resource does not exist.',
} as const;

export type OrdersGet404ResponseMessageEnum =
  (typeof OrdersGet404ResponseMessageEnum)[keyof typeof OrdersGet404ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersPatch400
 */
export interface OrdersPatch400 {
  /**
   *
   * @type {Array<OrdersPatch400DetailsInner>}
   * @memberof OrdersPatch400
   */
  details?: Array<OrdersPatch400DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersPatch400DetailsInner
 */
export interface OrdersPatch400DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersPatch400DetailsInner
   */
  issue?: OrdersPatch400DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersPatch400DetailsInner
   */
  description?: OrdersPatch400DetailsInnerDescriptionEnum;
}

export const OrdersPatch400DetailsInnerIssueEnum = {
  MalformedRequestJson: 'MALFORMED_REQUEST_JSON',
} as const;

export type OrdersPatch400DetailsInnerIssueEnum =
  (typeof OrdersPatch400DetailsInnerIssueEnum)[keyof typeof OrdersPatch400DetailsInnerIssueEnum];
export const OrdersPatch400DetailsInnerDescriptionEnum = {
  TheRequestJsonIsNotWellFormed: 'The request JSON is not well formed.',
} as const;

export type OrdersPatch400DetailsInnerDescriptionEnum =
  (typeof OrdersPatch400DetailsInnerDescriptionEnum)[keyof typeof OrdersPatch400DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersPatch400Response
 */
export interface OrdersPatch400Response {
  /**
   *
   * @type {string}
   * @memberof OrdersPatch400Response
   */
  name?: OrdersPatch400ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersPatch400Response
   */
  message?: OrdersPatch400ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersPatch400DetailsInner>}
   * @memberof OrdersPatch400Response
   */
  details?: Array<OrdersPatch400DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersPatch400Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersPatch400Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersPatch400ResponseNameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type OrdersPatch400ResponseNameEnum =
  (typeof OrdersPatch400ResponseNameEnum)[keyof typeof OrdersPatch400ResponseNameEnum];
export const OrdersPatch400ResponseMessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type OrdersPatch400ResponseMessageEnum =
  (typeof OrdersPatch400ResponseMessageEnum)[keyof typeof OrdersPatch400ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersPatch422
 */
export interface OrdersPatch422 {
  /**
   *
   * @type {Array<OrdersPatch422DetailsInner>}
   * @memberof OrdersPatch422
   */
  details?: Array<OrdersPatch422DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersPatch422DetailsInner
 */
export interface OrdersPatch422DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersPatch422DetailsInner
   */
  issue?: OrdersPatch422DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersPatch422DetailsInner
   */
  description?: OrdersPatch422DetailsInnerDescriptionEnum;
}

export const OrdersPatch422DetailsInnerIssueEnum = {
  AmountChangeNotAllowed: 'AMOUNT_CHANGE_NOT_ALLOWED',
} as const;

export type OrdersPatch422DetailsInnerIssueEnum =
  (typeof OrdersPatch422DetailsInnerIssueEnum)[keyof typeof OrdersPatch422DetailsInnerIssueEnum];
export const OrdersPatch422DetailsInnerDescriptionEnum = {
  TheAmountSpecifiedIsDifferentFromTheAmountAuthorizedByPayer:
    'The amount specified is different from the amount authorized by payer.',
} as const;

export type OrdersPatch422DetailsInnerDescriptionEnum =
  (typeof OrdersPatch422DetailsInnerDescriptionEnum)[keyof typeof OrdersPatch422DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersPatch422Response
 */
export interface OrdersPatch422Response {
  /**
   *
   * @type {string}
   * @memberof OrdersPatch422Response
   */
  name?: OrdersPatch422ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersPatch422Response
   */
  message?: OrdersPatch422ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersPatch422DetailsInner>}
   * @memberof OrdersPatch422Response
   */
  details?: Array<OrdersPatch422DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersPatch422Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersPatch422Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersPatch422ResponseNameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type OrdersPatch422ResponseNameEnum =
  (typeof OrdersPatch422ResponseNameEnum)[keyof typeof OrdersPatch422ResponseNameEnum];
export const OrdersPatch422ResponseMessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type OrdersPatch422ResponseMessageEnum =
  (typeof OrdersPatch422ResponseMessageEnum)[keyof typeof OrdersPatch422ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersTrackCreate400
 */
export interface OrdersTrackCreate400 {
  /**
   *
   * @type {Array<OrdersTrackCreate400DetailsInner>}
   * @memberof OrdersTrackCreate400
   */
  details?: Array<OrdersTrackCreate400DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersTrackCreate400DetailsInner
 */
export interface OrdersTrackCreate400DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate400DetailsInner
   */
  issue?: OrdersTrackCreate400DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate400DetailsInner
   */
  description?: OrdersTrackCreate400DetailsInnerDescriptionEnum;
}

export const OrdersTrackCreate400DetailsInnerIssueEnum = {
  InvalidParameterSyntax: 'INVALID_PARAMETER_SYNTAX',
} as const;

export type OrdersTrackCreate400DetailsInnerIssueEnum =
  (typeof OrdersTrackCreate400DetailsInnerIssueEnum)[keyof typeof OrdersTrackCreate400DetailsInnerIssueEnum];
export const OrdersTrackCreate400DetailsInnerDescriptionEnum = {
  TheValueOfAFieldDoesNotConformToTheExpectedFormat:
    'The value of a field does not conform to the expected format.',
} as const;

export type OrdersTrackCreate400DetailsInnerDescriptionEnum =
  (typeof OrdersTrackCreate400DetailsInnerDescriptionEnum)[keyof typeof OrdersTrackCreate400DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersTrackCreate400Response
 */
export interface OrdersTrackCreate400Response {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate400Response
   */
  name?: OrdersTrackCreate400ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate400Response
   */
  message?: OrdersTrackCreate400ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersTrackCreate400DetailsInner>}
   * @memberof OrdersTrackCreate400Response
   */
  details?: Array<OrdersTrackCreate400DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersTrackCreate400Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersTrackCreate400Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersTrackCreate400ResponseNameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type OrdersTrackCreate400ResponseNameEnum =
  (typeof OrdersTrackCreate400ResponseNameEnum)[keyof typeof OrdersTrackCreate400ResponseNameEnum];
export const OrdersTrackCreate400ResponseMessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type OrdersTrackCreate400ResponseMessageEnum =
  (typeof OrdersTrackCreate400ResponseMessageEnum)[keyof typeof OrdersTrackCreate400ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersTrackCreate403
 */
export interface OrdersTrackCreate403 {
  /**
   *
   * @type {Array<OrdersTrackCreate403DetailsInner>}
   * @memberof OrdersTrackCreate403
   */
  details?: Array<OrdersTrackCreate403DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersTrackCreate403DetailsInner
 */
export interface OrdersTrackCreate403DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate403DetailsInner
   */
  issue?: OrdersTrackCreate403DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate403DetailsInner
   */
  description?: OrdersTrackCreate403DetailsInnerDescriptionEnum;
}

export const OrdersTrackCreate403DetailsInnerIssueEnum = {
  PermissionDenied: 'PERMISSION_DENIED',
} as const;

export type OrdersTrackCreate403DetailsInnerIssueEnum =
  (typeof OrdersTrackCreate403DetailsInnerIssueEnum)[keyof typeof OrdersTrackCreate403DetailsInnerIssueEnum];
export const OrdersTrackCreate403DetailsInnerDescriptionEnum = {
  YouDoNotHavePermissionToAccessOrPerformOperationsOnThisResource:
    'You do not have permission to access or perform operations on this resource.',
} as const;

export type OrdersTrackCreate403DetailsInnerDescriptionEnum =
  (typeof OrdersTrackCreate403DetailsInnerDescriptionEnum)[keyof typeof OrdersTrackCreate403DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersTrackCreate403Response
 */
export interface OrdersTrackCreate403Response {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate403Response
   */
  name?: OrdersTrackCreate403ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate403Response
   */
  message?: OrdersTrackCreate403ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersTrackCreate403DetailsInner>}
   * @memberof OrdersTrackCreate403Response
   */
  details?: Array<OrdersTrackCreate403DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersTrackCreate403Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersTrackCreate403Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersTrackCreate403ResponseNameEnum = {
  NotAuthorized: 'NOT_AUTHORIZED',
} as const;

export type OrdersTrackCreate403ResponseNameEnum =
  (typeof OrdersTrackCreate403ResponseNameEnum)[keyof typeof OrdersTrackCreate403ResponseNameEnum];
export const OrdersTrackCreate403ResponseMessageEnum = {
  AuthorizationFailedDueToInsufficientPermissions:
    'Authorization failed due to insufficient permissions.',
} as const;

export type OrdersTrackCreate403ResponseMessageEnum =
  (typeof OrdersTrackCreate403ResponseMessageEnum)[keyof typeof OrdersTrackCreate403ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersTrackCreate422
 */
export interface OrdersTrackCreate422 {
  /**
   *
   * @type {Array<OrdersTrackCreate422DetailsInner>}
   * @memberof OrdersTrackCreate422
   */
  details?: Array<OrdersTrackCreate422DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersTrackCreate422DetailsInner
 */
export interface OrdersTrackCreate422DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate422DetailsInner
   */
  issue?: OrdersTrackCreate422DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate422DetailsInner
   */
  description?: OrdersTrackCreate422DetailsInnerDescriptionEnum;
}

export const OrdersTrackCreate422DetailsInnerIssueEnum = {
  MspNotSupported: 'MSP_NOT_SUPPORTED',
} as const;

export type OrdersTrackCreate422DetailsInnerIssueEnum =
  (typeof OrdersTrackCreate422DetailsInnerIssueEnum)[keyof typeof OrdersTrackCreate422DetailsInnerIssueEnum];
export const OrdersTrackCreate422DetailsInnerDescriptionEnum = {
  MultiplePurchaseUnitsAreNotSupportedForThisOperation:
    'Multiple purchase units are not supported for this operation.',
} as const;

export type OrdersTrackCreate422DetailsInnerDescriptionEnum =
  (typeof OrdersTrackCreate422DetailsInnerDescriptionEnum)[keyof typeof OrdersTrackCreate422DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersTrackCreate422Response
 */
export interface OrdersTrackCreate422Response {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate422Response
   */
  name?: OrdersTrackCreate422ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackCreate422Response
   */
  message?: OrdersTrackCreate422ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersTrackCreate422DetailsInner>}
   * @memberof OrdersTrackCreate422Response
   */
  details?: Array<OrdersTrackCreate422DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersTrackCreate422Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersTrackCreate422Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersTrackCreate422ResponseNameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type OrdersTrackCreate422ResponseNameEnum =
  (typeof OrdersTrackCreate422ResponseNameEnum)[keyof typeof OrdersTrackCreate422ResponseNameEnum];
export const OrdersTrackCreate422ResponseMessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type OrdersTrackCreate422ResponseMessageEnum =
  (typeof OrdersTrackCreate422ResponseMessageEnum)[keyof typeof OrdersTrackCreate422ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersTrackersPatch400
 */
export interface OrdersTrackersPatch400 {
  /**
   *
   * @type {Array<OrdersTrackersPatch400DetailsInner>}
   * @memberof OrdersTrackersPatch400
   */
  details?: Array<OrdersTrackersPatch400DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersTrackersPatch400DetailsInner
 */
export interface OrdersTrackersPatch400DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch400DetailsInner
   */
  issue?: OrdersTrackersPatch400DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch400DetailsInner
   */
  description?: OrdersTrackersPatch400DetailsInnerDescriptionEnum;
}

export const OrdersTrackersPatch400DetailsInnerIssueEnum = {
  MalformedRequestJson: 'MALFORMED_REQUEST_JSON',
} as const;

export type OrdersTrackersPatch400DetailsInnerIssueEnum =
  (typeof OrdersTrackersPatch400DetailsInnerIssueEnum)[keyof typeof OrdersTrackersPatch400DetailsInnerIssueEnum];
export const OrdersTrackersPatch400DetailsInnerDescriptionEnum = {
  TheRequestJsonIsNotWellFormed: 'The request JSON is not well formed.',
} as const;

export type OrdersTrackersPatch400DetailsInnerDescriptionEnum =
  (typeof OrdersTrackersPatch400DetailsInnerDescriptionEnum)[keyof typeof OrdersTrackersPatch400DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersTrackersPatch400Response
 */
export interface OrdersTrackersPatch400Response {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch400Response
   */
  name?: OrdersTrackersPatch400ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch400Response
   */
  message?: OrdersTrackersPatch400ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersTrackersPatch400DetailsInner>}
   * @memberof OrdersTrackersPatch400Response
   */
  details?: Array<OrdersTrackersPatch400DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersTrackersPatch400Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersTrackersPatch400Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersTrackersPatch400ResponseNameEnum = {
  InvalidRequest: 'INVALID_REQUEST',
} as const;

export type OrdersTrackersPatch400ResponseNameEnum =
  (typeof OrdersTrackersPatch400ResponseNameEnum)[keyof typeof OrdersTrackersPatch400ResponseNameEnum];
export const OrdersTrackersPatch400ResponseMessageEnum = {
  RequestIsNotWellFormedSyntacticallyIncorrectOrViolatesSchema:
    'Request is not well-formed, syntactically incorrect, or violates schema.',
} as const;

export type OrdersTrackersPatch400ResponseMessageEnum =
  (typeof OrdersTrackersPatch400ResponseMessageEnum)[keyof typeof OrdersTrackersPatch400ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersTrackersPatch403
 */
export interface OrdersTrackersPatch403 {
  /**
   *
   * @type {Array<OrdersTrackCreate403DetailsInner>}
   * @memberof OrdersTrackersPatch403
   */
  details?: Array<OrdersTrackCreate403DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersTrackersPatch403Response
 */
export interface OrdersTrackersPatch403Response {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch403Response
   */
  name?: OrdersTrackersPatch403ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch403Response
   */
  message?: OrdersTrackersPatch403ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersTrackCreate403DetailsInner>}
   * @memberof OrdersTrackersPatch403Response
   */
  details?: Array<OrdersTrackCreate403DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersTrackersPatch403Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersTrackersPatch403Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersTrackersPatch403ResponseNameEnum = {
  NotAuthorized: 'NOT_AUTHORIZED',
} as const;

export type OrdersTrackersPatch403ResponseNameEnum =
  (typeof OrdersTrackersPatch403ResponseNameEnum)[keyof typeof OrdersTrackersPatch403ResponseNameEnum];
export const OrdersTrackersPatch403ResponseMessageEnum = {
  AuthorizationFailedDueToInsufficientPermissions:
    'Authorization failed due to insufficient permissions.',
} as const;

export type OrdersTrackersPatch403ResponseMessageEnum =
  (typeof OrdersTrackersPatch403ResponseMessageEnum)[keyof typeof OrdersTrackersPatch403ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersTrackersPatch404
 */
export interface OrdersTrackersPatch404 {
  /**
   *
   * @type {Array<OrdersTrackersPatch404DetailsInner>}
   * @memberof OrdersTrackersPatch404
   */
  details?: Array<OrdersTrackersPatch404DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersTrackersPatch404DetailsInner
 */
export interface OrdersTrackersPatch404DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch404DetailsInner
   */
  issue?: OrdersTrackersPatch404DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch404DetailsInner
   */
  description?: OrdersTrackersPatch404DetailsInnerDescriptionEnum;
}

export const OrdersTrackersPatch404DetailsInnerIssueEnum = {
  TrackerIdNotFound: 'TRACKER_ID_NOT_FOUND',
} as const;

export type OrdersTrackersPatch404DetailsInnerIssueEnum =
  (typeof OrdersTrackersPatch404DetailsInnerIssueEnum)[keyof typeof OrdersTrackersPatch404DetailsInnerIssueEnum];
export const OrdersTrackersPatch404DetailsInnerDescriptionEnum = {
  SpecifiedTrackerIdDoesNotExistCheckTheTrackerIdAndTryAgain:
    'Specified tracker ID does not exist. Check the tracker ID and try again.',
} as const;

export type OrdersTrackersPatch404DetailsInnerDescriptionEnum =
  (typeof OrdersTrackersPatch404DetailsInnerDescriptionEnum)[keyof typeof OrdersTrackersPatch404DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersTrackersPatch404Response
 */
export interface OrdersTrackersPatch404Response {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch404Response
   */
  name?: OrdersTrackersPatch404ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch404Response
   */
  message?: OrdersTrackersPatch404ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersTrackersPatch404DetailsInner>}
   * @memberof OrdersTrackersPatch404Response
   */
  details?: Array<OrdersTrackersPatch404DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersTrackersPatch404Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersTrackersPatch404Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersTrackersPatch404ResponseNameEnum = {
  ResourceNotFound: 'RESOURCE_NOT_FOUND',
} as const;

export type OrdersTrackersPatch404ResponseNameEnum =
  (typeof OrdersTrackersPatch404ResponseNameEnum)[keyof typeof OrdersTrackersPatch404ResponseNameEnum];
export const OrdersTrackersPatch404ResponseMessageEnum = {
  TheSpecifiedResourceDoesNotExist: 'The specified resource does not exist.',
} as const;

export type OrdersTrackersPatch404ResponseMessageEnum =
  (typeof OrdersTrackersPatch404ResponseMessageEnum)[keyof typeof OrdersTrackersPatch404ResponseMessageEnum];

/**
 *
 * @export
 * @interface OrdersTrackersPatch422
 */
export interface OrdersTrackersPatch422 {
  /**
   *
   * @type {Array<OrdersTrackersPatch422DetailsInner>}
   * @memberof OrdersTrackersPatch422
   */
  details?: Array<OrdersTrackersPatch422DetailsInner>;
}
/**
 *
 * @export
 * @interface OrdersTrackersPatch422DetailsInner
 */
export interface OrdersTrackersPatch422DetailsInner {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch422DetailsInner
   */
  issue?: OrdersTrackersPatch422DetailsInnerIssueEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch422DetailsInner
   */
  description?: OrdersTrackersPatch422DetailsInnerDescriptionEnum;
}

export const OrdersTrackersPatch422DetailsInnerIssueEnum = {
  ItemSkuMismatch: 'ITEM_SKU_MISMATCH',
} as const;

export type OrdersTrackersPatch422DetailsInnerIssueEnum =
  (typeof OrdersTrackersPatch422DetailsInnerIssueEnum)[keyof typeof OrdersTrackersPatch422DetailsInnerIssueEnum];
export const OrdersTrackersPatch422DetailsInnerDescriptionEnum = {
  ItemSkuMustMatchOneOfTheItemsSkuThatWasProvidedDuringOrderCreation:
    'Item sku must match one of the items sku that was provided during order creation.',
} as const;

export type OrdersTrackersPatch422DetailsInnerDescriptionEnum =
  (typeof OrdersTrackersPatch422DetailsInnerDescriptionEnum)[keyof typeof OrdersTrackersPatch422DetailsInnerDescriptionEnum];

/**
 *
 * @export
 * @interface OrdersTrackersPatch422Response
 */
export interface OrdersTrackersPatch422Response {
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch422Response
   */
  name?: OrdersTrackersPatch422ResponseNameEnum;
  /**
   *
   * @type {string}
   * @memberof OrdersTrackersPatch422Response
   */
  message?: OrdersTrackersPatch422ResponseMessageEnum;
  /**
   *
   * @type {Array<OrdersTrackersPatch422DetailsInner>}
   * @memberof OrdersTrackersPatch422Response
   */
  details?: Array<OrdersTrackersPatch422DetailsInner>;
  /**
   * The PayPal internal ID. Used for correlation purposes.
   * @type {string}
   * @memberof OrdersTrackersPatch422Response
   */
  debug_id?: string;
  /**
   * An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).
   * @type {Array<ErrorLinkDescription>}
   * @memberof OrdersTrackersPatch422Response
   */
  links?: Array<ErrorLinkDescription>;
}

export const OrdersTrackersPatch422ResponseNameEnum = {
  UnprocessableEntity: 'UNPROCESSABLE_ENTITY',
} as const;

export type OrdersTrackersPatch422ResponseNameEnum =
  (typeof OrdersTrackersPatch422ResponseNameEnum)[keyof typeof OrdersTrackersPatch422ResponseNameEnum];
export const OrdersTrackersPatch422ResponseMessageEnum = {
  TheRequestedActionCouldNotBePerformedSemanticallyIncorrectOrFailedBusinessValidation:
    'The requested action could not be performed, semantically incorrect, or failed business validation.',
} as const;

export type OrdersTrackersPatch422ResponseMessageEnum =
  (typeof OrdersTrackersPatch422ResponseMessageEnum)[keyof typeof OrdersTrackersPatch422ResponseMessageEnum];

/**
 * Information used to pay using P24(Przelewy24).
 * @export
 * @interface P24
 */
export interface P24 {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof P24
   */
  name?: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof P24
   */
  email?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof P24
   */
  country_code?: string;
  /**
   * P24 generated payment description.
   * @type {string}
   * @memberof P24
   */
  payment_descriptor?: string;
  /**
   * Numeric identifier of the payment scheme or bank used for the payment.
   * @type {string}
   * @memberof P24
   */
  method_id?: string;
  /**
   * Friendly name of the payment scheme or bank used for the payment.
   * @type {string}
   * @memberof P24
   */
  method_description?: string;
}
/**
 * Information needed to pay using P24 (Przelewy24).
 * @export
 * @interface P24Request
 */
export interface P24Request {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof P24Request
   */
  name: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof P24Request
   */
  email: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof P24Request
   */
  country_code: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof P24Request
   */
  experience_context?: ExperienceContextBase;
}
/**
 *
 * @export
 * @interface PATCHPATHREQUIRED
 */
export interface PATCHPATHREQUIRED {
  /**
   *
   * @type {string}
   * @memberof PATCHPATHREQUIRED
   */
  issue?: PATCHPATHREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PATCHPATHREQUIRED
   */
  description?: PATCHPATHREQUIREDDescriptionEnum;
}

export const PATCHPATHREQUIREDIssueEnum = {
  PatchPathRequired: 'PATCH_PATH_REQUIRED',
} as const;

export type PATCHPATHREQUIREDIssueEnum =
  (typeof PATCHPATHREQUIREDIssueEnum)[keyof typeof PATCHPATHREQUIREDIssueEnum];
export const PATCHPATHREQUIREDDescriptionEnum = {
  PleaseSpecifyAPathForTheFieldForWhichTheOperationNeedsToBePerformed:
    "Please specify a 'path' for the field for which the operation needs to be performed.",
} as const;

export type PATCHPATHREQUIREDDescriptionEnum =
  (typeof PATCHPATHREQUIREDDescriptionEnum)[keyof typeof PATCHPATHREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PATCHPATHREQUIRED1
 */
export interface PATCHPATHREQUIRED1 {
  /**
   *
   * @type {string}
   * @memberof PATCHPATHREQUIRED1
   */
  issue?: PATCHPATHREQUIRED1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof PATCHPATHREQUIRED1
   */
  description?: PATCHPATHREQUIRED1DescriptionEnum;
}

export const PATCHPATHREQUIRED1IssueEnum = {
  PatchPathRequired: 'PATCH_PATH_REQUIRED',
} as const;

export type PATCHPATHREQUIRED1IssueEnum =
  (typeof PATCHPATHREQUIRED1IssueEnum)[keyof typeof PATCHPATHREQUIRED1IssueEnum];
export const PATCHPATHREQUIRED1DescriptionEnum = {
  SpecifyAValueForTheFieldInWhichTheOperationNeedsToBePerformed:
    'Specify a `value` for the field in which the operation needs to be performed.',
} as const;

export type PATCHPATHREQUIRED1DescriptionEnum =
  (typeof PATCHPATHREQUIRED1DescriptionEnum)[keyof typeof PATCHPATHREQUIRED1DescriptionEnum];

/**
 *
 * @export
 * @interface PATCHVALUEREQUIRED
 */
export interface PATCHVALUEREQUIRED {
  /**
   *
   * @type {string}
   * @memberof PATCHVALUEREQUIRED
   */
  issue?: PATCHVALUEREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PATCHVALUEREQUIRED
   */
  description?: PATCHVALUEREQUIREDDescriptionEnum;
}

export const PATCHVALUEREQUIREDIssueEnum = {
  PatchValueRequired: 'PATCH_VALUE_REQUIRED',
} as const;

export type PATCHVALUEREQUIREDIssueEnum =
  (typeof PATCHVALUEREQUIREDIssueEnum)[keyof typeof PATCHVALUEREQUIREDIssueEnum];
export const PATCHVALUEREQUIREDDescriptionEnum = {
  PleaseSpecifyAValueToForTheFieldThatIsBeingPatched:
    "Please specify a 'value' to for the field that is being patched.",
} as const;

export type PATCHVALUEREQUIREDDescriptionEnum =
  (typeof PATCHVALUEREQUIREDDescriptionEnum)[keyof typeof PATCHVALUEREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PATCHVALUEREQUIRED1
 */
export interface PATCHVALUEREQUIRED1 {
  /**
   *
   * @type {string}
   * @memberof PATCHVALUEREQUIRED1
   */
  issue?: PATCHVALUEREQUIRED1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof PATCHVALUEREQUIRED1
   */
  description?: PATCHVALUEREQUIRED1DescriptionEnum;
}

export const PATCHVALUEREQUIRED1IssueEnum = {
  PatchValueRequired: 'PATCH_VALUE_REQUIRED',
} as const;

export type PATCHVALUEREQUIRED1IssueEnum =
  (typeof PATCHVALUEREQUIRED1IssueEnum)[keyof typeof PATCHVALUEREQUIRED1IssueEnum];
export const PATCHVALUEREQUIRED1DescriptionEnum = {
  SpecifyAValueForTheFieldBeingPatched:
    'Specify a `value` for the field being patched.',
} as const;

export type PATCHVALUEREQUIRED1DescriptionEnum =
  (typeof PATCHVALUEREQUIRED1DescriptionEnum)[keyof typeof PATCHVALUEREQUIRED1DescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEACCOUNTINVALID
 */
export interface PAYEEACCOUNTINVALID {
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTINVALID
   */
  issue?: PAYEEACCOUNTINVALIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTINVALID
   */
  description?: PAYEEACCOUNTINVALIDDescriptionEnum;
}

export const PAYEEACCOUNTINVALIDIssueEnum = {
  PayeeAccountInvalid: 'PAYEE_ACCOUNT_INVALID',
} as const;

export type PAYEEACCOUNTINVALIDIssueEnum =
  (typeof PAYEEACCOUNTINVALIDIssueEnum)[keyof typeof PAYEEACCOUNTINVALIDIssueEnum];
export const PAYEEACCOUNTINVALIDDescriptionEnum = {
  PayeeAccountSpecifiedIsInvalidPleaseCheckThePayeeEmailAddressOrPayeeMerchantIdSpecifiedAndTryAgainEnsureThatEitherPayeeMerchantIdOrPayeeEmailAddressIsSpecified:
    'Payee account specified is invalid. Please check the `payee.email_address` or `payee.merchant_id` specified and try again. Ensure that either  `payee.merchant_id` or `payee.email_address` is specified.',
} as const;

export type PAYEEACCOUNTINVALIDDescriptionEnum =
  (typeof PAYEEACCOUNTINVALIDDescriptionEnum)[keyof typeof PAYEEACCOUNTINVALIDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEACCOUNTLOCKEDORCLOSED
 */
export interface PAYEEACCOUNTLOCKEDORCLOSED {
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTLOCKEDORCLOSED
   */
  issue?: PAYEEACCOUNTLOCKEDORCLOSEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTLOCKEDORCLOSED
   */
  description?: PAYEEACCOUNTLOCKEDORCLOSEDDescriptionEnum;
}

export const PAYEEACCOUNTLOCKEDORCLOSEDIssueEnum = {
  PayeeAccountLockedOrClosed: 'PAYEE_ACCOUNT_LOCKED_OR_CLOSED',
} as const;

export type PAYEEACCOUNTLOCKEDORCLOSEDIssueEnum =
  (typeof PAYEEACCOUNTLOCKEDORCLOSEDIssueEnum)[keyof typeof PAYEEACCOUNTLOCKEDORCLOSEDIssueEnum];
export const PAYEEACCOUNTLOCKEDORCLOSEDDescriptionEnum = {
  TheMerchantAccountIsLockedOrClosed:
    'The merchant account is locked or closed.',
} as const;

export type PAYEEACCOUNTLOCKEDORCLOSEDDescriptionEnum =
  (typeof PAYEEACCOUNTLOCKEDORCLOSEDDescriptionEnum)[keyof typeof PAYEEACCOUNTLOCKEDORCLOSEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEACCOUNTNOTVERIFIED
 */
export interface PAYEEACCOUNTNOTVERIFIED {
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTNOTVERIFIED
   */
  issue?: PAYEEACCOUNTNOTVERIFIEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTNOTVERIFIED
   */
  description?: PAYEEACCOUNTNOTVERIFIEDDescriptionEnum;
}

export const PAYEEACCOUNTNOTVERIFIEDIssueEnum = {
  PayeeAccountNotVerified: 'PAYEE_ACCOUNT_NOT_VERIFIED',
} as const;

export type PAYEEACCOUNTNOTVERIFIEDIssueEnum =
  (typeof PAYEEACCOUNTNOTVERIFIEDIssueEnum)[keyof typeof PAYEEACCOUNTNOTVERIFIEDIssueEnum];
export const PAYEEACCOUNTNOTVERIFIEDDescriptionEnum = {
  PayeeHasNotVerifiedTheirAccountWithPayPalTheSelectedPaymentMethodRequiresTheRecipientToHaveAVerifiedPayPalAccountBeforeTransactionsCanBeProcessedOnTheirBehalf:
    'Payee has not verified their account with PayPal. The selected payment method requires the recipient to have a verified PayPal account before transactions can be processed on their behalf.',
} as const;

export type PAYEEACCOUNTNOTVERIFIEDDescriptionEnum =
  (typeof PAYEEACCOUNTNOTVERIFIEDDescriptionEnum)[keyof typeof PAYEEACCOUNTNOTVERIFIEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEACCOUNTRESTRICTED
 */
export interface PAYEEACCOUNTRESTRICTED {
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTRESTRICTED
   */
  issue?: PAYEEACCOUNTRESTRICTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEACCOUNTRESTRICTED
   */
  description?: PAYEEACCOUNTRESTRICTEDDescriptionEnum;
}

export const PAYEEACCOUNTRESTRICTEDIssueEnum = {
  PayeeAccountRestricted: 'PAYEE_ACCOUNT_RESTRICTED',
} as const;

export type PAYEEACCOUNTRESTRICTEDIssueEnum =
  (typeof PAYEEACCOUNTRESTRICTEDIssueEnum)[keyof typeof PAYEEACCOUNTRESTRICTEDIssueEnum];
export const PAYEEACCOUNTRESTRICTEDDescriptionEnum = {
  TheMerchantAccountIsRestricted: 'The merchant account is restricted.',
} as const;

export type PAYEEACCOUNTRESTRICTEDDescriptionEnum =
  (typeof PAYEEACCOUNTRESTRICTEDDescriptionEnum)[keyof typeof PAYEEACCOUNTRESTRICTEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEBLOCKEDTRANSACTION
 */
export interface PAYEEBLOCKEDTRANSACTION {
  /**
   *
   * @type {string}
   * @memberof PAYEEBLOCKEDTRANSACTION
   */
  issue?: PAYEEBLOCKEDTRANSACTIONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEBLOCKEDTRANSACTION
   */
  description?: PAYEEBLOCKEDTRANSACTIONDescriptionEnum;
}

export const PAYEEBLOCKEDTRANSACTIONIssueEnum = {
  PayeeBlockedTransaction: 'PAYEE_BLOCKED_TRANSACTION',
} as const;

export type PAYEEBLOCKEDTRANSACTIONIssueEnum =
  (typeof PAYEEBLOCKEDTRANSACTIONIssueEnum)[keyof typeof PAYEEBLOCKEDTRANSACTIONIssueEnum];
export const PAYEEBLOCKEDTRANSACTIONDescriptionEnum = {
  TheFraudSettingsForThisSellerAreSuchThatThisPaymentCannotBeExecuted:
    'The Fraud settings for this seller are such that this payment cannot be executed.',
} as const;

export type PAYEEBLOCKEDTRANSACTIONDescriptionEnum =
  (typeof PAYEEBLOCKEDTRANSACTIONDescriptionEnum)[keyof typeof PAYEEBLOCKEDTRANSACTIONDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE
 */
export interface PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE {
  /**
   *
   * @type {string}
   * @memberof PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE
   */
  issue?: PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCE
   */
  description?: PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEDescriptionEnum;
}

export const PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEIssueEnum = {
  PayeeCountryNotSupportedForPaymentSource:
    'PAYEE_COUNTRY_NOT_SUPPORTED_FOR_PAYMENT_SOURCE',
} as const;

export type PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEIssueEnum =
  (typeof PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEIssueEnum)[keyof typeof PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEIssueEnum];
export const PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEDescriptionEnum = {
  PayeeCountryCodeIsNotSupportedByTheProvidedPaymentSource:
    'Payee country code is not supported by the provided payment source.',
} as const;

export type PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEDescriptionEnum =
  (typeof PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEDescriptionEnum)[keyof typeof PAYEECOUNTRYNOTSUPPORTEDFORPAYMENTSOURCEDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEFXRATEIDCURRENCYMISMATCH
 */
export interface PAYEEFXRATEIDCURRENCYMISMATCH {
  /**
   *
   * @type {string}
   * @memberof PAYEEFXRATEIDCURRENCYMISMATCH
   */
  issue?: PAYEEFXRATEIDCURRENCYMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEFXRATEIDCURRENCYMISMATCH
   */
  description?: PAYEEFXRATEIDCURRENCYMISMATCHDescriptionEnum;
}

export const PAYEEFXRATEIDCURRENCYMISMATCHIssueEnum = {
  PayeeFxRateIdCurrencyMismatch: 'PAYEE_FX_RATE_ID_CURRENCY_MISMATCH',
} as const;

export type PAYEEFXRATEIDCURRENCYMISMATCHIssueEnum =
  (typeof PAYEEFXRATEIDCURRENCYMISMATCHIssueEnum)[keyof typeof PAYEEFXRATEIDCURRENCYMISMATCHIssueEnum];
export const PAYEEFXRATEIDCURRENCYMISMATCHDescriptionEnum = {
  TheSpecifiedFxRateIdIsForACurrencyThatDoesNotMatchWithTheCurrencyOfThisRequestPleaseSpecifyADifferentFxRateIdAndTryTheRequestAgainAlternatelyRemoveTheFxRateIdToProcessTheRequestUsingTheDefaultExchangeRate:
    'The specified FX Rate ID is for a currency that does not match with the currency of this request. Please specify a different FX Rate ID and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate.',
} as const;

export type PAYEEFXRATEIDCURRENCYMISMATCHDescriptionEnum =
  (typeof PAYEEFXRATEIDCURRENCYMISMATCHDescriptionEnum)[keyof typeof PAYEEFXRATEIDCURRENCYMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEFXRATEIDEXPIRED
 */
export interface PAYEEFXRATEIDEXPIRED {
  /**
   *
   * @type {string}
   * @memberof PAYEEFXRATEIDEXPIRED
   */
  issue?: PAYEEFXRATEIDEXPIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEFXRATEIDEXPIRED
   */
  description?: PAYEEFXRATEIDEXPIREDDescriptionEnum;
}

export const PAYEEFXRATEIDEXPIREDIssueEnum = {
  PayeeFxRateIdExpired: 'PAYEE_FX_RATE_ID_EXPIRED',
} as const;

export type PAYEEFXRATEIDEXPIREDIssueEnum =
  (typeof PAYEEFXRATEIDEXPIREDIssueEnum)[keyof typeof PAYEEFXRATEIDEXPIREDIssueEnum];
export const PAYEEFXRATEIDEXPIREDDescriptionEnum = {
  TheSpecifiedFxRateIdHasExpiredPleaseSpecifyADifferentFxRateIdAndTryTheRequestAgainAlternatelyRemoveTheFxRateIdToProcessTheRequestUsingTheDefaultExchangeRate:
    'The specified FX Rate ID has expired. Please specify a different FX Rate Id and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate.',
} as const;

export type PAYEEFXRATEIDEXPIREDDescriptionEnum =
  (typeof PAYEEFXRATEIDEXPIREDDescriptionEnum)[keyof typeof PAYEEFXRATEIDEXPIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEENOTENABLEDFORBANKPROCESSING
 */
export interface PAYEENOTENABLEDFORBANKPROCESSING {
  /**
   *
   * @type {string}
   * @memberof PAYEENOTENABLEDFORBANKPROCESSING
   */
  issue?: PAYEENOTENABLEDFORBANKPROCESSINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEENOTENABLEDFORBANKPROCESSING
   */
  description?: PAYEENOTENABLEDFORBANKPROCESSINGDescriptionEnum;
}

export const PAYEENOTENABLEDFORBANKPROCESSINGIssueEnum = {
  PayeeNotEnabledForBankProcessing: 'PAYEE_NOT_ENABLED_FOR_BANK_PROCESSING',
} as const;

export type PAYEENOTENABLEDFORBANKPROCESSINGIssueEnum =
  (typeof PAYEENOTENABLEDFORBANKPROCESSINGIssueEnum)[keyof typeof PAYEENOTENABLEDFORBANKPROCESSINGIssueEnum];
export const PAYEENOTENABLEDFORBANKPROCESSINGDescriptionEnum = {
  PayeeAccountIsNotSetupToBeAbleToProcessBankPaymentsPleaseContactYourPayPalAccountManager:
    'Payee account is not setup to be able to process bank payments. Please contact your PayPal account manager.',
} as const;

export type PAYEENOTENABLEDFORBANKPROCESSINGDescriptionEnum =
  (typeof PAYEENOTENABLEDFORBANKPROCESSINGDescriptionEnum)[keyof typeof PAYEENOTENABLEDFORBANKPROCESSINGDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEENOTENABLEDFORCARDPROCESSING
 */
export interface PAYEENOTENABLEDFORCARDPROCESSING {
  /**
   *
   * @type {string}
   * @memberof PAYEENOTENABLEDFORCARDPROCESSING
   */
  issue?: PAYEENOTENABLEDFORCARDPROCESSINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEENOTENABLEDFORCARDPROCESSING
   */
  description?: PAYEENOTENABLEDFORCARDPROCESSINGDescriptionEnum;
}

export const PAYEENOTENABLEDFORCARDPROCESSINGIssueEnum = {
  PayeeNotEnabledForCardProcessing: 'PAYEE_NOT_ENABLED_FOR_CARD_PROCESSING',
} as const;

export type PAYEENOTENABLEDFORCARDPROCESSINGIssueEnum =
  (typeof PAYEENOTENABLEDFORCARDPROCESSINGIssueEnum)[keyof typeof PAYEENOTENABLEDFORCARDPROCESSINGIssueEnum];
export const PAYEENOTENABLEDFORCARDPROCESSINGDescriptionEnum = {
  PayeeAccountIsNotSetupToBeAbleToProcessCardPaymentsPleaseContactPayPalCustomerSupport:
    'Payee account is not setup to be able to process card payments. Please contact PayPal customer support.',
} as const;

export type PAYEENOTENABLEDFORCARDPROCESSINGDescriptionEnum =
  (typeof PAYEENOTENABLEDFORCARDPROCESSINGDescriptionEnum)[keyof typeof PAYEENOTENABLEDFORCARDPROCESSINGDescriptionEnum];

/**
 *
 * @export
 * @interface PAYEEPRICINGTIERIDNOTENABLED
 */
export interface PAYEEPRICINGTIERIDNOTENABLED {
  /**
   *
   * @type {string}
   * @memberof PAYEEPRICINGTIERIDNOTENABLED
   */
  issue?: PAYEEPRICINGTIERIDNOTENABLEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYEEPRICINGTIERIDNOTENABLED
   */
  description?: PAYEEPRICINGTIERIDNOTENABLEDDescriptionEnum;
}

export const PAYEEPRICINGTIERIDNOTENABLEDIssueEnum = {
  PayeePricingTierIdNotEnabled: 'PAYEE_PRICING_TIER_ID_NOT_ENABLED',
} as const;

export type PAYEEPRICINGTIERIDNOTENABLEDIssueEnum =
  (typeof PAYEEPRICINGTIERIDNOTENABLEDIssueEnum)[keyof typeof PAYEEPRICINGTIERIDNOTENABLEDIssueEnum];
export const PAYEEPRICINGTIERIDNOTENABLEDDescriptionEnum = {
  TheApiCallerIsNotEnabledToProcessTransactionsBySpecifyingAPayeePricingTierIdPleaseWorkWithYourAccountManagerToEnableThisOptionForYourAccount:
    "The API Caller is not enabled to process transactions by specifying a 'payee_pricing_tier_id'. Please work with your Account Manager to enable this option for your account.",
} as const;

export type PAYEEPRICINGTIERIDNOTENABLEDDescriptionEnum =
  (typeof PAYEEPRICINGTIERIDNOTENABLEDDescriptionEnum)[keyof typeof PAYEEPRICINGTIERIDNOTENABLEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYERACCOUNTLOCKEDORCLOSED
 */
export interface PAYERACCOUNTLOCKEDORCLOSED {
  /**
   *
   * @type {string}
   * @memberof PAYERACCOUNTLOCKEDORCLOSED
   */
  issue?: PAYERACCOUNTLOCKEDORCLOSEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYERACCOUNTLOCKEDORCLOSED
   */
  description?: PAYERACCOUNTLOCKEDORCLOSEDDescriptionEnum;
}

export const PAYERACCOUNTLOCKEDORCLOSEDIssueEnum = {
  PayerAccountLockedOrClosed: 'PAYER_ACCOUNT_LOCKED_OR_CLOSED',
} as const;

export type PAYERACCOUNTLOCKEDORCLOSEDIssueEnum =
  (typeof PAYERACCOUNTLOCKEDORCLOSEDIssueEnum)[keyof typeof PAYERACCOUNTLOCKEDORCLOSEDIssueEnum];
export const PAYERACCOUNTLOCKEDORCLOSEDDescriptionEnum = {
  ThePayerAccountCannotBeUsedForThisTransaction:
    'The payer account cannot be used for this transaction.',
} as const;

export type PAYERACCOUNTLOCKEDORCLOSEDDescriptionEnum =
  (typeof PAYERACCOUNTLOCKEDORCLOSEDDescriptionEnum)[keyof typeof PAYERACCOUNTLOCKEDORCLOSEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYERACCOUNTRESTRICTED
 */
export interface PAYERACCOUNTRESTRICTED {
  /**
   *
   * @type {string}
   * @memberof PAYERACCOUNTRESTRICTED
   */
  issue?: PAYERACCOUNTRESTRICTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYERACCOUNTRESTRICTED
   */
  description?: PAYERACCOUNTRESTRICTEDDescriptionEnum;
}

export const PAYERACCOUNTRESTRICTEDIssueEnum = {
  PayerAccountRestricted: 'PAYER_ACCOUNT_RESTRICTED',
} as const;

export type PAYERACCOUNTRESTRICTEDIssueEnum =
  (typeof PAYERACCOUNTRESTRICTEDIssueEnum)[keyof typeof PAYERACCOUNTRESTRICTEDIssueEnum];
export const PAYERACCOUNTRESTRICTEDDescriptionEnum = {
  PayerAccountRestricted: 'PAYER_ACCOUNT_RESTRICTED',
} as const;

export type PAYERACCOUNTRESTRICTEDDescriptionEnum =
  (typeof PAYERACCOUNTRESTRICTEDDescriptionEnum)[keyof typeof PAYERACCOUNTRESTRICTEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYERACTIONREQUIRED
 */
export interface PAYERACTIONREQUIRED {
  /**
   *
   * @type {string}
   * @memberof PAYERACTIONREQUIRED
   */
  issue?: PAYERACTIONREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYERACTIONREQUIRED
   */
  description?: PAYERACTIONREQUIREDDescriptionEnum;
}

export const PAYERACTIONREQUIREDIssueEnum = {
  PayerActionRequired: 'PAYER_ACTION_REQUIRED',
} as const;

export type PAYERACTIONREQUIREDIssueEnum =
  (typeof PAYERACTIONREQUIREDIssueEnum)[keyof typeof PAYERACTIONREQUIREDIssueEnum];
export const PAYERACTIONREQUIREDDescriptionEnum = {
  TransactionCannotCompleteSuccessfullyInstructTheBuyerToReturnToPayPal:
    'Transaction cannot complete successfully, instruct the buyer to return to PayPal.',
} as const;

export type PAYERACTIONREQUIREDDescriptionEnum =
  (typeof PAYERACTIONREQUIREDDescriptionEnum)[keyof typeof PAYERACTIONREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYERCANNOTPAY
 */
export interface PAYERCANNOTPAY {
  /**
   *
   * @type {string}
   * @memberof PAYERCANNOTPAY
   */
  issue?: PAYERCANNOTPAYIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYERCANNOTPAY
   */
  description?: PAYERCANNOTPAYDescriptionEnum;
}

export const PAYERCANNOTPAYIssueEnum = {
  PayerCannotPay: 'PAYER_CANNOT_PAY',
} as const;

export type PAYERCANNOTPAYIssueEnum =
  (typeof PAYERCANNOTPAYIssueEnum)[keyof typeof PAYERCANNOTPAYIssueEnum];
export const PAYERCANNOTPAYDescriptionEnum = {
  CombinationOfPayerAndPayeeSettingsMeanThatThisBuyerCannotPayThisSeller:
    'Combination of payer and payee settings mean that this buyer cannot pay this seller.',
} as const;

export type PAYERCANNOTPAYDescriptionEnum =
  (typeof PAYERCANNOTPAYDescriptionEnum)[keyof typeof PAYERCANNOTPAYDescriptionEnum];

/**
 *
 * @export
 * @interface PAYERCANNOTPAY1
 */
export interface PAYERCANNOTPAY1 {
  /**
   *
   * @type {string}
   * @memberof PAYERCANNOTPAY1
   */
  issue?: PAYERCANNOTPAY1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYERCANNOTPAY1
   */
  description?: PAYERCANNOTPAY1DescriptionEnum;
}

export const PAYERCANNOTPAY1IssueEnum = {
  PayerCannotPay: 'PAYER_CANNOT_PAY',
} as const;

export type PAYERCANNOTPAY1IssueEnum =
  (typeof PAYERCANNOTPAY1IssueEnum)[keyof typeof PAYERCANNOTPAY1IssueEnum];
export const PAYERCANNOTPAY1DescriptionEnum = {
  PayerCannotPayForThisTransactionPleaseContactThePayerToFindOtherWaysToPayForThisTransaction:
    'Payer cannot pay for this transaction. Please contact the payer to find other ways to pay for this transaction.',
} as const;

export type PAYERCANNOTPAY1DescriptionEnum =
  (typeof PAYERCANNOTPAY1DescriptionEnum)[keyof typeof PAYERCANNOTPAY1DescriptionEnum];

/**
 *
 * @export
 * @interface PAYMENTALREADYAPPROVED
 */
export interface PAYMENTALREADYAPPROVED {
  /**
   *
   * @type {string}
   * @memberof PAYMENTALREADYAPPROVED
   */
  issue?: PAYMENTALREADYAPPROVEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYMENTALREADYAPPROVED
   */
  description?: PAYMENTALREADYAPPROVEDDescriptionEnum;
}

export const PAYMENTALREADYAPPROVEDIssueEnum = {
  PaymentAlreadyApproved: 'PAYMENT_ALREADY_APPROVED',
} as const;

export type PAYMENTALREADYAPPROVEDIssueEnum =
  (typeof PAYMENTALREADYAPPROVEDIssueEnum)[keyof typeof PAYMENTALREADYAPPROVEDIssueEnum];
export const PAYMENTALREADYAPPROVEDDescriptionEnum = {
  ThePaymentHasAlreadyBeenApprovedPleaseCaptureTheOrderOrCreateAndConfirmANewOrderWithThisPaymentSource:
    'The payment has already been approved.  Please capture the order, or create and confirm a new order with this payment source.',
} as const;

export type PAYMENTALREADYAPPROVEDDescriptionEnum =
  (typeof PAYMENTALREADYAPPROVEDDescriptionEnum)[keyof typeof PAYMENTALREADYAPPROVEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYMENTSOURCECANNOTBEUSED
 */
export interface PAYMENTSOURCECANNOTBEUSED {
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCECANNOTBEUSED
   */
  issue?: PAYMENTSOURCECANNOTBEUSEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCECANNOTBEUSED
   */
  description?: PAYMENTSOURCECANNOTBEUSEDDescriptionEnum;
}

export const PAYMENTSOURCECANNOTBEUSEDIssueEnum = {
  PaymentSourceCannotBeUsed: 'PAYMENT_SOURCE_CANNOT_BE_USED',
} as const;

export type PAYMENTSOURCECANNOTBEUSEDIssueEnum =
  (typeof PAYMENTSOURCECANNOTBEUSEDIssueEnum)[keyof typeof PAYMENTSOURCECANNOTBEUSEDIssueEnum];
export const PAYMENTSOURCECANNOTBEUSEDDescriptionEnum = {
  TheProvidedPaymentSourceCannotBeUsedToPayForTheOrderPleaseTryAgainWithADifferentPaymentSourceByCreatingANewOrder:
    'The provided payment source cannot be used to pay for the order. Please try again with a different payment source by creating a new order.',
} as const;

export type PAYMENTSOURCECANNOTBEUSEDDescriptionEnum =
  (typeof PAYMENTSOURCECANNOTBEUSEDDescriptionEnum)[keyof typeof PAYMENTSOURCECANNOTBEUSEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYMENTSOURCEDECLINEDBYPROCESSOR
 */
export interface PAYMENTSOURCEDECLINEDBYPROCESSOR {
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCEDECLINEDBYPROCESSOR
   */
  issue?: PAYMENTSOURCEDECLINEDBYPROCESSORIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCEDECLINEDBYPROCESSOR
   */
  description?: PAYMENTSOURCEDECLINEDBYPROCESSORDescriptionEnum;
}

export const PAYMENTSOURCEDECLINEDBYPROCESSORIssueEnum = {
  PaymentSourceDeclinedByProcessor: 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR',
} as const;

export type PAYMENTSOURCEDECLINEDBYPROCESSORIssueEnum =
  (typeof PAYMENTSOURCEDECLINEDBYPROCESSORIssueEnum)[keyof typeof PAYMENTSOURCEDECLINEDBYPROCESSORIssueEnum];
export const PAYMENTSOURCEDECLINEDBYPROCESSORDescriptionEnum = {
  TheProvidedPaymentSourceIsDeclinedByTheProcessorPleaseTryAgainWithADifferentPaymentSourceByCreatingANewOrder:
    'The provided payment source is declined by the processor. Please try again with a different payment source by creating a new order.',
} as const;

export type PAYMENTSOURCEDECLINEDBYPROCESSORDescriptionEnum =
  (typeof PAYMENTSOURCEDECLINEDBYPROCESSORDescriptionEnum)[keyof typeof PAYMENTSOURCEDECLINEDBYPROCESSORDescriptionEnum];

/**
 *
 * @export
 * @interface PAYMENTSOURCEINFOCANNOTBEVERIFIED
 */
export interface PAYMENTSOURCEINFOCANNOTBEVERIFIED {
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCEINFOCANNOTBEVERIFIED
   */
  issue?: PAYMENTSOURCEINFOCANNOTBEVERIFIEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCEINFOCANNOTBEVERIFIED
   */
  description?: PAYMENTSOURCEINFOCANNOTBEVERIFIEDDescriptionEnum;
}

export const PAYMENTSOURCEINFOCANNOTBEVERIFIEDIssueEnum = {
  PaymentSourceInfoCannotBeVerified: 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED',
} as const;

export type PAYMENTSOURCEINFOCANNOTBEVERIFIEDIssueEnum =
  (typeof PAYMENTSOURCEINFOCANNOTBEVERIFIEDIssueEnum)[keyof typeof PAYMENTSOURCEINFOCANNOTBEVERIFIEDIssueEnum];
export const PAYMENTSOURCEINFOCANNOTBEVERIFIEDDescriptionEnum = {
  TheCombinationOfThePaymentSourceNameBillingAddressShippingNameAndShippingAddressCouldNotBeVerifiedPleaseCorrectThisInformationAndTryAgainByCreatingANewOrder:
    'The combination of the payment_source name, billing address, shipping name and shipping address could not be verified. Please correct this information and try again by creating a new order.',
} as const;

export type PAYMENTSOURCEINFOCANNOTBEVERIFIEDDescriptionEnum =
  (typeof PAYMENTSOURCEINFOCANNOTBEVERIFIEDDescriptionEnum)[keyof typeof PAYMENTSOURCEINFOCANNOTBEVERIFIEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYMENTSOURCEMISMATCH
 */
export interface PAYMENTSOURCEMISMATCH {
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCEMISMATCH
   */
  issue?: PAYMENTSOURCEMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCEMISMATCH
   */
  description?: PAYMENTSOURCEMISMATCHDescriptionEnum;
}

export const PAYMENTSOURCEMISMATCHIssueEnum = {
  PaymentSourceMismatch: 'PAYMENT_SOURCE_MISMATCH',
} as const;

export type PAYMENTSOURCEMISMATCHIssueEnum =
  (typeof PAYMENTSOURCEMISMATCHIssueEnum)[keyof typeof PAYMENTSOURCEMISMATCHIssueEnum];
export const PAYMENTSOURCEMISMATCHDescriptionEnum = {
  ThePaymentSourceInTheRequestMustMatchThePaymentSourceUsedForTheAuthorizationOrCaptureReferencedByPreviousTransactionReferencePleaseUsePreviousTransactionReferenceWhosePaymentSourceMatchesWithThePaymentSourceSpecifiedInTheOrder:
    'The `payment_source` in the request must match the `payment_source` used for the authorization or capture referenced by `previous_transaction_reference`. Please use `previous_transaction_reference` whose `payment_source` matches with the `payment_source` specified in the order.',
} as const;

export type PAYMENTSOURCEMISMATCHDescriptionEnum =
  (typeof PAYMENTSOURCEMISMATCHDescriptionEnum)[keyof typeof PAYMENTSOURCEMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface PAYMENTSOURCENOTSUPPORTED
 */
export interface PAYMENTSOURCENOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCENOTSUPPORTED
   */
  issue?: PAYMENTSOURCENOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYMENTSOURCENOTSUPPORTED
   */
  description?: PAYMENTSOURCENOTSUPPORTEDDescriptionEnum;
}

export const PAYMENTSOURCENOTSUPPORTEDIssueEnum = {
  PaymentSourceNotSupported: 'PAYMENT_SOURCE_NOT_SUPPORTED',
} as const;

export type PAYMENTSOURCENOTSUPPORTEDIssueEnum =
  (typeof PAYMENTSOURCENOTSUPPORTEDIssueEnum)[keyof typeof PAYMENTSOURCENOTSUPPORTEDIssueEnum];
export const PAYMENTSOURCENOTSUPPORTEDDescriptionEnum = {
  ThePayerSelectedMethodOfPaymentIsNotSupportedWhenMultiplePurchaseUnitsAreSpecifiedForAnOrder:
    'The payer selected method of payment is not supported when multiple purchase units are specified for an Order.',
} as const;

export type PAYMENTSOURCENOTSUPPORTEDDescriptionEnum =
  (typeof PAYMENTSOURCENOTSUPPORTEDDescriptionEnum)[keyof typeof PAYMENTSOURCENOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYMENTTYPENOTSUPPORTEDFORINTENT
 */
export interface PAYMENTTYPENOTSUPPORTEDFORINTENT {
  /**
   *
   * @type {string}
   * @memberof PAYMENTTYPENOTSUPPORTEDFORINTENT
   */
  issue?: PAYMENTTYPENOTSUPPORTEDFORINTENTIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYMENTTYPENOTSUPPORTEDFORINTENT
   */
  description?: PAYMENTTYPENOTSUPPORTEDFORINTENTDescriptionEnum;
}

export const PAYMENTTYPENOTSUPPORTEDFORINTENTIssueEnum = {
  PaymentTypeNotSupportedForIntent: 'PAYMENT_TYPE_NOT_SUPPORTED_FOR_INTENT',
} as const;

export type PAYMENTTYPENOTSUPPORTEDFORINTENTIssueEnum =
  (typeof PAYMENTTYPENOTSUPPORTEDFORINTENTIssueEnum)[keyof typeof PAYMENTTYPENOTSUPPORTEDFORINTENTIssueEnum];
export const PAYMENTTYPENOTSUPPORTEDFORINTENTDescriptionEnum = {
  ProvidedPaymentTypeNotSupportedForOrderIntentPaymentAuthorizationsAreSupportedOnlyForOrderWithIntentAuthorizeAndPaymentCapturesAreSupportedOnlyForOrderWithIntentCapture:
    'Provided payment type not supported for order intent. Payment authorizations are supported only for order with `intent=AUTHORIZE` and payment captures are supported only for order with `intent=CAPTURE`.',
} as const;

export type PAYMENTTYPENOTSUPPORTEDFORINTENTDescriptionEnum =
  (typeof PAYMENTTYPENOTSUPPORTEDFORINTENTDescriptionEnum)[keyof typeof PAYMENTTYPENOTSUPPORTEDFORINTENTDescriptionEnum];

/**
 *
 * @export
 * @interface PAYPALREQUESTIDREQUIRED
 */
export interface PAYPALREQUESTIDREQUIRED {
  /**
   *
   * @type {string}
   * @memberof PAYPALREQUESTIDREQUIRED
   */
  issue?: PAYPALREQUESTIDREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYPALREQUESTIDREQUIRED
   */
  description?: PAYPALREQUESTIDREQUIREDDescriptionEnum;
}

export const PAYPALREQUESTIDREQUIREDIssueEnum = {
  PaypalRequestIdRequired: 'PAYPAL_REQUEST_ID_REQUIRED',
} as const;

export type PAYPALREQUESTIDREQUIREDIssueEnum =
  (typeof PAYPALREQUESTIDREQUIREDIssueEnum)[keyof typeof PAYPALREQUESTIDREQUIREDIssueEnum];
export const PAYPALREQUESTIDREQUIREDDescriptionEnum = {
  APayPalRequestIdIsRequiredIfYouAreTryingToProcessPaymentForAnOrderPleaseSpecifyAPayPalRequestIdOrCreateTheOrderWithoutAPaymentSourceSpecified:
    "A PayPal-Request-Id is required if you are trying to process payment for an Order. Please specify a PayPal-Request-Id or Create the Order without a 'payment_source' specified.",
} as const;

export type PAYPALREQUESTIDREQUIREDDescriptionEnum =
  (typeof PAYPALREQUESTIDREQUIREDDescriptionEnum)[keyof typeof PAYPALREQUESTIDREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYPALTRANSACTIONIDEXPIRED
 */
export interface PAYPALTRANSACTIONIDEXPIRED {
  /**
   *
   * @type {string}
   * @memberof PAYPALTRANSACTIONIDEXPIRED
   */
  issue?: PAYPALTRANSACTIONIDEXPIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYPALTRANSACTIONIDEXPIRED
   */
  description?: PAYPALTRANSACTIONIDEXPIREDDescriptionEnum;
}

export const PAYPALTRANSACTIONIDEXPIREDIssueEnum = {
  PaypalTransactionIdExpired: 'PAYPAL_TRANSACTION_ID_EXPIRED',
} as const;

export type PAYPALTRANSACTIONIDEXPIREDIssueEnum =
  (typeof PAYPALTRANSACTIONIDEXPIREDIssueEnum)[keyof typeof PAYPALTRANSACTIONIDEXPIREDIssueEnum];
export const PAYPALTRANSACTIONIDEXPIREDDescriptionEnum = {
  SpecifiedPaypalTransactionIdHasExpiredPayPalTransactionIdExpires4YearsAfterTheDateOfTheInitialTransaction:
    'Specified `paypal_transaction_id` has expired. PayPal transaction ID expires 4 years after the date of the initial transaction.',
} as const;

export type PAYPALTRANSACTIONIDEXPIREDDescriptionEnum =
  (typeof PAYPALTRANSACTIONIDEXPIREDDescriptionEnum)[keyof typeof PAYPALTRANSACTIONIDEXPIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PAYPALTRANSACTIONIDNOTFOUND
 */
export interface PAYPALTRANSACTIONIDNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof PAYPALTRANSACTIONIDNOTFOUND
   */
  issue?: PAYPALTRANSACTIONIDNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PAYPALTRANSACTIONIDNOTFOUND
   */
  description?: PAYPALTRANSACTIONIDNOTFOUNDDescriptionEnum;
}

export const PAYPALTRANSACTIONIDNOTFOUNDIssueEnum = {
  PaypalTransactionIdNotFound: 'PAYPAL_TRANSACTION_ID_NOT_FOUND',
} as const;

export type PAYPALTRANSACTIONIDNOTFOUNDIssueEnum =
  (typeof PAYPALTRANSACTIONIDNOTFOUNDIssueEnum)[keyof typeof PAYPALTRANSACTIONIDNOTFOUNDIssueEnum];
export const PAYPALTRANSACTIONIDNOTFOUNDDescriptionEnum = {
  SpecifiedPaypalTransactionIdWasNotFoundVerifyTheValueAndTryTheRequestAgain:
    'Specified `paypal_transaction_id` was not found. Verify the value and try the request again.',
} as const;

export type PAYPALTRANSACTIONIDNOTFOUNDDescriptionEnum =
  (typeof PAYPALTRANSACTIONIDNOTFOUNDDescriptionEnum)[keyof typeof PAYPALTRANSACTIONIDNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface PERMISSIONDENIED
 */
export interface PERMISSIONDENIED {
  /**
   *
   * @type {string}
   * @memberof PERMISSIONDENIED
   */
  issue?: PERMISSIONDENIEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PERMISSIONDENIED
   */
  description?: PERMISSIONDENIEDDescriptionEnum;
}

export const PERMISSIONDENIEDIssueEnum = {
  PermissionDenied: 'PERMISSION_DENIED',
} as const;

export type PERMISSIONDENIEDIssueEnum =
  (typeof PERMISSIONDENIEDIssueEnum)[keyof typeof PERMISSIONDENIEDIssueEnum];
export const PERMISSIONDENIEDDescriptionEnum = {
  YouDoNotHavePermissionToAccessOrPerformOperationsOnThisResource:
    'You do not have permission to access or perform operations on this resource.',
} as const;

export type PERMISSIONDENIEDDescriptionEnum =
  (typeof PERMISSIONDENIEDDescriptionEnum)[keyof typeof PERMISSIONDENIEDDescriptionEnum];

/**
 *
 * @export
 * @interface PERMISSIONDENIEDFORDONATIONITEMS
 */
export interface PERMISSIONDENIEDFORDONATIONITEMS {
  /**
   *
   * @type {string}
   * @memberof PERMISSIONDENIEDFORDONATIONITEMS
   */
  issue?: PERMISSIONDENIEDFORDONATIONITEMSIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PERMISSIONDENIEDFORDONATIONITEMS
   */
  description?: PERMISSIONDENIEDFORDONATIONITEMSDescriptionEnum;
}

export const PERMISSIONDENIEDFORDONATIONITEMSIssueEnum = {
  PermissionDeniedForDonationItems: 'PERMISSION_DENIED_FOR_DONATION_ITEMS',
} as const;

export type PERMISSIONDENIEDFORDONATIONITEMSIssueEnum =
  (typeof PERMISSIONDENIEDFORDONATIONITEMSIssueEnum)[keyof typeof PERMISSIONDENIEDFORDONATIONITEMSIssueEnum];
export const PERMISSIONDENIEDFORDONATIONITEMSDescriptionEnum = {
  TheApiCallerOrPayeeHaveNotBeenGrantedAppropriatePermissionsToSendItemsCategoryAsDonationPleaseSpeakToYourAccountManagerIfYouWantToProcessTheseTypeOfItems:
    "The API Caller or Payee have not been granted appropriate permissions to send 'items.category' as 'DONATION'. Please speak to your account manager if you want to process these type of items.",
} as const;

export type PERMISSIONDENIEDFORDONATIONITEMSDescriptionEnum =
  (typeof PERMISSIONDENIEDFORDONATIONITEMSDescriptionEnum)[keyof typeof PERMISSIONDENIEDFORDONATIONITEMSDescriptionEnum];

/**
 *
 * @export
 * @interface PLATFORMFEEPAYEECANNOTBESAMEASPAYER
 */
export interface PLATFORMFEEPAYEECANNOTBESAMEASPAYER {
  /**
   *
   * @type {string}
   * @memberof PLATFORMFEEPAYEECANNOTBESAMEASPAYER
   */
  issue?: PLATFORMFEEPAYEECANNOTBESAMEASPAYERIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PLATFORMFEEPAYEECANNOTBESAMEASPAYER
   */
  description?: PLATFORMFEEPAYEECANNOTBESAMEASPAYERDescriptionEnum;
}

export const PLATFORMFEEPAYEECANNOTBESAMEASPAYERIssueEnum = {
  PlatformFeePayeeCannotBeSameAsPayer:
    'PLATFORM_FEE_PAYEE_CANNOT_BE_SAME_AS_PAYER',
} as const;

export type PLATFORMFEEPAYEECANNOTBESAMEASPAYERIssueEnum =
  (typeof PLATFORMFEEPAYEECANNOTBESAMEASPAYERIssueEnum)[keyof typeof PLATFORMFEEPAYEECANNOTBESAMEASPAYERIssueEnum];
export const PLATFORMFEEPAYEECANNOTBESAMEASPAYERDescriptionEnum = {
  ThePayerCannotPayThemselvesTheRecipientAccountOfThePlatformFeesMustBeDifferentFromThePayerAccount:
    'The payer cannot pay themselves. The recipient account of the platform fees must be different from the payer account.',
} as const;

export type PLATFORMFEEPAYEECANNOTBESAMEASPAYERDescriptionEnum =
  (typeof PLATFORMFEEPAYEECANNOTBESAMEASPAYERDescriptionEnum)[keyof typeof PLATFORMFEEPAYEECANNOTBESAMEASPAYERDescriptionEnum];

/**
 *
 * @export
 * @interface PLATFORMFEESNOTSUPPORTED
 */
export interface PLATFORMFEESNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof PLATFORMFEESNOTSUPPORTED
   */
  issue?: PLATFORMFEESNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PLATFORMFEESNOTSUPPORTED
   */
  description?: PLATFORMFEESNOTSUPPORTEDDescriptionEnum;
}

export const PLATFORMFEESNOTSUPPORTEDIssueEnum = {
  PlatformFeesNotSupported: 'PLATFORM_FEES_NOT_SUPPORTED',
} as const;

export type PLATFORMFEESNOTSUPPORTEDIssueEnum =
  (typeof PLATFORMFEESNOTSUPPORTEDIssueEnum)[keyof typeof PLATFORMFEESNOTSUPPORTEDIssueEnum];
export const PLATFORMFEESNOTSUPPORTEDDescriptionEnum = {
  TheApiCallerIsNotEnabledToProcessTransactionsBySpecifyingPlatformFeesPleaseWorkWithYourPayPalAccountManagerToEnableThisOptionForYourAccount:
    "The API Caller is not enabled to process transactions by specifying 'platform_fees'. Please work with your PayPal Account Manager to enable this option for your account.",
} as const;

export type PLATFORMFEESNOTSUPPORTEDDescriptionEnum =
  (typeof PLATFORMFEESNOTSUPPORTEDDescriptionEnum)[keyof typeof PLATFORMFEESNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface PNREFEXPIRED
 */
export interface PNREFEXPIRED {
  /**
   *
   * @type {string}
   * @memberof PNREFEXPIRED
   */
  issue?: PNREFEXPIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PNREFEXPIRED
   */
  description?: PNREFEXPIREDDescriptionEnum;
}

export const PNREFEXPIREDIssueEnum = {
  PnrefExpired: 'PNREF_EXPIRED',
} as const;

export type PNREFEXPIREDIssueEnum =
  (typeof PNREFEXPIREDIssueEnum)[keyof typeof PNREFEXPIREDIssueEnum];
export const PNREFEXPIREDDescriptionEnum = {
  SpecifiedPnrefHasExpiredPnrefExpires15MonthsAfterTheDateOfTheInitialTransaction:
    'Specified `pnref` has expired. PNREF expires 15 months after the date of the initial transaction.',
} as const;

export type PNREFEXPIREDDescriptionEnum =
  (typeof PNREFEXPIREDDescriptionEnum)[keyof typeof PNREFEXPIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PNREFNOTFOUND
 */
export interface PNREFNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof PNREFNOTFOUND
   */
  issue?: PNREFNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PNREFNOTFOUND
   */
  description?: PNREFNOTFOUNDDescriptionEnum;
}

export const PNREFNOTFOUNDIssueEnum = {
  PnrefNotFound: 'PNREF_NOT_FOUND',
} as const;

export type PNREFNOTFOUNDIssueEnum =
  (typeof PNREFNOTFOUNDIssueEnum)[keyof typeof PNREFNOTFOUNDIssueEnum];
export const PNREFNOTFOUNDDescriptionEnum = {
  SpecifiedPnrefWasNotFoundVerifyTheValueAndTryTheRequestAgain:
    'Specified `pnref` was not found. Verify the value and try the request again.',
} as const;

export type PNREFNOTFOUNDDescriptionEnum =
  (typeof PNREFNOTFOUNDDescriptionEnum)[keyof typeof PNREFNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface POSTALCODEREQUIRED
 */
export interface POSTALCODEREQUIRED {
  /**
   *
   * @type {string}
   * @memberof POSTALCODEREQUIRED
   */
  issue?: POSTALCODEREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof POSTALCODEREQUIRED
   */
  description?: POSTALCODEREQUIREDDescriptionEnum;
}

export const POSTALCODEREQUIREDIssueEnum = {
  PostalCodeRequired: 'POSTAL_CODE_REQUIRED',
} as const;

export type POSTALCODEREQUIREDIssueEnum =
  (typeof POSTALCODEREQUIREDIssueEnum)[keyof typeof POSTALCODEREQUIREDIssueEnum];
export const POSTALCODEREQUIREDDescriptionEnum = {
  TheSpecifiedCountryRequiresAPostalCode:
    'The specified country requires a postal code.',
} as const;

export type POSTALCODEREQUIREDDescriptionEnum =
  (typeof POSTALCODEREQUIREDDescriptionEnum)[keyof typeof POSTALCODEREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface PREFERREDPAYMENTSOURCEMISMATCH
 */
export interface PREFERREDPAYMENTSOURCEMISMATCH {
  /**
   *
   * @type {string}
   * @memberof PREFERREDPAYMENTSOURCEMISMATCH
   */
  issue?: PREFERREDPAYMENTSOURCEMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PREFERREDPAYMENTSOURCEMISMATCH
   */
  description?: PREFERREDPAYMENTSOURCEMISMATCHDescriptionEnum;
}

export const PREFERREDPAYMENTSOURCEMISMATCHIssueEnum = {
  PreferredPaymentSourceMismatch: 'PREFERRED_PAYMENT_SOURCE_MISMATCH',
} as const;

export type PREFERREDPAYMENTSOURCEMISMATCHIssueEnum =
  (typeof PREFERREDPAYMENTSOURCEMISMATCHIssueEnum)[keyof typeof PREFERREDPAYMENTSOURCEMISMATCHIssueEnum];
export const PREFERREDPAYMENTSOURCEMISMATCHDescriptionEnum = {
  PaymentSourceMustExactlyMatchThePreferredPaymentSourceThatWasProvidedDuringOrderCreation:
    'Payment Source must exactly match the Preferred Payment Source that was provided during order creation.',
} as const;

export type PREFERREDPAYMENTSOURCEMISMATCHDescriptionEnum =
  (typeof PREFERREDPAYMENTSOURCEMISMATCHDescriptionEnum)[keyof typeof PREFERREDPAYMENTSOURCEMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH
 */
export interface PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH {
  /**
   *
   * @type {string}
   * @memberof PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH
   */
  issue?: PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH
   */
  description?: PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHDescriptionEnum;
}

export const PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHIssueEnum = {
  PreferredShippingOptionAmountMismatch:
    'PREFERRED_SHIPPING_OPTION_AMOUNT_MISMATCH',
} as const;

export type PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHIssueEnum =
  (typeof PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHIssueEnum)[keyof typeof PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHIssueEnum];
export const PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHDescriptionEnum = {
  TheAmountProvidedInThePreferredShippingOptionShouldMatchTheAmountProvidedInAmountBreakdown:
    'The amount provided in the preferred shipping option should match the amount provided in amount breakdown',
} as const;

export type PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHDescriptionEnum =
  (typeof PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHDescriptionEnum)[keyof typeof PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK
 */
export interface PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK {
  /**
   *
   * @type {string}
   * @memberof PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK
   */
  issue?: PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK
   */
  description?: PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKDescriptionEnum;
}

export const PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKIssueEnum = {
  PreviousTransactionReferenceHasChargeback:
    'PREVIOUS_TRANSACTION_REFERENCE_HAS_CHARGEBACK',
} as const;

export type PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKIssueEnum =
  (typeof PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKIssueEnum)[keyof typeof PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKIssueEnum];
export const PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKDescriptionEnum = {
  TheCaptureReferencedByPreviousTransactionReferenceHasAChargebackAndHenceCannotBeUsedForThisOrderPleaseUseAPreviousTransactionReferenceWhichDoesNotHaveAChargeback:
    'The capture referenced by `previous_transaction_reference` has a chargeback and hence cannot be used for this order. Please use a `previous_transaction_reference` which does not have a chargeback.',
} as const;

export type PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKDescriptionEnum =
  (typeof PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKDescriptionEnum)[keyof typeof PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKDescriptionEnum];

/**
 *
 * @export
 * @interface PREVIOUSTRANSACTIONREFERENCEVOIDED
 */
export interface PREVIOUSTRANSACTIONREFERENCEVOIDED {
  /**
   *
   * @type {string}
   * @memberof PREVIOUSTRANSACTIONREFERENCEVOIDED
   */
  issue?: PREVIOUSTRANSACTIONREFERENCEVOIDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof PREVIOUSTRANSACTIONREFERENCEVOIDED
   */
  description?: PREVIOUSTRANSACTIONREFERENCEVOIDEDDescriptionEnum;
}

export const PREVIOUSTRANSACTIONREFERENCEVOIDEDIssueEnum = {
  PreviousTransactionReferenceVoided: 'PREVIOUS_TRANSACTION_REFERENCE_VOIDED',
} as const;

export type PREVIOUSTRANSACTIONREFERENCEVOIDEDIssueEnum =
  (typeof PREVIOUSTRANSACTIONREFERENCEVOIDEDIssueEnum)[keyof typeof PREVIOUSTRANSACTIONREFERENCEVOIDEDIssueEnum];
export const PREVIOUSTRANSACTIONREFERENCEVOIDEDDescriptionEnum = {
  TheStatusOfAuthorizationReferencedByPreviousTransactionReferenceIsVoidedAndHenceCannotBeUsedForThisOrderPleaseUseAPreviousTransactionReferenceWhoseStatusIsNotVoided:
    'The status of authorization referenced by `previous_transaction_reference` is `VOIDED` and hence cannot be used for this order. Please use a `previous_transaction_reference` whose status is not `VOIDED`.',
} as const;

export type PREVIOUSTRANSACTIONREFERENCEVOIDEDDescriptionEnum =
  (typeof PREVIOUSTRANSACTIONREFERENCEVOIDEDDescriptionEnum)[keyof typeof PREVIOUSTRANSACTIONREFERENCEVOIDEDDescriptionEnum];

/**
 * Transactions status result identifier. The outcome of the issuer\'s authentication.
 * @export
 * @enum {string}
 */

export const ParesStatus = {
  Y: 'Y',
  N: 'N',
  U: 'U',
  A: 'A',
  C: 'C',
  R: 'R',
  D: 'D',
  I: 'I',
} as const;

export type ParesStatus = (typeof ParesStatus)[keyof typeof ParesStatus];

/**
 * The JSON patch object to apply partial updates to resources.
 * @export
 * @interface Patch
 */
export interface Patch {
  /**
   * The operation.
   * @type {string}
   * @memberof Patch
   */
  op: PatchOpEnum;
  /**
   * The <a href=\"https://tools.ietf.org/html/rfc6901\">JSON Pointer</a> to the target document location at which to complete the operation.
   * @type {string}
   * @memberof Patch
   */
  path?: string;
  /**
   * The value to apply. The <code>remove</code>, <code>copy</code>, and <code>move</code> operations do not require a value. Since <a href=\"https://www.rfc-editor.org/rfc/rfc69021\">JSON Patch</a> allows any type for <code>value</code>, the <code>type</code> property is not specified.
   * @type {any}
   * @memberof Patch
   */
  value?: any;
  /**
   * The <a href=\"https://tools.ietf.org/html/rfc6901\">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation.
   * @type {string}
   * @memberof Patch
   */
  from?: string;
}

export const PatchOpEnum = {
  Add: 'add',
  Remove: 'remove',
  Replace: 'replace',
  Move: 'move',
  Copy: 'copy',
  Test: 'test',
} as const;

export type PatchOpEnum = (typeof PatchOpEnum)[keyof typeof PatchOpEnum];

/**
 * The merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
 * @export
 * @interface Payee
 */
export interface Payee {
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof Payee
   */
  email_address?: string;
  /**
   * The account identifier for a PayPal account.
   * @type {string}
   * @memberof Payee
   */
  merchant_id?: string;
}
/**
 * The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
 * @export
 * @interface PayeeBase
 */
export interface PayeeBase {
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof PayeeBase
   */
  email_address?: string;
  /**
   * The account identifier for a PayPal account.
   * @type {string}
   * @memberof PayeeBase
   */
  merchant_id?: string;
}
/**
 * The merchant-preferred payment methods.
 * @export
 * @enum {string}
 */

export const PayeePaymentMethodPreference = {
  Unrestricted: 'UNRESTRICTED',
  ImmediatePaymentRequired: 'IMMEDIATE_PAYMENT_REQUIRED',
} as const;

export type PayeePaymentMethodPreference =
  (typeof PayeePaymentMethodPreference)[keyof typeof PayeePaymentMethodPreference];

/**
 * The customer who approves and pays for the order. The customer is also known as the payer.
 * @export
 * @interface Payer
 */
export interface Payer {
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof Payer
   */
  email_address?: string;
  /**
   * The account identifier for a PayPal account.
   * @type {string}
   * @memberof Payer
   */
  payer_id?: string;
  /**
   *
   * @type {Name}
   * @memberof Payer
   */
  name?: Name;
  /**
   *
   * @type {PhoneWithType}
   * @memberof Payer
   */
  phone?: PhoneWithType;
  /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @type {string}
   * @memberof Payer
   */
  birth_date?: string;
  /**
   *
   * @type {TaxInfo}
   * @memberof Payer
   */
  tax_info?: TaxInfo;
  /**
   *
   * @type {AddressPortable}
   * @memberof Payer
   */
  address?: AddressPortable;
}
/**
 *
 * @export
 * @interface PayerAllOf
 */
export interface PayerAllOf {
  /**
   *
   * @type {Name}
   * @memberof PayerAllOf
   */
  name?: Name;
  /**
   *
   * @type {PhoneWithType}
   * @memberof PayerAllOf
   */
  phone?: PhoneWithType;
  /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @type {string}
   * @memberof PayerAllOf
   */
  birth_date?: string;
  /**
   *
   * @type {TaxInfo}
   * @memberof PayerAllOf
   */
  tax_info?: TaxInfo;
  /**
   *
   * @type {AddressPortable}
   * @memberof PayerAllOf
   */
  address?: AddressPortable;
}
/**
 * The customer who approves and pays for the order. The customer is also known as the payer.
 * @export
 * @interface PayerBase
 */
export interface PayerBase {
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof PayerBase
   */
  email_address?: string;
  /**
   * The account identifier for a PayPal account.
   * @type {string}
   * @memberof PayerBase
   */
  payer_id?: string;
}
/**
 * The collection of payments, or transactions, for a purchase unit in an order. For example, authorized payments, captured payments, and refunds.
 * @export
 * @interface PaymentCollection
 */
export interface PaymentCollection {
  /**
   * An array of authorized payments for a purchase unit. A purchase unit can have zero or more authorized payments.
   * @type {Array<AuthorizationWithAdditionalData>}
   * @memberof PaymentCollection
   */
  authorizations?: Array<AuthorizationWithAdditionalData>;
  /**
   * An array of captured payments for a purchase unit. A purchase unit can have zero or more captured payments.
   * @type {Array<Capture>}
   * @memberof PaymentCollection
   */
  captures?: Array<Capture>;
  /**
   * An array of refunds for a purchase unit. A purchase unit can have zero or more refunds.
   * @type {Array<Refund>}
   * @memberof PaymentCollection
   */
  refunds?: Array<Refund>;
}
/**
 * The person or party who initiated or triggered the payment.
 * @export
 * @enum {string}
 */

export const PaymentInitiator = {
  Customer: 'CUSTOMER',
  Merchant: 'MERCHANT',
} as const;

export type PaymentInitiator =
  (typeof PaymentInitiator)[keyof typeof PaymentInitiator];

/**
 * Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.
 * @export
 * @interface PaymentInstruction
 */
export interface PaymentInstruction {
  /**
   * An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.
   * @type {Array<PlatformFee>}
   * @memberof PaymentInstruction
   */
  platform_fees?: Array<PlatformFee>;
  /**
   *
   * @type {DisbursementMode}
   * @memberof PaymentInstruction
   */
  disbursement_mode?: DisbursementMode;
  /**
   * This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible \'payee_pricing_tier_id\' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error.
   * @type {string}
   * @memberof PaymentInstruction
   */
  payee_pricing_tier_id?: string;
  /**
   * FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account.
   * @type {string}
   * @memberof PaymentInstruction
   */
  payee_receivable_fx_rate_id?: string;
}

/**
 * The customer and merchant payment preferences.
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
  /**
   *
   * @type {PayeePaymentMethodPreference}
   * @memberof PaymentMethod
   */
  payee_preferred?: PayeePaymentMethodPreference;
  /**
   * NACHA (the regulatory body governing the ACH network) requires that API callers (merchants, partners) obtain the consumer’s explicit authorization before initiating a transaction. To stay compliant, you’ll need to make sure that you retain a compliant authorization for each transaction that you originate to the ACH Network using this API. ACH transactions are categorized (using SEC codes) by how you capture authorization from the Receiver (the person whose bank account is being debited or credited). PayPal supports the following SEC codes.
   * @type {string}
   * @memberof PaymentMethod
   */
  standard_entry_class_code?: PaymentMethodStandardEntryClassCodeEnum;
}

export const PaymentMethodStandardEntryClassCodeEnum = {
  Tel: 'TEL',
  Web: 'WEB',
  Ccd: 'CCD',
  Ppd: 'PPD',
} as const;

export type PaymentMethodStandardEntryClassCodeEnum =
  (typeof PaymentMethodStandardEntryClassCodeEnum)[keyof typeof PaymentMethodStandardEntryClassCodeEnum];

/**
 * The payment source definition.
 * @export
 * @interface PaymentSource
 */
export interface PaymentSource {
  /**
   *
   * @type {CardRequest}
   * @memberof PaymentSource
   */
  card?: CardRequest;
  /**
   *
   * @type {Token}
   * @memberof PaymentSource
   */
  token?: Token;
  /**
   *
   * @type {PaypalWallet}
   * @memberof PaymentSource
   */
  paypal?: PaypalWallet;
  /**
   *
   * @type {BancontactRequest}
   * @memberof PaymentSource
   */
  bancontact?: BancontactRequest;
  /**
   *
   * @type {BlikRequest}
   * @memberof PaymentSource
   */
  blik?: BlikRequest;
  /**
   *
   * @type {EpsRequest}
   * @memberof PaymentSource
   */
  eps?: EpsRequest;
  /**
   *
   * @type {GiropayRequest}
   * @memberof PaymentSource
   */
  giropay?: GiropayRequest;
  /**
   *
   * @type {IdealRequest}
   * @memberof PaymentSource
   */
  ideal?: IdealRequest;
  /**
   *
   * @type {MybankRequest}
   * @memberof PaymentSource
   */
  mybank?: MybankRequest;
  /**
   *
   * @type {P24Request}
   * @memberof PaymentSource
   */
  p24?: P24Request;
  /**
   *
   * @type {SofortRequest}
   * @memberof PaymentSource
   */
  sofort?: SofortRequest;
  /**
   *
   * @type {TrustlyRequest}
   * @memberof PaymentSource
   */
  trustly?: TrustlyRequest;
  /**
   *
   * @type {ApplePayRequest}
   * @memberof PaymentSource
   */
  apple_pay?: ApplePayRequest;
  /**
   *
   * @type {any}
   * @memberof PaymentSource
   */
  google_pay?: any;
  /**
   *
   * @type {VenmoWalletRequest}
   * @memberof PaymentSource
   */
  venmo?: VenmoWalletRequest;
}
/**
 * The payment source used to fund the payment.
 * @export
 * @interface PaymentSourceResponse
 */
export interface PaymentSourceResponse {
  /**
   *
   * @type {CardResponse}
   * @memberof PaymentSourceResponse
   */
  card?: CardResponse;
  /**
   *
   * @type {PaypalWalletResponse}
   * @memberof PaymentSourceResponse
   */
  paypal?: PaypalWalletResponse;
  /**
   *
   * @type {Bancontact}
   * @memberof PaymentSourceResponse
   */
  bancontact?: Bancontact;
  /**
   *
   * @type {Blik}
   * @memberof PaymentSourceResponse
   */
  blik?: Blik;
  /**
   *
   * @type {Eps}
   * @memberof PaymentSourceResponse
   */
  eps?: Eps;
  /**
   *
   * @type {Giropay}
   * @memberof PaymentSourceResponse
   */
  giropay?: Giropay;
  /**
   *
   * @type {Ideal}
   * @memberof PaymentSourceResponse
   */
  ideal?: Ideal;
  /**
   *
   * @type {Mybank}
   * @memberof PaymentSourceResponse
   */
  mybank?: Mybank;
  /**
   *
   * @type {P24}
   * @memberof PaymentSourceResponse
   */
  p24?: P24;
  /**
   *
   * @type {Sofort}
   * @memberof PaymentSourceResponse
   */
  sofort?: Sofort;
  /**
   *
   * @type {Trustly}
   * @memberof PaymentSourceResponse
   */
  trustly?: Trustly;
  /**
   *
   * @type {VenmoWalletResponse}
   * @memberof PaymentSourceResponse
   */
  venmo?: VenmoWalletResponse;
}
/**
 * A resource that identifies a PayPal Wallet is used for payment.
 * @export
 * @interface PaypalWallet
 */
export interface PaypalWallet {
  /**
   * The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant\'s server so the saved payment source can be used for future transactions.
   * @type {string}
   * @memberof PaypalWallet
   */
  vault_id?: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof PaypalWallet
   */
  email_address?: string;
  /**
   *
   * @type {Name2}
   * @memberof PaypalWallet
   */
  name?: Name2;
  /**
   *
   * @type {PhoneWithType}
   * @memberof PaypalWallet
   */
  phone?: PhoneWithType;
  /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @type {string}
   * @memberof PaypalWallet
   */
  birth_date?: string;
  /**
   *
   * @type {TaxInfo}
   * @memberof PaypalWallet
   */
  tax_info?: TaxInfo;
  /**
   *
   * @type {AddressPortable2}
   * @memberof PaypalWallet
   */
  address?: AddressPortable2;
  /**
   *
   * @type {PaypalWalletAttributes}
   * @memberof PaypalWallet
   */
  attributes?: PaypalWalletAttributes;
  /**
   *
   * @type {PaypalWalletExperienceContext}
   * @memberof PaypalWallet
   */
  experience_context?: PaypalWalletExperienceContext;
  /**
   * The PayPal billing agreement ID. References an approved recurring payment for goods or services.
   * @type {string}
   * @memberof PaypalWallet
   */
  billing_agreement_id?: string;
}
/**
 * Additional attributes associated with the use of this PayPal Wallet.
 * @export
 * @interface PaypalWalletAttributes
 */
export interface PaypalWalletAttributes {
  /**
   *
   * @type {PaypalWalletCustomer}
   * @memberof PaypalWalletAttributes
   */
  customer?: PaypalWalletCustomer;
  /**
   *
   * @type {VaultPaypalWalletBase}
   * @memberof PaypalWalletAttributes
   */
  vault?: VaultPaypalWalletBase;
}
/**
 * Additional attributes associated with the use of a PayPal Wallet.
 * @export
 * @interface PaypalWalletAttributesResponse
 */
export interface PaypalWalletAttributesResponse {
  /**
   *
   * @type {PaypalWalletVaultResponse}
   * @memberof PaypalWalletAttributesResponse
   */
  vault?: PaypalWalletVaultResponse;
  /**
   * An array of merchant cobranded cards used by buyer to complete an order. This array will be present if a merchant has onboarded their cobranded card with PayPal and provided corresponding label(s).
   * @type {Array<CobrandedCard>}
   * @memberof PaypalWalletAttributesResponse
   */
  cobranded_cards?: Array<CobrandedCard>;
}
/**
 * The details about a customer in PayPal\'s system of record.
 * @export
 * @interface PaypalWalletCustomer
 */
export interface PaypalWalletCustomer {
  /**
   * The unique ID for a customer generated by PayPal.
   * @type {string}
   * @memberof PaypalWalletCustomer
   */
  id?: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof PaypalWalletCustomer
   */
  email_address?: string;
  /**
   *
   * @type {PhoneWithType}
   * @memberof PaypalWalletCustomer
   */
  phone?: PhoneWithType;
}
/**
 * Customizes the payer experience during the approval process for payment with PayPal.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>brand_name</code> and <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>
 * @export
 * @interface PaypalWalletExperienceContext
 */
export interface PaypalWalletExperienceContext {
  /**
   * The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  brand_name?: string;
  /**
   * The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  locale?: string;
  /**
   * The location from which the shipping address is derived.
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  shipping_preference?: PaypalWalletExperienceContextShippingPreferenceEnum;
  /**
   * Describes the URL.
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  return_url?: string;
  /**
   * Describes the URL.
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  cancel_url?: string;
  /**
   * The type of landing page to show on the PayPal site for customer checkout.
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  landing_page?: PaypalWalletExperienceContextLandingPageEnum;
  /**
   * Configures a <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow.
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  user_action?: PaypalWalletExperienceContextUserActionEnum;
  /**
   * The merchant-preferred payment methods.
   * @type {string}
   * @memberof PaypalWalletExperienceContext
   */
  payment_method_preference?: PaypalWalletExperienceContextPaymentMethodPreferenceEnum;
}

export const PaypalWalletExperienceContextShippingPreferenceEnum = {
  GetFromFile: 'GET_FROM_FILE',
  NoShipping: 'NO_SHIPPING',
  SetProvidedAddress: 'SET_PROVIDED_ADDRESS',
} as const;

export type PaypalWalletExperienceContextShippingPreferenceEnum =
  (typeof PaypalWalletExperienceContextShippingPreferenceEnum)[keyof typeof PaypalWalletExperienceContextShippingPreferenceEnum];
export const PaypalWalletExperienceContextLandingPageEnum = {
  Login: 'LOGIN',
  GuestCheckout: 'GUEST_CHECKOUT',
  NoPreference: 'NO_PREFERENCE',
} as const;

export type PaypalWalletExperienceContextLandingPageEnum =
  (typeof PaypalWalletExperienceContextLandingPageEnum)[keyof typeof PaypalWalletExperienceContextLandingPageEnum];
export const PaypalWalletExperienceContextUserActionEnum = {
  Continue: 'CONTINUE',
  PayNow: 'PAY_NOW',
} as const;

export type PaypalWalletExperienceContextUserActionEnum =
  (typeof PaypalWalletExperienceContextUserActionEnum)[keyof typeof PaypalWalletExperienceContextUserActionEnum];
export const PaypalWalletExperienceContextPaymentMethodPreferenceEnum = {
  Unrestricted: 'UNRESTRICTED',
  ImmediatePaymentRequired: 'IMMEDIATE_PAYMENT_REQUIRED',
} as const;

export type PaypalWalletExperienceContextPaymentMethodPreferenceEnum =
  (typeof PaypalWalletExperienceContextPaymentMethodPreferenceEnum)[keyof typeof PaypalWalletExperienceContextPaymentMethodPreferenceEnum];

/**
 * The PayPal Wallet response.
 * @export
 * @interface PaypalWalletResponse
 */
export interface PaypalWalletResponse {
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof PaypalWalletResponse
   */
  email_address?: string;
  /**
   * The PayPal payer ID, which is a masked version of the PayPal account number intended for use with third parties. The account number is reversibly encrypted and a proprietary variant of Base32 is used to encode the result.
   * @type {string}
   * @memberof PaypalWalletResponse
   */
  account_id?: string;
  /**
   * The account status indicates whether the buyer has verified the financial details associated with their PayPal account.
   * @type {string}
   * @memberof PaypalWalletResponse
   */
  account_status?: PaypalWalletResponseAccountStatusEnum;
  /**
   *
   * @type {Name2}
   * @memberof PaypalWalletResponse
   */
  name?: Name2;
  /**
   *
   * @type {PhoneType2}
   * @memberof PaypalWalletResponse
   */
  phone_type?: PhoneType2;
  /**
   *
   * @type {Phone2}
   * @memberof PaypalWalletResponse
   */
  phone_number?: Phone2;
  /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @type {string}
   * @memberof PaypalWalletResponse
   */
  birth_date?: string;
  /**
   *
   * @type {TaxInfo}
   * @memberof PaypalWalletResponse
   */
  tax_info?: TaxInfo;
  /**
   *
   * @type {AddressPortable2}
   * @memberof PaypalWalletResponse
   */
  address?: AddressPortable2;
  /**
   *
   * @type {PaypalWalletAttributesResponse}
   * @memberof PaypalWalletResponse
   */
  attributes?: PaypalWalletAttributesResponse;
}

export const PaypalWalletResponseAccountStatusEnum = {
  Verified: 'VERIFIED',
  Unverified: 'UNVERIFIED',
} as const;

export type PaypalWalletResponseAccountStatusEnum =
  (typeof PaypalWalletResponseAccountStatusEnum)[keyof typeof PaypalWalletResponseAccountStatusEnum];

/**
 * The details about a saved PayPal Wallet payment source.
 * @export
 * @interface PaypalWalletVaultResponse
 */
export interface PaypalWalletVaultResponse {
  /**
   * The PayPal-generated ID for the saved payment source.
   * @type {string}
   * @memberof PaypalWalletVaultResponse
   */
  id?: string;
  /**
   * The vault status.
   * @type {string}
   * @memberof PaypalWalletVaultResponse
   * @deprecated
   */
  status?: PaypalWalletVaultResponseStatusEnum;
  /**
   *
   * @type {PaypalWalletCustomer}
   * @memberof PaypalWalletVaultResponse
   */
  customer?: PaypalWalletCustomer;
  /**
   * An array of request-related HATEOAS links.
   * @type {Array<LinkDescription>}
   * @memberof PaypalWalletVaultResponse
   */
  links?: Array<LinkDescription>;
  /**
   *
   * @type {any}
   * @memberof PaypalWalletVaultResponse
   */
  owner_id?: any;
}

export const PaypalWalletVaultResponseStatusEnum = {
  Vaulted: 'VAULTED',
  Created: 'CREATED',
  Approved: 'APPROVED',
} as const;

export type PaypalWalletVaultResponseStatusEnum =
  (typeof PaypalWalletVaultResponseStatusEnum)[keyof typeof PaypalWalletVaultResponseStatusEnum];

/**
 *
 * @export
 * @interface PaypalWalletVaultResponseAllOf
 */
export interface PaypalWalletVaultResponseAllOf {
  /**
   *
   * @type {PaypalWalletCustomer}
   * @memberof PaypalWalletVaultResponseAllOf
   */
  customer?: PaypalWalletCustomer;
  /**
   *
   * @type {any}
   * @memberof PaypalWalletVaultResponseAllOf
   */
  owner_id?: any;
}
/**
 * The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
 * @export
 * @interface Phone
 */
export interface Phone {
  /**
   * The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
   * @type {string}
   * @memberof Phone
   */
  country_code: string;
  /**
   * The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
   * @type {string}
   * @memberof Phone
   */
  national_number: string;
  /**
   * The extension number.
   * @type {string}
   * @memberof Phone
   */
  extension_number?: string;
}
/**
 * The phone number in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
 * @export
 * @interface Phone2
 */
export interface Phone2 {
  /**
   * The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
   * @type {string}
   * @memberof Phone2
   */
  national_number: string;
}
/**
 * The phone type.
 * @export
 * @enum {string}
 */

export const PhoneType = {
  Fax: 'FAX',
  Home: 'HOME',
  Mobile: 'MOBILE',
  Other: 'OTHER',
  Pager: 'PAGER',
} as const;

export type PhoneType = (typeof PhoneType)[keyof typeof PhoneType];

/**
 * The phone type.
 * @export
 * @enum {string}
 */

export const PhoneType2 = {
  Fax: 'FAX',
  Home: 'HOME',
  Mobile: 'MOBILE',
  Other: 'OTHER',
  Pager: 'PAGER',
  Work: 'WORK',
} as const;

export type PhoneType2 = (typeof PhoneType2)[keyof typeof PhoneType2];

/**
 * The phone information.
 * @export
 * @interface PhoneWithType
 */
export interface PhoneWithType {
  /**
   *
   * @type {PhoneType}
   * @memberof PhoneWithType
   */
  phone_type?: PhoneType;
  /**
   *
   * @type {Phone}
   * @memberof PhoneWithType
   */
  phone_number: Phone;
}

/**
 * The platform or partner fee, commission, or brokerage fee that is associated with the transaction. Not a separate or isolated transaction leg from the external perspective. The platform fee is limited in scope and is always associated with the original payment for the purchase unit.
 * @export
 * @interface PlatformFee
 */
export interface PlatformFee {
  /**
   *
   * @type {Money}
   * @memberof PlatformFee
   */
  amount: Money;
  /**
   *
   * @type {PayeeBase}
   * @memberof PlatformFee
   */
  payee?: PayeeBase;
}
/**
 * The instruction to process an order.
 * @export
 * @enum {string}
 */

export const ProcessingInstruction = {
  OrderCompleteOnPaymentApproval: 'ORDER_COMPLETE_ON_PAYMENT_APPROVAL',
  NoInstruction: 'NO_INSTRUCTION',
} as const;

export type ProcessingInstruction =
  (typeof ProcessingInstruction)[keyof typeof ProcessingInstruction];

/**
 * The processor response information for payment requests, such as direct credit card transactions.
 * @export
 * @interface ProcessorResponse
 */
export interface ProcessorResponse {
  /**
   * The address verification code for Visa, Discover, Mastercard, or American Express transactions.
   * @type {string}
   * @memberof ProcessorResponse
   */
  avs_code?: ProcessorResponseAvsCodeEnum;
  /**
   * The card verification value code for for Visa, Discover, Mastercard, or American Express.
   * @type {string}
   * @memberof ProcessorResponse
   */
  cvv_code?: ProcessorResponseCvvCodeEnum;
  /**
   * Processor response code for the non-PayPal payment processor errors.
   * @type {string}
   * @memberof ProcessorResponse
   */
  response_code?: ProcessorResponseResponseCodeEnum;
  /**
   * The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.
   * @type {string}
   * @memberof ProcessorResponse
   */
  payment_advice_code?: ProcessorResponsePaymentAdviceCodeEnum;
}

export const ProcessorResponseAvsCodeEnum = {
  A: 'A',
  B: 'B',
  C: 'C',
  D: 'D',
  E: 'E',
  F: 'F',
  G: 'G',
  I: 'I',
  M: 'M',
  N: 'N',
  P: 'P',
  R: 'R',
  S: 'S',
  U: 'U',
  W: 'W',
  X: 'X',
  Y: 'Y',
  Z: 'Z',
  Null: 'Null',
  _0: '0',
  _1: '1',
  _2: '2',
  _3: '3',
  _4: '4',
} as const;

export type ProcessorResponseAvsCodeEnum =
  (typeof ProcessorResponseAvsCodeEnum)[keyof typeof ProcessorResponseAvsCodeEnum];
export const ProcessorResponseCvvCodeEnum = {
  E: 'E',
  I: 'I',
  M: 'M',
  N: 'N',
  P: 'P',
  S: 'S',
  U: 'U',
  X: 'X',
  AllOthers: 'All others',
  _0: '0',
  _1: '1',
  _2: '2',
  _3: '3',
  _4: '4',
} as const;

export type ProcessorResponseCvvCodeEnum =
  (typeof ProcessorResponseCvvCodeEnum)[keyof typeof ProcessorResponseCvvCodeEnum];
export const ProcessorResponseResponseCodeEnum = {
  _0000: '0000',
  _00N7: '00N7',
  _0100: '0100',
  _0390: '0390',
  _0500: '0500',
  _0580: '0580',
  _0800: '0800',
  _0880: '0880',
  _0890: '0890',
  _0960: '0960',
  _0R00: '0R00',
  _1000: '1000',
  _10Br: '10BR',
  _1300: '1300',
  _1310: '1310',
  _1312: '1312',
  _1317: '1317',
  _1320: '1320',
  _1330: '1330',
  _1335: '1335',
  _1340: '1340',
  _1350: '1350',
  _1352: '1352',
  _1360: '1360',
  _1370: '1370',
  _1380: '1380',
  _1382: '1382',
  _1384: '1384',
  _1390: '1390',
  _1393: '1393',
  _5100: '5100',
  _5110: '5110',
  _5120: '5120',
  _5130: '5130',
  _5135: '5135',
  _5140: '5140',
  _5150: '5150',
  _5160: '5160',
  _5170: '5170',
  _5180: '5180',
  _5190: '5190',
  _5200: '5200',
  _5210: '5210',
  _5400: '5400',
  _5500: '5500',
  _5650: '5650',
  _5700: '5700',
  _5710: '5710',
  _5800: '5800',
  _5900: '5900',
  _5910: '5910',
  _5920: '5920',
  _5930: '5930',
  _5950: '5950',
  _6300: '6300',
  _7600: '7600',
  _7700: '7700',
  _7710: '7710',
  _7800: '7800',
  _7900: '7900',
  _8000: '8000',
  _8010: '8010',
  _8020: '8020',
  _8030: '8030',
  _8100: '8100',
  _8110: '8110',
  _8220: '8220',
  _9100: '9100',
  _9500: '9500',
  _9510: '9510',
  _9520: '9520',
  _9530: '9530',
  _9540: '9540',
  _9600: '9600',
  Pcnr: 'PCNR',
  Pcvv: 'PCVV',
  Pp06: 'PP06',
  Pprn: 'PPRN',
  Ppad: 'PPAD',
  Ppab: 'PPAB',
  Ppae: 'PPAE',
  Ppag: 'PPAG',
  Ppai: 'PPAI',
  Ppar: 'PPAR',
  Ppau: 'PPAU',
  Ppav: 'PPAV',
  Ppax: 'PPAX',
  Ppbg: 'PPBG',
  Ppc2: 'PPC2',
  Ppce: 'PPCE',
  Ppco: 'PPCO',
  Ppcr: 'PPCR',
  Ppct: 'PPCT',
  Ppcu: 'PPCU',
  Ppd3: 'PPD3',
  Ppdc: 'PPDC',
  Ppdi: 'PPDI',
  Ppdv: 'PPDV',
  Ppdt: 'PPDT',
  Ppef: 'PPEF',
  Ppel: 'PPEL',
  Pper: 'PPER',
  Ppex: 'PPEX',
  Ppfe: 'PPFE',
  Ppfi: 'PPFI',
  Ppfr: 'PPFR',
  Ppfv: 'PPFV',
  Ppgr: 'PPGR',
  Pph1: 'PPH1',
  Ppif: 'PPIF',
  Ppii: 'PPII',
  Ppim: 'PPIM',
  Ppit: 'PPIT',
  Pplr: 'PPLR',
  Ppls: 'PPLS',
  Ppmb: 'PPMB',
  Ppmc: 'PPMC',
  Ppmd: 'PPMD',
  Ppnc: 'PPNC',
  Ppnl: 'PPNL',
  Ppnm: 'PPNM',
  Ppnt: 'PPNT',
  Ppph: 'PPPH',
  Pppi: 'PPPI',
  Pppm: 'PPPM',
  Ppqc: 'PPQC',
  Ppre: 'PPRE',
  Pprf: 'PPRF',
  Pprr: 'PPRR',
  Pps0: 'PPS0',
  Pps1: 'PPS1',
  Pps2: 'PPS2',
  Pps3: 'PPS3',
  Pps4: 'PPS4',
  Pps5: 'PPS5',
  Pps6: 'PPS6',
  Ppsc: 'PPSC',
  Ppsd: 'PPSD',
  Ppse: 'PPSE',
  Ppte: 'PPTE',
  Pptf: 'PPTF',
  Ppti: 'PPTI',
  Pptr: 'PPTR',
  Pptt: 'PPTT',
  Pptv: 'PPTV',
  Ppua: 'PPUA',
  Ppuc: 'PPUC',
  Ppue: 'PPUE',
  Ppui: 'PPUI',
  Ppup: 'PPUP',
  Ppur: 'PPUR',
  Ppvc: 'PPVC',
  Ppve: 'PPVE',
  Ppvt: 'PPVT',
} as const;

export type ProcessorResponseResponseCodeEnum =
  (typeof ProcessorResponseResponseCodeEnum)[keyof typeof ProcessorResponseResponseCodeEnum];
export const ProcessorResponsePaymentAdviceCodeEnum = {
  _01: '01',
  _02: '02',
  _03: '03',
  _21: '21',
} as const;

export type ProcessorResponsePaymentAdviceCodeEnum =
  (typeof ProcessorResponsePaymentAdviceCodeEnum)[keyof typeof ProcessorResponsePaymentAdviceCodeEnum];

/**
 * The purchase unit details. Used to capture required information for the payment contract.
 * @export
 * @interface PurchaseUnit
 */
export interface PurchaseUnit {
  /**
   * The API caller-provided external ID for the purchase unit. Required for multiple purchase units when you must update the order through `PATCH`. If you omit this value and the order contains only one purchase unit, PayPal sets this value to `default`. <blockquote><strong>Note:</strong> If there are multiple purchase units, <code>reference_id</code> is required for each purchase unit.</blockquote>
   * @type {string}
   * @memberof PurchaseUnit
   */
  reference_id?: string;
  /**
   *
   * @type {AmountWithBreakdown}
   * @memberof PurchaseUnit
   */
  amount?: AmountWithBreakdown;
  /**
   *
   * @type {Payee}
   * @memberof PurchaseUnit
   */
  payee?: Payee;
  /**
   *
   * @type {PaymentInstruction}
   * @memberof PurchaseUnit
   */
  payment_instruction?: PaymentInstruction;
  /**
   * The purchase description.
   * @type {string}
   * @memberof PurchaseUnit
   */
  description?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof PurchaseUnit
   */
  custom_id?: string;
  /**
   * The API caller-provided external invoice ID for this order.
   * @type {string}
   * @memberof PurchaseUnit
   */
  invoice_id?: string;
  /**
   * The PayPal-generated ID for the purchase unit. This ID appears in both the payer\'s transaction history and the emails that the payer receives. In addition, this ID is available in transaction and settlement reports that merchants and API callers can use to reconcile transactions. This ID is only available when an order is saved by calling <code>v2/checkout/orders/id/save</code>.
   * @type {string}
   * @memberof PurchaseUnit
   */
  id?: string;
  /**
   * The payment descriptor on account transactions on the customer\'s credit card statement, that PayPal sends to processors. The maximum length of the soft descriptor information that you can pass in the API field is 22 characters, in the following format:<code>22 - len(PAYPAL * (8)) - len(<var>Descriptor in Payment Receiving Preferences of Merchant account</var> + 1)</code>The PAYPAL prefix uses 8 characters.<br/><br/>The soft descriptor supports the following ASCII characters:<ul><li>Alphanumeric characters</li><li>Dashes</li><li>Asterisks</li><li>Periods (.)</li><li>Spaces</li></ul>For Wallet payments marketplace integrations:<ul><li>The merchant descriptor in the Payment Receiving Preferences must be the marketplace name.</li><li>You can\'t use the remaining space to show the customer service number.</li><li>The remaining spaces can be a combination of seller name and country.</li></ul><br/>For unbranded payments (Direct Card) marketplace integrations, use a combination of the seller name and phone number.
   * @type {string}
   * @memberof PurchaseUnit
   */
  soft_descriptor?: string;
  /**
   * An array of items that the customer purchases from the merchant.
   * @type {Array<Item>}
   * @memberof PurchaseUnit
   */
  items?: Array<Item>;
  /**
   *
   * @type {ShippingWithTrackingDetails}
   * @memberof PurchaseUnit
   */
  shipping?: ShippingWithTrackingDetails;
  /**
   *
   * @type {SupplementaryData}
   * @memberof PurchaseUnit
   */
  supplementary_data?: SupplementaryData;
  /**
   *
   * @type {PaymentCollection}
   * @memberof PurchaseUnit
   */
  payments?: PaymentCollection;
}
/**
 * The purchase unit request. Includes required information for the payment contract.
 * @export
 * @interface PurchaseUnitRequest
 */
export interface PurchaseUnitRequest {
  /**
   * The API caller-provided external ID for the purchase unit. Required for multiple purchase units when you must update the order through `PATCH`. If you omit this value and the order contains only one purchase unit, PayPal sets this value to `default`.
   * @type {string}
   * @memberof PurchaseUnitRequest
   */
  reference_id?: string;
  /**
   *
   * @type {AmountWithBreakdown}
   * @memberof PurchaseUnitRequest
   */
  amount: AmountWithBreakdown;
  /**
   *
   * @type {Payee}
   * @memberof PurchaseUnitRequest
   */
  payee?: Payee;
  /**
   *
   * @type {PaymentInstruction}
   * @memberof PurchaseUnitRequest
   */
  payment_instruction?: PaymentInstruction;
  /**
   * The purchase description. The maximum length of the character is dependent on the type of characters used. The character length is specified assuming a US ASCII character. Depending on type of character; (e.g. accented character, Japanese characters) the number of characters that that can be specified as input might not equal the permissible max length.
   * @type {string}
   * @memberof PurchaseUnitRequest
   */
  description?: string;
  /**
   * The API caller-provided external ID. Used to reconcile client transactions with PayPal transactions. Appears in transaction and settlement reports but is not visible to the payer.
   * @type {string}
   * @memberof PurchaseUnitRequest
   */
  custom_id?: string;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof PurchaseUnitRequest
   */
  invoice_id?: string;
  /**
   * The soft descriptor is the dynamic text used to construct the statement descriptor that appears on a payer\'s card statement.<br><br>If an Order is paid using the \"PayPal Wallet\", the statement descriptor will appear in following format on the payer\'s card statement: <code><var>PAYPAL_prefix</var>+(space)+<var>merchant_descriptor</var>+(space)+ <var>soft_descriptor</var></code><blockquote><strong>Note:</strong> The merchant descriptor is the descriptor of the merchant’s payment receiving preferences which can be seen by logging into the merchant account https://www.sandbox.paypal.com/businessprofile/settings/info/edit</blockquote>The <code>PAYPAL</code> prefix uses 8 characters. Only the first 22 characters will be displayed in the statement. <br>For example, if:<ul><li>The PayPal prefix toggle is <code>PAYPAL *</code>.</li><li>The merchant descriptor in the profile is <code>Janes Gift</code>.</li><li>The soft descriptor is <code>800-123-1234</code>.</li></ul>Then, the statement descriptor on the card is <code>PAYPAL * Janes Gift 80</code>.
   * @type {string}
   * @memberof PurchaseUnitRequest
   */
  soft_descriptor?: string;
  /**
   * An array of items that the customer purchases from the merchant.
   * @type {Array<Item>}
   * @memberof PurchaseUnitRequest
   */
  items?: Array<Item>;
  /**
   *
   * @type {ShippingDetail}
   * @memberof PurchaseUnitRequest
   */
  shipping?: ShippingDetail;
  /**
   *
   * @type {SupplementaryData}
   * @memberof PurchaseUnitRequest
   */
  supplementary_data?: SupplementaryData;
}
/**
 *
 * @export
 * @interface REDIRECTPAYERFORALTERNATEFUNDING
 */
export interface REDIRECTPAYERFORALTERNATEFUNDING {
  /**
   *
   * @type {string}
   * @memberof REDIRECTPAYERFORALTERNATEFUNDING
   */
  issue?: REDIRECTPAYERFORALTERNATEFUNDINGIssueEnum;
  /**
   *
   * @type {string}
   * @memberof REDIRECTPAYERFORALTERNATEFUNDING
   */
  description?: REDIRECTPAYERFORALTERNATEFUNDINGDescriptionEnum;
}

export const REDIRECTPAYERFORALTERNATEFUNDINGIssueEnum = {
  RedirectPayerForAlternateFunding: 'REDIRECT_PAYER_FOR_ALTERNATE_FUNDING',
} as const;

export type REDIRECTPAYERFORALTERNATEFUNDINGIssueEnum =
  (typeof REDIRECTPAYERFORALTERNATEFUNDINGIssueEnum)[keyof typeof REDIRECTPAYERFORALTERNATEFUNDINGIssueEnum];
export const REDIRECTPAYERFORALTERNATEFUNDINGDescriptionEnum = {
  TransactionFailedRedirectThePayerToSelectAnotherFundingSource:
    'Transaction failed. Redirect the payer to select another funding source.',
} as const;

export type REDIRECTPAYERFORALTERNATEFUNDINGDescriptionEnum =
  (typeof REDIRECTPAYERFORALTERNATEFUNDINGDescriptionEnum)[keyof typeof REDIRECTPAYERFORALTERNATEFUNDINGDescriptionEnum];

/**
 *
 * @export
 * @interface REFERENCEDCARDEXPIRED
 */
export interface REFERENCEDCARDEXPIRED {
  /**
   *
   * @type {string}
   * @memberof REFERENCEDCARDEXPIRED
   */
  issue?: REFERENCEDCARDEXPIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof REFERENCEDCARDEXPIRED
   */
  description?: REFERENCEDCARDEXPIREDDescriptionEnum;
}

export const REFERENCEDCARDEXPIREDIssueEnum = {
  ReferencedCardExpired: 'REFERENCED_CARD_EXPIRED',
} as const;

export type REFERENCEDCARDEXPIREDIssueEnum =
  (typeof REFERENCEDCARDEXPIREDIssueEnum)[keyof typeof REFERENCEDCARDEXPIREDIssueEnum];
export const REFERENCEDCARDEXPIREDDescriptionEnum = {
  TheCardUnderlyingTheTokenHasExpiredAndHenceCannotBeUsedToProcessAPayment:
    'The card underlying the token has expired and hence cannot be used to process a payment.',
} as const;

export type REFERENCEDCARDEXPIREDDescriptionEnum =
  (typeof REFERENCEDCARDEXPIREDDescriptionEnum)[keyof typeof REFERENCEDCARDEXPIREDDescriptionEnum];

/**
 *
 * @export
 * @interface REFERENCEIDNOTFOUND
 */
export interface REFERENCEIDNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof REFERENCEIDNOTFOUND
   */
  issue?: REFERENCEIDNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof REFERENCEIDNOTFOUND
   */
  description?: REFERENCEIDNOTFOUNDDescriptionEnum;
}

export const REFERENCEIDNOTFOUNDIssueEnum = {
  ReferenceIdNotFound: 'REFERENCE_ID_NOT_FOUND',
} as const;

export type REFERENCEIDNOTFOUNDIssueEnum =
  (typeof REFERENCEIDNOTFOUNDIssueEnum)[keyof typeof REFERENCEIDNOTFOUNDIssueEnum];
export const REFERENCEIDNOTFOUNDDescriptionEnum = {
  FilterExpressionValueIsIncorrectPleaseCheckTheValueOfTheReferenceIdAndTryAgain:
    'Filter expression value is incorrect. Please check the value of the reference_id and try again.',
} as const;

export type REFERENCEIDNOTFOUNDDescriptionEnum =
  (typeof REFERENCEIDNOTFOUNDDescriptionEnum)[keyof typeof REFERENCEIDNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface REFERENCEIDREQUIRED
 */
export interface REFERENCEIDREQUIRED {
  /**
   *
   * @type {string}
   * @memberof REFERENCEIDREQUIRED
   */
  issue?: REFERENCEIDREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof REFERENCEIDREQUIRED
   */
  description?: REFERENCEIDREQUIREDDescriptionEnum;
}

export const REFERENCEIDREQUIREDIssueEnum = {
  ReferenceIdRequired: 'REFERENCE_ID_REQUIRED',
} as const;

export type REFERENCEIDREQUIREDIssueEnum =
  (typeof REFERENCEIDREQUIREDIssueEnum)[keyof typeof REFERENCEIDREQUIREDIssueEnum];
export const REFERENCEIDREQUIREDDescriptionEnum = {
  ReferenceIdIsRequiredForEachPurchaseUnitIfMultiplePurchaseUnitAreProvided:
    "'reference_id' is required for each 'purchase_unit' if multiple 'purchase_unit' are provided.",
} as const;

export type REFERENCEIDREQUIREDDescriptionEnum =
  (typeof REFERENCEIDREQUIREDDescriptionEnum)[keyof typeof REFERENCEIDREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT
 */
export interface REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT {
  /**
   *
   * @type {string}
   * @memberof REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT
   */
  issue?: REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTIssueEnum;
  /**
   *
   * @type {string}
   * @memberof REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT
   */
  description?: REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTDescriptionEnum;
}

export const REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTIssueEnum = {
  RequiredParameterForCustomerInitiatedPayment:
    'REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT',
} as const;

export type REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTIssueEnum =
  (typeof REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTIssueEnum)[keyof typeof REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTIssueEnum];
export const REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTDescriptionEnum = {
  ThisParameterIsRequiredWhenTheCustomerIsPresentIfTheCustomerIsNotPresentIndicateSoBySendingPaymentInitiatorMerchantForDetailsSeeAHrefhttpsDeveloperPaypalComDocsApiOrdersV2DefinitionCardStoredCredentialStoredCredentialA:
    'This parameter is required when the customer is present. If the customer is not present, indicate so by sending payment_initiator=`MERCHANT`. For details, see <a href="https://developer.paypal.com/docs/api/orders/v2/#definition-card_stored_credential">Stored Credential</a>.',
} as const;

export type REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTDescriptionEnum =
  (typeof REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTDescriptionEnum)[keyof typeof REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTDescriptionEnum];

/**
 *
 * @export
 * @interface REQUIREDPARAMETERFORPAYMENTSOURCE
 */
export interface REQUIREDPARAMETERFORPAYMENTSOURCE {
  /**
   *
   * @type {string}
   * @memberof REQUIREDPARAMETERFORPAYMENTSOURCE
   */
  issue?: REQUIREDPARAMETERFORPAYMENTSOURCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof REQUIREDPARAMETERFORPAYMENTSOURCE
   */
  description?: REQUIREDPARAMETERFORPAYMENTSOURCEDescriptionEnum;
}

export const REQUIREDPARAMETERFORPAYMENTSOURCEIssueEnum = {
  RequiredParameterForPaymentSource: 'REQUIRED_PARAMETER_FOR_PAYMENT_SOURCE',
} as const;

export type REQUIREDPARAMETERFORPAYMENTSOURCEIssueEnum =
  (typeof REQUIREDPARAMETERFORPAYMENTSOURCEIssueEnum)[keyof typeof REQUIREDPARAMETERFORPAYMENTSOURCEIssueEnum];
export const REQUIREDPARAMETERFORPAYMENTSOURCEDescriptionEnum = {
  TheParameterIsRequiredForProvidedPaymentSource:
    'The parameter is required for provided payment source.',
} as const;

export type REQUIREDPARAMETERFORPAYMENTSOURCEDescriptionEnum =
  (typeof REQUIREDPARAMETERFORPAYMENTSOURCEDescriptionEnum)[keyof typeof REQUIREDPARAMETERFORPAYMENTSOURCEDescriptionEnum];

/**
 *
 * @export
 * @interface RETURNURLREQUIRED
 */
export interface RETURNURLREQUIRED {
  /**
   *
   * @type {string}
   * @memberof RETURNURLREQUIRED
   */
  issue?: RETURNURLREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof RETURNURLREQUIRED
   */
  description?: RETURNURLREQUIREDDescriptionEnum;
}

export const RETURNURLREQUIREDIssueEnum = {
  ReturnUrlRequired: 'RETURN_URL_REQUIRED',
} as const;

export type RETURNURLREQUIREDIssueEnum =
  (typeof RETURNURLREQUIREDIssueEnum)[keyof typeof RETURNURLREQUIREDIssueEnum];
export const RETURNURLREQUIREDDescriptionEnum = {
  TheReturnUrlIsRequiredWhenAttemptingToVaultThisSource:
    'The return url is required when attempting to vault this source.',
} as const;

export type RETURNURLREQUIREDDescriptionEnum =
  (typeof RETURNURLREQUIREDDescriptionEnum)[keyof typeof RETURNURLREQUIREDDescriptionEnum];

/**
 * The refund information.
 * @export
 * @interface Refund
 */
export interface Refund {
  /**
   * The status of the refund.
   * @type {string}
   * @memberof Refund
   */
  status?: RefundStatusEnum;
  /**
   *
   * @type {RefundStatusDetails}
   * @memberof Refund
   */
  status_details?: RefundStatusDetails;
  /**
   * The PayPal-generated ID for the refund.
   * @type {string}
   * @memberof Refund
   */
  id?: string;
  /**
   *
   * @type {Money}
   * @memberof Refund
   */
  amount?: Money;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof Refund
   */
  invoice_id?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof Refund
   */
  custom_id?: string;
  /**
   * Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.
   * @type {string}
   * @memberof Refund
   */
  acquirer_reference_number?: string;
  /**
   * The reason for the refund. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof Refund
   */
  note_to_payer?: string;
  /**
   *
   * @type {MerchantPayableBreakdown}
   * @memberof Refund
   */
  seller_payable_breakdown?: MerchantPayableBreakdown;
  /**
   *
   * @type {PayeeBase}
   * @memberof Refund
   */
  payer?: PayeeBase;
  /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @type {Array<LinkDescription>}
   * @memberof Refund
   */
  links?: Array<LinkDescription>;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Refund
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Refund
   */
  update_time?: string;
}

export const RefundStatusEnum = {
  Cancelled: 'CANCELLED',
  Failed: 'FAILED',
  Pending: 'PENDING',
  Completed: 'COMPLETED',
} as const;

export type RefundStatusEnum =
  (typeof RefundStatusEnum)[keyof typeof RefundStatusEnum];

/**
 *
 * @export
 * @interface RefundAllOf
 */
export interface RefundAllOf {
  /**
   * The PayPal-generated ID for the refund.
   * @type {string}
   * @memberof RefundAllOf
   */
  id?: string;
  /**
   *
   * @type {Money}
   * @memberof RefundAllOf
   */
  amount?: Money;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof RefundAllOf
   */
  invoice_id?: string;
  /**
   * The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
   * @type {string}
   * @memberof RefundAllOf
   */
  custom_id?: string;
  /**
   * Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.
   * @type {string}
   * @memberof RefundAllOf
   */
  acquirer_reference_number?: string;
  /**
   * The reason for the refund. Appears in both the payer\'s transaction history and the emails that the payer receives.
   * @type {string}
   * @memberof RefundAllOf
   */
  note_to_payer?: string;
  /**
   *
   * @type {MerchantPayableBreakdown}
   * @memberof RefundAllOf
   */
  seller_payable_breakdown?: MerchantPayableBreakdown;
  /**
   *
   * @type {PayeeBase}
   * @memberof RefundAllOf
   */
  payer?: PayeeBase;
  /**
   * An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
   * @type {Array<LinkDescription>}
   * @memberof RefundAllOf
   */
  links?: Array<LinkDescription>;
}
/**
 * The refund status.
 * @export
 * @interface RefundStatus
 */
export interface RefundStatus {
  /**
   * The status of the refund.
   * @type {string}
   * @memberof RefundStatus
   */
  status?: RefundStatusStatusEnum;
  /**
   *
   * @type {RefundStatusDetails}
   * @memberof RefundStatus
   */
  status_details?: RefundStatusDetails;
}

export const RefundStatusStatusEnum = {
  Cancelled: 'CANCELLED',
  Failed: 'FAILED',
  Pending: 'PENDING',
  Completed: 'COMPLETED',
} as const;

export type RefundStatusStatusEnum =
  (typeof RefundStatusStatusEnum)[keyof typeof RefundStatusStatusEnum];

/**
 * The details of the refund status.
 * @export
 * @interface RefundStatusDetails
 */
export interface RefundStatusDetails {
  /**
   * The reason why the refund has the `PENDING` or `FAILED` status.
   * @type {string}
   * @memberof RefundStatusDetails
   */
  reason?: RefundStatusDetailsReasonEnum;
}

export const RefundStatusDetailsReasonEnum = {
  Echeck: 'ECHECK',
} as const;

export type RefundStatusDetailsReasonEnum =
  (typeof RefundStatusDetailsReasonEnum)[keyof typeof RefundStatusDetailsReasonEnum];

/**
 *
 * @export
 * @interface SAVEORDERNOTSUPPORTED
 */
export interface SAVEORDERNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof SAVEORDERNOTSUPPORTED
   */
  issue?: SAVEORDERNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof SAVEORDERNOTSUPPORTED
   */
  description?: SAVEORDERNOTSUPPORTEDDescriptionEnum;
}

export const SAVEORDERNOTSUPPORTEDIssueEnum = {
  SaveOrderNotSupported: 'SAVE_ORDER_NOT_SUPPORTED',
} as const;

export type SAVEORDERNOTSUPPORTEDIssueEnum =
  (typeof SAVEORDERNOTSUPPORTEDIssueEnum)[keyof typeof SAVEORDERNOTSUPPORTEDIssueEnum];
export const SAVEORDERNOTSUPPORTEDDescriptionEnum = {
  TheApiCallerAccountIsSetupInAWayThatDoesNotAllowItToBeUsedForSavingTheOrderThisFunctionalityIsNotAvailableForPayPalCommercePlatformForPlatformsMarketplaces:
    'The API caller account is setup in a way that does not allow it to be used for saving the order. This functionality is not available for PayPal Commerce Platform for Platforms & Marketplaces.',
} as const;

export type SAVEORDERNOTSUPPORTEDDescriptionEnum =
  (typeof SAVEORDERNOTSUPPORTEDDescriptionEnum)[keyof typeof SAVEORDERNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface SETUPERRORFORBANK
 */
export interface SETUPERRORFORBANK {
  /**
   *
   * @type {string}
   * @memberof SETUPERRORFORBANK
   */
  issue?: SETUPERRORFORBANKIssueEnum;
  /**
   *
   * @type {string}
   * @memberof SETUPERRORFORBANK
   */
  description?: SETUPERRORFORBANKDescriptionEnum;
}

export const SETUPERRORFORBANKIssueEnum = {
  SetupErrorForBank: 'SETUP_ERROR_FOR_BANK',
} as const;

export type SETUPERRORFORBANKIssueEnum =
  (typeof SETUPERRORFORBANKIssueEnum)[keyof typeof SETUPERRORFORBANKIssueEnum];
export const SETUPERRORFORBANKDescriptionEnum = {
  TheApiCallerAccountSetupForBankPaymentsIsIncompleteOrIncorrectPleaseContactYourPayPalAccountManager:
    'The API Caller account setup, for bank payments, is incomplete or incorrect. Please contact your PayPal account manager.',
} as const;

export type SETUPERRORFORBANKDescriptionEnum =
  (typeof SETUPERRORFORBANKDescriptionEnum)[keyof typeof SETUPERRORFORBANKDescriptionEnum];

/**
 *
 * @export
 * @interface SHIPPINGADDRESSINVALID
 */
export interface SHIPPINGADDRESSINVALID {
  /**
   *
   * @type {string}
   * @memberof SHIPPINGADDRESSINVALID
   */
  issue?: SHIPPINGADDRESSINVALIDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof SHIPPINGADDRESSINVALID
   */
  description?: SHIPPINGADDRESSINVALIDDescriptionEnum;
}

export const SHIPPINGADDRESSINVALIDIssueEnum = {
  ShippingAddressInvalid: 'SHIPPING_ADDRESS_INVALID',
} as const;

export type SHIPPINGADDRESSINVALIDIssueEnum =
  (typeof SHIPPINGADDRESSINVALIDIssueEnum)[keyof typeof SHIPPINGADDRESSINVALIDIssueEnum];
export const SHIPPINGADDRESSINVALIDDescriptionEnum = {
  ProvidedShippingAddressIsInvalid: 'Provided shipping address is invalid.',
} as const;

export type SHIPPINGADDRESSINVALIDDescriptionEnum =
  (typeof SHIPPINGADDRESSINVALIDDescriptionEnum)[keyof typeof SHIPPINGADDRESSINVALIDDescriptionEnum];

/**
 *
 * @export
 * @interface SHIPPINGOPTIONNOTSELECTED
 */
export interface SHIPPINGOPTIONNOTSELECTED {
  /**
   *
   * @type {string}
   * @memberof SHIPPINGOPTIONNOTSELECTED
   */
  issue?: SHIPPINGOPTIONNOTSELECTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof SHIPPINGOPTIONNOTSELECTED
   */
  description?: SHIPPINGOPTIONNOTSELECTEDDescriptionEnum;
}

export const SHIPPINGOPTIONNOTSELECTEDIssueEnum = {
  ShippingOptionNotSelected: 'SHIPPING_OPTION_NOT_SELECTED',
} as const;

export type SHIPPINGOPTIONNOTSELECTEDIssueEnum =
  (typeof SHIPPINGOPTIONNOTSELECTEDIssueEnum)[keyof typeof SHIPPINGOPTIONNOTSELECTEDIssueEnum];
export const SHIPPINGOPTIONNOTSELECTEDDescriptionEnum = {
  AtLeastOneOfTheShippingOptionShouldBeSetToSelectedTrue:
    "At least one of the shipping.option should be set to 'selected = true'.",
} as const;

export type SHIPPINGOPTIONNOTSELECTEDDescriptionEnum =
  (typeof SHIPPINGOPTIONNOTSELECTEDDescriptionEnum)[keyof typeof SHIPPINGOPTIONNOTSELECTEDDescriptionEnum];

/**
 *
 * @export
 * @interface SHIPPINGOPTIONSNOTSUPPORTED
 */
export interface SHIPPINGOPTIONSNOTSUPPORTED {
  /**
   *
   * @type {string}
   * @memberof SHIPPINGOPTIONSNOTSUPPORTED
   */
  issue?: SHIPPINGOPTIONSNOTSUPPORTEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof SHIPPINGOPTIONSNOTSUPPORTED
   */
  description?: SHIPPINGOPTIONSNOTSUPPORTEDDescriptionEnum;
}

export const SHIPPINGOPTIONSNOTSUPPORTEDIssueEnum = {
  ShippingOptionsNotSupported: 'SHIPPING_OPTIONS_NOT_SUPPORTED',
} as const;

export type SHIPPINGOPTIONSNOTSUPPORTEDIssueEnum =
  (typeof SHIPPINGOPTIONSNOTSUPPORTEDIssueEnum)[keyof typeof SHIPPINGOPTIONSNOTSUPPORTEDIssueEnum];
export const SHIPPINGOPTIONSNOTSUPPORTEDDescriptionEnum = {
  ShippingOptionsAreNotSupportedWhenShippingTypeIsSpecifiedOrWhenApplicationContextShippingPreferenceIsSetAsNoShippingOrSetProvidedAddress:
    "Shipping options are not supported when `shipping.type` is specified or when 'application_context.shipping_preference' is set as 'NO_SHIPPING' or 'SET_PROVIDED_ADDRESS'.",
} as const;

export type SHIPPINGOPTIONSNOTSUPPORTEDDescriptionEnum =
  (typeof SHIPPINGOPTIONSNOTSUPPORTEDDescriptionEnum)[keyof typeof SHIPPINGOPTIONSNOTSUPPORTEDDescriptionEnum];

/**
 *
 * @export
 * @interface SHIPPINGOPTIONSNOTSUPPORTED1
 */
export interface SHIPPINGOPTIONSNOTSUPPORTED1 {
  /**
   *
   * @type {string}
   * @memberof SHIPPINGOPTIONSNOTSUPPORTED1
   */
  issue?: SHIPPINGOPTIONSNOTSUPPORTED1IssueEnum;
  /**
   *
   * @type {string}
   * @memberof SHIPPINGOPTIONSNOTSUPPORTED1
   */
  description?: SHIPPINGOPTIONSNOTSUPPORTED1DescriptionEnum;
}

export const SHIPPINGOPTIONSNOTSUPPORTED1IssueEnum = {
  ShippingOptionsNotSupported: 'SHIPPING_OPTIONS_NOT_SUPPORTED',
} as const;

export type SHIPPINGOPTIONSNOTSUPPORTED1IssueEnum =
  (typeof SHIPPINGOPTIONSNOTSUPPORTED1IssueEnum)[keyof typeof SHIPPINGOPTIONSNOTSUPPORTED1IssueEnum];
export const SHIPPINGOPTIONSNOTSUPPORTED1DescriptionEnum = {
  ShippingOptionsAreNotSupportedWhenApplicationContextShippingPreferenceIsSetAsNoShippingOrSetProvidedAddress:
    "Shipping options are not supported when 'application_context.shipping_preference' is set as 'NO_SHIPPING' or 'SET_PROVIDED_ADDRESS'.",
} as const;

export type SHIPPINGOPTIONSNOTSUPPORTED1DescriptionEnum =
  (typeof SHIPPINGOPTIONSNOTSUPPORTED1DescriptionEnum)[keyof typeof SHIPPINGOPTIONSNOTSUPPORTED1DescriptionEnum];

/**
 *
 * @export
 * @interface SHIPPINGTYPENOTSUPPORTEDFORCLIENT
 */
export interface SHIPPINGTYPENOTSUPPORTEDFORCLIENT {
  /**
   *
   * @type {string}
   * @memberof SHIPPINGTYPENOTSUPPORTEDFORCLIENT
   */
  issue?: SHIPPINGTYPENOTSUPPORTEDFORCLIENTIssueEnum;
  /**
   *
   * @type {string}
   * @memberof SHIPPINGTYPENOTSUPPORTEDFORCLIENT
   */
  description?: SHIPPINGTYPENOTSUPPORTEDFORCLIENTDescriptionEnum;
}

export const SHIPPINGTYPENOTSUPPORTEDFORCLIENTIssueEnum = {
  ShippingTypeNotSupportedForClient: 'SHIPPING_TYPE_NOT_SUPPORTED_FOR_CLIENT',
} as const;

export type SHIPPINGTYPENOTSUPPORTEDFORCLIENTIssueEnum =
  (typeof SHIPPINGTYPENOTSUPPORTEDFORCLIENTIssueEnum)[keyof typeof SHIPPINGTYPENOTSUPPORTEDFORCLIENTIssueEnum];
export const SHIPPINGTYPENOTSUPPORTEDFORCLIENTDescriptionEnum = {
  TheApiCallerAccountIsNotSetupToBeAbleToSupportAShippingTypePickupInPersonThisFeatureIsOnlySupportedForAHrefhttpsWwwPaypalComUsBusinessPlatformsAndMarketplacesPayPalCommercePlatformForPlatformsAndMarketplacesA:
    'The API Caller account is not setup to be able to support a `shipping.type`=`PICKUP_IN_PERSON`. This feature is only supported for <a href="https://www.paypal.com/us/business/platforms-and-marketplaces">PayPal Commerce Platform for Platforms and Marketplaces</a>.',
} as const;

export type SHIPPINGTYPENOTSUPPORTEDFORCLIENTDescriptionEnum =
  (typeof SHIPPINGTYPENOTSUPPORTEDFORCLIENTDescriptionEnum)[keyof typeof SHIPPINGTYPENOTSUPPORTEDFORCLIENTDescriptionEnum];

/**
 * The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
 * @export
 * @interface SellerProtection
 */
export interface SellerProtection {
  /**
   * Indicates whether the transaction is eligible for seller protection. For information, see [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
   * @type {string}
   * @memberof SellerProtection
   */
  status?: SellerProtectionStatusEnum;
  /**
   * An array of conditions that are covered for the transaction.
   * @type {Array<string>}
   * @memberof SellerProtection
   */
  dispute_categories?: Array<SellerProtectionDisputeCategoriesEnum>;
}

export const SellerProtectionStatusEnum = {
  Eligible: 'ELIGIBLE',
  PartiallyEligible: 'PARTIALLY_ELIGIBLE',
  NotEligible: 'NOT_ELIGIBLE',
} as const;

export type SellerProtectionStatusEnum =
  (typeof SellerProtectionStatusEnum)[keyof typeof SellerProtectionStatusEnum];
export const SellerProtectionDisputeCategoriesEnum = {
  ItemNotReceived: 'ITEM_NOT_RECEIVED',
  UnauthorizedTransaction: 'UNAUTHORIZED_TRANSACTION',
} as const;

export type SellerProtectionDisputeCategoriesEnum =
  (typeof SellerProtectionDisputeCategoriesEnum)[keyof typeof SellerProtectionDisputeCategoriesEnum];

/**
 * The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.
 * @export
 * @interface SellerReceivableBreakdown
 */
export interface SellerReceivableBreakdown {
  /**
   *
   * @type {Money}
   * @memberof SellerReceivableBreakdown
   */
  gross_amount: Money;
  /**
   *
   * @type {Money}
   * @memberof SellerReceivableBreakdown
   */
  paypal_fee?: Money;
  /**
   *
   * @type {Money}
   * @memberof SellerReceivableBreakdown
   */
  paypal_fee_in_receivable_currency?: Money;
  /**
   *
   * @type {Money}
   * @memberof SellerReceivableBreakdown
   */
  net_amount?: Money;
  /**
   *
   * @type {Money}
   * @memberof SellerReceivableBreakdown
   */
  receivable_amount?: Money;
  /**
   *
   * @type {ExchangeRate}
   * @memberof SellerReceivableBreakdown
   */
  exchange_rate?: ExchangeRate;
  /**
   * An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment.
   * @type {Array<PlatformFee>}
   * @memberof SellerReceivableBreakdown
   */
  platform_fees?: Array<PlatformFee>;
}
/**
 * The carrier for the shipment. Some carriers have a global version as well as local subsidiaries. The subsidiaries are repeated over many countries and might also have an entry in the global list. Choose the carrier for your country. If the carrier is not available for your country, choose the global version of the carrier. If your carrier name is not in the list, set `carrier` to `OTHER` and set carrier name in `carrier_name_other`. For allowed values, see <a href=\"/docs/tracking/reference/carriers/\">Carriers</a>.
 * @export
 * @enum {string}
 */

export const ShipmentCarrier = {
  DpdRu: 'DPD_RU',
  BgBulgarianPost: 'BG_BULGARIAN_POST',
  KrKoreaPost: 'KR_KOREA_POST',
  ZaCourierit: 'ZA_COURIERIT',
  FrExapaq: 'FR_EXAPAQ',
  AreEmiratesPost: 'ARE_EMIRATES_POST',
  Gac: 'GAC',
  Geis: 'GEIS',
  SfEx: 'SF_EX',
  Pago: 'PAGO',
  Myhermes: 'MYHERMES',
  DiamondEurogistics: 'DIAMOND_EUROGISTICS',
  CorporatecouriersWebhook: 'CORPORATECOURIERS_WEBHOOK',
  Bond: 'BOND',
  Omniparcel: 'OMNIPARCEL',
  SkPosta: 'SK_POSTA',
  Purolator: 'PUROLATOR',
  FetchrWebhook: 'FETCHR_WEBHOOK',
  Thedeliverygroup: 'THEDELIVERYGROUP',
  CelloSquare: 'CELLO_SQUARE',
  Tarrive: 'TARRIVE',
  Collivery: 'COLLIVERY',
  Mainfreight: 'MAINFREIGHT',
  IndFirstflight: 'IND_FIRSTFLIGHT',
  Acsworldwide: 'ACSWORLDWIDE',
  Amstan: 'AMSTAN',
  Okayparcel: 'OKAYPARCEL',
  EnvialiaReference: 'ENVIALIA_REFERENCE',
  SeurEs: 'SEUR_ES',
  Continental: 'CONTINENTAL',
  Fdsexpress: 'FDSEXPRESS',
  AmazonFbaSwiship: 'AMAZON_FBA_SWISHIP',
  Wyngs: 'WYNGS',
  DhlActiveTracing: 'DHL_ACTIVE_TRACING',
  Zyllem: 'ZYLLEM',
  Ruston: 'RUSTON',
  Xpost: 'XPOST',
  CorreosEs: 'CORREOS_ES',
  DhlFr: 'DHL_FR',
  PanAsia: 'PAN_ASIA',
  BrtIt: 'BRT_IT',
  SreKorea: 'SRE_KOREA',
  Speedee: 'SPEEDEE',
  TntUk: 'TNT_UK',
  Venipak: 'VENIPAK',
  Shreenandancourier: 'SHREENANDANCOURIER',
  Croshot: 'CROSHOT',
  NipostNg: 'NIPOST_NG',
  EpstGlbl: 'EPST_GLBL',
  Newgistics: 'NEWGISTICS',
  PostSlovenia: 'POST_SLOVENIA',
  JerseyPost: 'JERSEY_POST',
  Bombinoexp: 'BOMBINOEXP',
  Wmg: 'WMG',
  XqExpress: 'XQ_EXPRESS',
  Furdeco: 'FURDECO',
  LhtExpress: 'LHT_EXPRESS',
  SouthAfricanPostOffice: 'SOUTH_AFRICAN_POST_OFFICE',
  Spoton: 'SPOTON',
  Dimerco: 'DIMERCO',
  CyprusPostCyp: 'CYPRUS_POST_CYP',
  Abcustom: 'ABCUSTOM',
  IndDelivree: 'IND_DELIVREE',
  CnBestexpress: 'CN_BESTEXPRESS',
  DxSftp: 'DX_SFTP',
  PickuppMys: 'PICKUPP_MYS',
  Fmx: 'FMX',
  Hellmann: 'HELLMANN',
  ShipItAsia: 'SHIP_IT_ASIA',
  KerryEcommerce: 'KERRY_ECOMMERCE',
  Freterapido: 'FRETERAPIDO',
  PitneyBowes: 'PITNEY_BOWES',
  XpressenDk: 'XPRESSEN_DK',
  SeurSpApi: 'SEUR_SP_API',
  Deliveryontime: 'DELIVERYONTIME',
  Jinsung: 'JINSUNG',
  TransKargo: 'TRANS_KARGO',
  SwishipDe: 'SWISHIP_DE',
  IvoyWebhook: 'IVOY_WEBHOOK',
  AirmeeWebhook: 'AIRMEE_WEBHOOK',
  DhlBenelux: 'DHL_BENELUX',
  Firstmile: 'FIRSTMILE',
  FastwayIr: 'FASTWAY_IR',
  HhExp: 'HH_EXP',
  MysMypostOnline: 'MYS_MYPOST_ONLINE',
  TntNl: 'TNT_NL',
  Tipsa: 'TIPSA',
  TaqbinMy: 'TAQBIN_MY',
  Kgmhub: 'KGMHUB',
  Intexpress: 'INTEXPRESS',
  OverseExp: 'OVERSE_EXP',
  Oneclick: 'ONECLICK',
  RoadrunnerFreight: 'ROADRUNNER_FREIGHT',
  GlsCrotia: 'GLS_CROTIA',
  MrwFtp: 'MRW_FTP',
  Bluex: 'BLUEX',
  Dylt: 'DYLT',
  DpdIr: 'DPD_IR',
  SinGlbl: 'SIN_GLBL',
  TuffnellsReference: 'TUFFNELLS_REFERENCE',
  Cjpacket: 'CJPACKET',
  Milkman: 'MILKMAN',
  Asigna: 'ASIGNA',
  Oneworldexpress: 'ONEWORLDEXPRESS',
  RoyalMail: 'ROYAL_MAIL',
  ViaExpress: 'VIA_EXPRESS',
  Tigfreight: 'TIGFREIGHT',
  ZtoExpress: 'ZTO_EXPRESS',
  TwoGo: 'TWO_GO',
  Iml: 'IML',
  IntelValley: 'INTEL_VALLEY',
  Efs: 'EFS',
  UkUkMail: 'UK_UK_MAIL',
  Ram: 'RAM',
  Alliedexpress: 'ALLIEDEXPRESS',
  ApcOvernight: 'APC_OVERNIGHT',
  Shippit: 'SHIPPIT',
  Tfm: 'TFM',
  MXpress: 'M_XPRESS',
  HdbBox: 'HDB_BOX',
  ClevyLinks: 'CLEVY_LINKS',
  Ibeone: 'IBEONE',
  FiegeNl: 'FIEGE_NL',
  KweGlobal: 'KWE_GLOBAL',
  CtcExpress: 'CTC_EXPRESS',
  LaoPost: 'LAO_POST',
  Amazon: 'AMAZON',
  MoreLink: 'MORE_LINK',
  Jx: 'JX',
  EasyMail: 'EASY_MAIL',
  Aduiepyle: 'ADUIEPYLE',
  GbPanther: 'GB_PANTHER',
  Expresssale: 'EXPRESSSALE',
  SgDetrack: 'SG_DETRACK',
  TrunkrsWebhook: 'TRUNKRS_WEBHOOK',
  Matdespatch: 'MATDESPATCH',
  Dicom: 'DICOM',
  Mbw: 'MBW',
  KhmCambodiaPost: 'KHM_CAMBODIA_POST',
  Sinotrans: 'SINOTRANS',
  BrtItParcelid: 'BRT_IT_PARCELID',
  DhlSupplyChain: 'DHL_SUPPLY_CHAIN',
  DhlPl: 'DHL_PL',
  Topyou: 'TOPYOU',
  Palexpress: 'PALEXPRESS',
  DhlSg: 'DHL_SG',
  CnWedo: 'CN_WEDO',
  Fulfillme: 'FULFILLME',
  DpdDelistrack: 'DPD_DELISTRACK',
  UpsReference: 'UPS_REFERENCE',
  Caribou: 'CARIBOU',
  LocusWebhook: 'LOCUS_WEBHOOK',
  Dsv: 'DSV',
  CnGofly: 'CN_GOFLY',
  P2PTrc: 'P2P_TRC',
  Directparcels: 'DIRECTPARCELS',
  NovaPoshtaInt: 'NOVA_POSHTA_INT',
  FedexPoland: 'FEDEX_POLAND',
  CnJcex: 'CN_JCEX',
  FarInternational: 'FAR_INTERNATIONAL',
  Idexpress: 'IDEXPRESS',
  Gangbao: 'GANGBAO',
  Neway: 'NEWAY',
  PostnlInt3S: 'POSTNL_INT_3_S',
  RpxId: 'RPX_ID',
  DesignertransportWebhook: 'DESIGNERTRANSPORT_WEBHOOK',
  GlsSloven: 'GLS_SLOVEN',
  ParcelledIn: 'PARCELLED_IN',
  GsiExpress: 'GSI_EXPRESS',
  ConWay: 'CON_WAY',
  BrouwerTransport: 'BROUWER_TRANSPORT',
  Cpex: 'CPEX',
  IsraelPost: 'ISRAEL_POST',
  DtdcIn: 'DTDC_IN',
  PttPost: 'PTT_POST',
  XdeWebhook: 'XDE_WEBHOOK',
  Tolos: 'TOLOS',
  GiaoHang: 'GIAO_HANG',
  GeodisEspace: 'GEODIS_ESPACE',
  MagyarHu: 'MAGYAR_HU',
  DoordashWebhook: 'DOORDASH_WEBHOOK',
  TikiId: 'TIKI_ID',
  CjHkInternational: 'CJ_HK_INTERNATIONAL',
  StarTrackExpress: 'STAR_TRACK_EXPRESS',
  Helthjem: 'HELTHJEM',
  Sfb2C: 'SFB2C',
  Freightquote: 'FREIGHTQUOTE',
  LandmarkGlobalReference: 'LANDMARK_GLOBAL_REFERENCE',
  Parcel2Go: 'PARCEL2GO',
  Delnext: 'DELNEXT',
  Rcl: 'RCL',
  CgsExpress: 'CGS_EXPRESS',
  HkPost: 'HK_POST',
  SapExpress: 'SAP_EXPRESS',
  ParcelpostSg: 'PARCELPOST_SG',
  Hermes: 'HERMES',
  IndSafeexpress: 'IND_SAFEEXPRESS',
  Tophatterexpress: 'TOPHATTEREXPRESS',
  Mglobal: 'MGLOBAL',
  Averitt: 'AVERITT',
  Leader: 'LEADER',
  _2Ebox: '_2EBOX',
  SgSpeedpost: 'SG_SPEEDPOST',
  DbschenkerSe: 'DBSCHENKER_SE',
  IsrPostDomestic: 'ISR_POST_DOMESTIC',
  Bestwayparcel: 'BESTWAYPARCEL',
  AsendiaDe: 'ASENDIA_DE',
  NightlineUk: 'NIGHTLINE_UK',
  TaqbinSg: 'TAQBIN_SG',
  TckExpress: 'TCK_EXPRESS',
  EndeavourDelivery: 'ENDEAVOUR_DELIVERY',
  Nanjingwoyuan: 'NANJINGWOYUAN',
  HeppnerFr: 'HEPPNER_FR',
  EmpsCn: 'EMPS_CN',
  Fonsen: 'FONSEN',
  Pickrr: 'PICKRR',
  ApcOvernightConnum: 'APC_OVERNIGHT_CONNUM',
  StarTrackNextFlight: 'STAR_TRACK_NEXT_FLIGHT',
  Dajin: 'DAJIN',
  UpsFreight: 'UPS_FREIGHT',
  PostaPlus: 'POSTA_PLUS',
  Ceva: 'CEVA',
  Anserx: 'ANSERX',
  JsExpress: 'JS_EXPRESS',
  Padtf: 'PADTF',
  UpsMailInnovations: 'UPS_MAIL_INNOVATIONS',
  Ezship: 'EZSHIP',
  Sypost: 'SYPOST',
  AmazonShipMcf: 'AMAZON_SHIP_MCF',
  Yusen: 'YUSEN',
  Bring: 'BRING',
  SdaIt: 'SDA_IT',
  Gba: 'GBA',
  Neweggexpress: 'NEWEGGEXPRESS',
  SpeedcouriersGr: 'SPEEDCOURIERS_GR',
  Forrun: 'FORRUN',
  Pickup: 'PICKUP',
  Ecms: 'ECMS',
  Intelipost: 'INTELIPOST',
  Flashexpress: 'FLASHEXPRESS',
  CnSto: 'CN_STO',
  SekoSftp: 'SEKO_SFTP',
  HomeDeliverySolutions: 'HOME_DELIVERY_SOLUTIONS',
  DpdHgry: 'DPD_HGRY',
  KerryttcVn: 'KERRYTTC_VN',
  JoyingBox: 'JOYING_BOX',
  TotalExpress: 'TOTAL_EXPRESS',
  ZjsExpress: 'ZJS_EXPRESS',
  Starken: 'STARKEN',
  Demandship: 'DEMANDSHIP',
  CnDpex: 'CN_DPEX',
  AupostCn: 'AUPOST_CN',
  Logisters: 'LOGISTERS',
  Goglobalpost: 'GOGLOBALPOST',
  GlsCz: 'GLS_CZ',
  PaackWebhook: 'PAACK_WEBHOOK',
  GrabWebhook: 'GRAB_WEBHOOK',
  Parcelpoint: 'PARCELPOINT',
  Icumulus: 'ICUMULUS',
  Daiglobaltrack: 'DAIGLOBALTRACK',
  GlobalIparcel: 'GLOBAL_IPARCEL',
  YurticiKargo: 'YURTICI_KARGO',
  CnPaypalPackage: 'CN_PAYPAL_PACKAGE',
  Parcel2Post: 'PARCEL_2_POST',
  GlsIt: 'GLS_IT',
  PilLogistics: 'PIL_LOGISTICS',
  Heppner: 'HEPPNER',
  GeneralOvernight: 'GENERAL_OVERNIGHT',
  Happy2Point: 'HAPPY2POINT',
  Chitchats: 'CHITCHATS',
  Smooth: 'SMOOTH',
  CleLogistics: 'CLE_LOGISTICS',
  Fiege: 'FIEGE',
  MxCargo: 'MX_CARGO',
  Ziingfinalmile: 'ZIINGFINALMILE',
  DaytonFreight: 'DAYTON_FREIGHT',
  Tcs: 'TCS',
  Aex: 'AEX',
  HermesDe: 'HERMES_DE',
  RoutificWebhook: 'ROUTIFIC_WEBHOOK',
  Globavend: 'GLOBAVEND',
  CjLogistics: 'CJ_LOGISTICS',
  PalletNetwork: 'PALLET_NETWORK',
  RafPh: 'RAF_PH',
  UkXdp: 'UK_XDP',
  PaperExpress: 'PAPER_EXPRESS',
  LaPosteSuivi: 'LA_POSTE_SUIVI',
  Paquetexpress: 'PAQUETEXPRESS',
  Liefery: 'LIEFERY',
  StreckTransport: 'STRECK_TRANSPORT',
  PonyExpress: 'PONY_EXPRESS',
  AlwaysExpress: 'ALWAYS_EXPRESS',
  GbsBroker: 'GBS_BROKER',
  CitylinkMy: 'CITYLINK_MY',
  Alljoy: 'ALLJOY',
  Yodel: 'YODEL',
  YodelDir: 'YODEL_DIR',
  Stone3Pl: 'STONE3PL',
  ParcelpalWebhook: 'PARCELPAL_WEBHOOK',
  DhlEcomerceAsa: 'DHL_ECOMERCE_ASA',
  Simplypost: 'SIMPLYPOST',
  KyExpress: 'KY_EXPRESS',
  Shenzhen: 'SHENZHEN',
  UsLasership: 'US_LASERSHIP',
  UcExpre: 'UC_EXPRE',
  Didadi: 'DIDADI',
  CjKr: 'CJ_KR',
  DbschenkerB2B: 'DBSCHENKER_B2B',
  Mxe: 'MXE',
  CaeDelivers: 'CAE_DELIVERS',
  Pfcexpress: 'PFCEXPRESS',
  Whistl: 'WHISTL',
  Wepost: 'WEPOST',
  DhlParcelEs: 'DHL_PARCEL_ES',
  Ddexpress: 'DDEXPRESS',
  AramexAu: 'ARAMEX_AU',
  Bneed: 'BNEED',
  HkTgx: 'HK_TGX',
  LatvijasPasts: 'LATVIJAS_PASTS',
  Viaeurope: 'VIAEUROPE',
  CorreoUy: 'CORREO_UY',
  ChronopostFr: 'CHRONOPOST_FR',
  JNet: 'J_NET',
  _6Ls: '_6LS',
  BlrBelpost: 'BLR_BELPOST',
  Birdsystem: 'BIRDSYSTEM',
  Dobropost: 'DOBROPOST',
  WahanaId: 'WAHANA_ID',
  Weaship: 'WEASHIP',
  Sonictl: 'SONICTL',
  Kwt: 'KWT',
  AfllogFtp: 'AFLLOG_FTP',
  SkynetWorldwide: 'SKYNET_WORLDWIDE',
  NovaPoshta: 'NOVA_POSHTA',
  Seino: 'SEINO',
  Szendex: 'SZENDEX',
  BpostInt: 'BPOST_INT',
  DbschenkerSv: 'DBSCHENKER_SV',
  AoDeutschland: 'AO_DEUTSCHLAND',
  EuFleetSolutions: 'EU_FLEET_SOLUTIONS',
  Pcfcorp: 'PCFCORP',
  Linkbridge: 'LINKBRIDGE',
  Primamulticipta: 'PRIMAMULTICIPTA',
  Courex: 'COUREX',
  ZajilExpress: 'ZAJIL_EXPRESS',
  Collectco: 'COLLECTCO',
  Jtexpress: 'JTEXPRESS',
  FedexUk: 'FEDEX_UK',
  Uship: 'USHIP',
  Pixsell: 'PIXSELL',
  Shiptor: 'SHIPTOR',
  Cdek: 'CDEK',
  VnmViettelpost: 'VNM_VIETTELPOST',
  CjCentury: 'CJ_CENTURY',
  Gso: 'GSO',
  Viwo: 'VIWO',
  Skybox: 'SKYBOX',
  Kerrytj: 'KERRYTJ',
  NtlogisticsVn: 'NTLOGISTICS_VN',
  SdhScm: 'SDH_SCM',
  Zinc: 'ZINC',
  DpeSouthAfrc: 'DPE_SOUTH_AFRC',
  CeskaCz: 'CESKA_CZ',
  AcsGr: 'ACS_GR',
  Dealersend: 'DEALERSEND',
  Jocom: 'JOCOM',
  Cse: 'CSE',
  TforceFinalmile: 'TFORCE_FINALMILE',
  ShipGate: 'SHIP_GATE',
  Shipter: 'SHIPTER',
  NationalSameday: 'NATIONAL_SAMEDAY',
  Yunexpress: 'YUNEXPRESS',
  Cainiao: 'CAINIAO',
  DmsMatrix: 'DMS_MATRIX',
  Directlog: 'DIRECTLOG',
  AsendiaUs: 'ASENDIA_US',
  _3Jmslogistics: '_3JMSLOGISTICS',
  LiccardiExpress: 'LICCARDI_EXPRESS',
  SkyPostal: 'SKY_POSTAL',
  Cnwangtong: 'CNWANGTONG',
  PostnordLogisticsDk: 'POSTNORD_LOGISTICS_DK',
  Logistika: 'LOGISTIKA',
  Celeritas: 'CELERITAS',
  Pressiode: 'PRESSIODE',
  ShreeMaruti: 'SHREE_MARUTI',
  LogisticsworldwideHk: 'LOGISTICSWORLDWIDE_HK',
  Efex: 'EFEX',
  Lotte: 'LOTTE',
  Lonestar: 'LONESTAR',
  Aprisaexpress: 'APRISAEXPRESS',
  BelRs: 'BEL_RS',
  OsmWorldwide: 'OSM_WORLDWIDE',
  WestgateGl: 'WESTGATE_GL',
  Fastrack: 'FASTRACK',
  DtdExpr: 'DTD_EXPR',
  Alfatrex: 'ALFATREX',
  Promeddelivery: 'PROMEDDELIVERY',
  ThabitLogistics: 'THABIT_LOGISTICS',
  HctLogistics: 'HCT_LOGISTICS',
  CarryFlap: 'CARRY_FLAP',
  UsOldDominion: 'US_OLD_DOMINION',
  AnicamBox: 'ANICAM_BOX',
  Wanbexpress: 'WANBEXPRESS',
  AnPost: 'AN_POST',
  DpdLocal: 'DPD_LOCAL',
  Stallionexpress: 'STALLIONEXPRESS',
  Raiderex: 'RAIDEREX',
  Shopfans: 'SHOPFANS',
  KyungdongParcel: 'KYUNGDONG_PARCEL',
  ChampionLogistics: 'CHAMPION_LOGISTICS',
  PickuppSgp: 'PICKUPP_SGP',
  MorningExpress: 'MORNING_EXPRESS',
  Nacex: 'NACEX',
  ThenileWebhook: 'THENILE_WEBHOOK',
  Holisol: 'HOLISOL',
  LbcexpressFtp: 'LBCEXPRESS_FTP',
  Kurasi: 'KURASI',
  UsfReddaway: 'USF_REDDAWAY',
  Apg: 'APG',
  CnBoxc: 'CN_BOXC',
  Ecoscooting: 'ECOSCOOTING',
  Mainway: 'MAINWAY',
  Paperfly: 'PAPERFLY',
  Houndexpress: 'HOUNDEXPRESS',
  BoxBerry: 'BOX_BERRY',
  EpBox: 'EP_BOX',
  PlusLogUk: 'PLUS_LOG_UK',
  Fulfilla: 'FULFILLA',
  Ase: 'ASE',
  MailPlus: 'MAIL_PLUS',
  XpoLogistics: 'XPO_LOGISTICS',
  Wndirect: 'WNDIRECT',
  CloudwishAsia: 'CLOUDWISH_ASIA',
  Zeleris: 'ZELERIS',
  GioExpress: 'GIO_EXPRESS',
  OcsWorldwide: 'OCS_WORLDWIDE',
  ArkLogistics: 'ARK_LOGISTICS',
  Aquiline: 'AQUILINE',
  PilotFreight: 'PILOT_FREIGHT',
  Qwintry: 'QWINTRY',
  DanskeFragt: 'DANSKE_FRAGT',
  Carriers: 'CARRIERS',
  AirCanadaGlobal: 'AIR_CANADA_GLOBAL',
  PresidentTrans: 'PRESIDENT_TRANS',
  Stepforwardfs: 'STEPFORWARDFS',
  SkynetUk: 'SKYNET_UK',
  Pittohio: 'PITTOHIO',
  CorreosExpress: 'CORREOS_EXPRESS',
  RlUs: 'RL_US',
  MaraXpress: 'MARA_XPRESS',
  Destiny: 'DESTINY',
  UkYodel: 'UK_YODEL',
  CometTech: 'COMET_TECH',
  DhlParcelRu: 'DHL_PARCEL_RU',
  TntRefr: 'TNT_REFR',
  ShreeAnjaniCourier: 'SHREE_ANJANI_COURIER',
  MikropakketBe: 'MIKROPAKKET_BE',
  EtsExpress: 'ETS_EXPRESS',
  ColisPrive: 'COLIS_PRIVE',
  CnYunda: 'CN_YUNDA',
  AaaCooper: 'AAA_COOPER',
  RocketParcel: 'ROCKET_PARCEL',
  _360Lion: '_360LION',
  Pandu: 'PANDU',
  ProfessionalCouriers: 'PROFESSIONAL_COURIERS',
  Flytexpress: 'FLYTEXPRESS',
  LogisticsworldwideMy: 'LOGISTICSWORLDWIDE_MY',
  CorreosDeEspana: 'CORREOS_DE_ESPANA',
  Imx: 'IMX',
  FourPxExpress: 'FOUR_PX_EXPRESS',
  Xpressbees: 'XPRESSBEES',
  PickuppVnm: 'PICKUPP_VNM',
  StartrackExpress: 'STARTRACK_EXPRESS',
  FrColissimo: 'FR_COLISSIMO',
  NacexSpainReference: 'NACEX_SPAIN_REFERENCE',
  DhlSupplyChainAu: 'DHL_SUPPLY_CHAIN_AU',
  Eshipping: 'ESHIPPING',
  Shreetirupati: 'SHREETIRUPATI',
  HxExpress: 'HX_EXPRESS',
  Indopaket: 'INDOPAKET',
  Cn17Post: 'CN_17POST',
  K1Express: 'K1_EXPRESS',
  CjGls: 'CJ_GLS',
  MysGdex: 'MYS_GDEX',
  Nationex: 'NATIONEX',
  Anjun: 'ANJUN',
  Fargood: 'FARGOOD',
  SmgExpress: 'SMG_EXPRESS',
  Rzyexpress: 'RZYEXPRESS',
  Sefl: 'SEFL',
  TntClickIt: 'TNT_CLICK_IT',
  Hdb: 'HDB',
  Hipshipper: 'HIPSHIPPER',
  Rpxlogistics: 'RPXLOGISTICS',
  Kuehne: 'KUEHNE',
  ItNexive: 'IT_NEXIVE',
  Pts: 'PTS',
  SwissPostFtp: 'SWISS_POST_FTP',
  FastrkServ: 'FASTRK_SERV',
  _472: '_4_72',
  UsYrc: 'US_YRC',
  PostnlIntl3S: 'POSTNL_INTL_3S',
  ElianPost: 'ELIAN_POST',
  Cubyn: 'CUBYN',
  SauSaudiPost: 'SAU_SAUDI_POST',
  AbxexpressMy: 'ABXEXPRESS_MY',
  HuahanExpress: 'HUAHAN_EXPRESS',
  IndJayonexpress: 'IND_JAYONEXPRESS',
  ZesExpress: 'ZES_EXPRESS',
  ZeptoExpress: 'ZEPTO_EXPRESS',
  SkynetZa: 'SKYNET_ZA',
  Zeek2Door: 'ZEEK_2_DOOR',
  Blinklastmile: 'BLINKLASTMILE',
  PostaUkr: 'POSTA_UKR',
  Chrobinson: 'CHROBINSON',
  CnPost56: 'CN_POST56',
  CourantPlus: 'COURANT_PLUS',
  ScudexExpress: 'SCUDEX_EXPRESS',
  Shipentegra: 'SHIPENTEGRA',
  BTwoCEurope: 'B_TWO_C_EUROPE',
  Cope: 'COPE',
  IndGati: 'IND_GATI',
  CnWishpost: 'CN_WISHPOST',
  NacexEs: 'NACEX_ES',
  TaqbinHk: 'TAQBIN_HK',
  Globaltranz: 'GLOBALTRANZ',
  Hkd: 'HKD',
  Bjshomedelivery: 'BJSHOMEDELIVERY',
  Omniva: 'OMNIVA',
  Sutton: 'SUTTON',
  PantherReference: 'PANTHER_REFERENCE',
  Sfcservice: 'SFCSERVICE',
  Ltl: 'LTL',
  Parknparcel: 'PARKNPARCEL',
  SpringGds: 'SPRING_GDS',
  Ecexpress: 'ECEXPRESS',
  InterparcelAu: 'INTERPARCEL_AU',
  Agility: 'AGILITY',
  XlExpress: 'XL_EXPRESS',
  Aderonline: 'ADERONLINE',
  Directcouriers: 'DIRECTCOURIERS',
  Planzer: 'PLANZER',
  Sending: 'SENDING',
  NinjavanWb: 'NINJAVAN_WB',
  NationwideMy: 'NATIONWIDE_MY',
  Sendit: 'SENDIT',
  GbArrow: 'GB_ARROW',
  IndGojavas: 'IND_GOJAVAS',
  Kpost: 'KPOST',
  DhlFreight: 'DHL_FREIGHT',
  Bluecare: 'BLUECARE',
  Jindouyun: 'JINDOUYUN',
  Trackon: 'TRACKON',
  GbTuffnells: 'GB_TUFFNELLS',
  Trumpcard: 'TRUMPCARD',
  Etotal: 'ETOTAL',
  SfplusWebhook: 'SFPLUS_WEBHOOK',
  Sekologistics: 'SEKOLOGISTICS',
  Hermes2MannHandling: 'HERMES_2MANN_HANDLING',
  DpdLocalRef: 'DPD_LOCAL_REF',
  Uds: 'UDS',
  ZaSpecialisedFreight: 'ZA_SPECIALISED_FREIGHT',
  ThaKerry: 'THA_KERRY',
  PrtIntSeur: 'PRT_INT_SEUR',
  BraCorreios: 'BRA_CORREIOS',
  NzNzPost: 'NZ_NZ_POST',
  CnEquick: 'CN_EQUICK',
  MysEms: 'MYS_EMS',
  GbNorsk: 'GB_NORSK',
  EspMrw: 'ESP_MRW',
  EspPacklink: 'ESP_PACKLINK',
  KangarooMy: 'KANGAROO_MY',
  Rpx: 'RPX',
  XdpUkReference: 'XDP_UK_REFERENCE',
  NinjavanMy: 'NINJAVAN_MY',
  Adicional: 'ADICIONAL',
  NinjavanId: 'NINJAVAN_ID',
  Roadbull: 'ROADBULL',
  Yakit: 'YAKIT',
  Mailamericas: 'MAILAMERICAS',
  Mikropakket: 'MIKROPAKKET',
  Dynalogic: 'DYNALOGIC',
  DhlEs: 'DHL_ES',
  DhlParcelNl: 'DHL_PARCEL_NL',
  DhlGlobalMailAsia: 'DHL_GLOBAL_MAIL_ASIA',
  DawnWing: 'DAWN_WING',
  GenikiGr: 'GENIKI_GR',
  HermesworldUk: 'HERMESWORLD_UK',
  Alphafast: 'ALPHAFAST',
  Buylogic: 'BUYLOGIC',
  Ekart: 'EKART',
  MexSenda: 'MEX_SENDA',
  SfcLogistics: 'SFC_LOGISTICS',
  PostSerbia: 'POST_SERBIA',
  IndDelhivery: 'IND_DELHIVERY',
  DeDpdDelistrack: 'DE_DPD_DELISTRACK',
  Rpd2Man: 'RPD2MAN',
  CnSfExpress: 'CN_SF_EXPRESS',
  Yanwen: 'YANWEN',
  MysSkynet: 'MYS_SKYNET',
  CorreosDeMexico: 'CORREOS_DE_MEXICO',
  CblLogistica: 'CBL_LOGISTICA',
  MexEstafeta: 'MEX_ESTAFETA',
  AuAustrianPost: 'AU_AUSTRIAN_POST',
  Rincos: 'RINCOS',
  NldDhl: 'NLD_DHL',
  RussianPost: 'RUSSIAN_POST',
  CouriersPlease: 'COURIERS_PLEASE',
  PostnordLogistics: 'POSTNORD_LOGISTICS',
  Fedex: 'FEDEX',
  DpeExpress: 'DPE_EXPRESS',
  Dpd: 'DPD',
  Adsone: 'ADSONE',
  IdnJne: 'IDN_JNE',
  Thecourierguy: 'THECOURIERGUY',
  Cnexps: 'CNEXPS',
  PrtChronopost: 'PRT_CHRONOPOST',
  LandmarkGlobal: 'LANDMARK_GLOBAL',
  ItDhlEcommerce: 'IT_DHL_ECOMMERCE',
  EspNacex: 'ESP_NACEX',
  PrtCtt: 'PRT_CTT',
  BeKiala: 'BE_KIALA',
  AsendiaUk: 'ASENDIA_UK',
  GlobalTnt: 'GLOBAL_TNT',
  PosturIs: 'POSTUR_IS',
  EparcelKr: 'EPARCEL_KR',
  InpostPaczkomaty: 'INPOST_PACZKOMATY',
  ItPosteItalia: 'IT_POSTE_ITALIA',
  BeBpost: 'BE_BPOST',
  PlPocztaPolska: 'PL_POCZTA_POLSKA',
  MysMysPost: 'MYS_MYS_POST',
  SgSgPost: 'SG_SG_POST',
  ThaThailandPost: 'THA_THAILAND_POST',
  Lexship: 'LEXSHIP',
  FastwayNz: 'FASTWAY_NZ',
  DhlAu: 'DHL_AU',
  Costmeticsnow: 'COSTMETICSNOW',
  Pflogistics: 'PFLOGISTICS',
  LoomisExpress: 'LOOMIS_EXPRESS',
  GlsItaly: 'GLS_ITALY',
  Line: 'LINE',
  GelExpress: 'GEL_EXPRESS',
  Huodull: 'HUODULL',
  NinjavanSg: 'NINJAVAN_SG',
  Janio: 'JANIO',
  AoCourier: 'AO_COURIER',
  BrtItSenderRef: 'BRT_IT_SENDER_REF',
  Sailpost: 'SAILPOST',
  Lalamove: 'LALAMOVE',
  NewzealandCouriers: 'NEWZEALAND_COURIERS',
  Etomars: 'ETOMARS',
  Virtransport: 'VIRTRANSPORT',
  Wizmo: 'WIZMO',
  Palletways: 'PALLETWAYS',
  IDika: 'I_DIKA',
  CflLogistics: 'CFL_LOGISTICS',
  Gemworldwide: 'GEMWORLDWIDE',
  GlobalExpress: 'GLOBAL_EXPRESS',
  LogistyxTransgroup: 'LOGISTYX_TRANSGROUP',
  WestbankCourier: 'WESTBANK_COURIER',
  ArcoSpedizioni: 'ARCO_SPEDIZIONI',
  YdhExpress: 'YDH_EXPRESS',
  Parcelinklogistics: 'PARCELINKLOGISTICS',
  Cndexpress: 'CNDEXPRESS',
  NoxNightTimeExpress: 'NOX_NIGHT_TIME_EXPRESS',
  Aeronet: 'AERONET',
  Ltianexp: 'LTIANEXP',
  Integra2Ftp: 'INTEGRA2_FTP',
  Parcelone: 'PARCELONE',
  NoxNachtexpress: 'NOX_NACHTEXPRESS',
  CnChinaPostEms: 'CN_CHINA_POST_EMS',
  Chukou1: 'CHUKOU1',
  GlsSlov: 'GLS_SLOV',
  OrangeDs: 'ORANGE_DS',
  JoomLogis: 'JOOM_LOGIS',
  AusStartrack: 'AUS_STARTRACK',
  Dhl: 'DHL',
  GbApc: 'GB_APC',
  Bondscouriers: 'BONDSCOURIERS',
  JpnJapanPost: 'JPN_JAPAN_POST',
  Usps: 'USPS',
  Winit: 'WINIT',
  ArgOca: 'ARG_OCA',
  TwTaiwanPost: 'TW_TAIWAN_POST',
  DmmNetwork: 'DMM_NETWORK',
  Tnt: 'TNT',
  BhPosta: 'BH_POSTA',
  SwePostnord: 'SWE_POSTNORD',
  CaCanadaPost: 'CA_CANADA_POST',
  Wiseloads: 'WISELOADS',
  AsendiaHk: 'ASENDIA_HK',
  NldGls: 'NLD_GLS',
  MexRedpack: 'MEX_REDPACK',
  JetShip: 'JET_SHIP',
  DeDhlExpress: 'DE_DHL_EXPRESS',
  NinjavanThai: 'NINJAVAN_THAI',
  RabenGroup: 'RABEN_GROUP',
  EspAsm: 'ESP_ASM',
  HrvHrvatska: 'HRV_HRVATSKA',
  GlobalEstes: 'GLOBAL_ESTES',
  LtuLietuvos: 'LTU_LIETUVOS',
  BelDhl: 'BEL_DHL',
  AuAuPost: 'AU_AU_POST',
  Speedexcourier: 'SPEEDEXCOURIER',
  FrColis: 'FR_COLIS',
  Aramex: 'ARAMEX',
  Dpex: 'DPEX',
  MysAirpak: 'MYS_AIRPAK',
  Cuckooexpress: 'CUCKOOEXPRESS',
  DpdPoland: 'DPD_POLAND',
  NldPostnl: 'NLD_POSTNL',
  NimExpress: 'NIM_EXPRESS',
  Quantium: 'QUANTIUM',
  Sendle: 'SENDLE',
  EspRedur: 'ESP_REDUR',
  Matkahuolto: 'MATKAHUOLTO',
  Cpacket: 'CPACKET',
  Posti: 'POSTI',
  HunterExpress: 'HUNTER_EXPRESS',
  ChoirExp: 'CHOIR_EXP',
  LegionExpress: 'LEGION_EXPRESS',
  AustrianPostExpress: 'AUSTRIAN_POST_EXPRESS',
  Grupo: 'GRUPO',
  PostaRo: 'POSTA_RO',
  InterparcelUk: 'INTERPARCEL_UK',
  GlobalAbf: 'GLOBAL_ABF',
  PostenNorge: 'POSTEN_NORGE',
  XpertDelivery: 'XPERT_DELIVERY',
  DhlRefr: 'DHL_REFR',
  DhlHk: 'DHL_HK',
  SkynetUae: 'SKYNET_UAE',
  Gojek: 'GOJEK',
  YodelIntnl: 'YODEL_INTNL',
  Janco: 'JANCO',
  Yto: 'YTO',
  WiseExpress: 'WISE_EXPRESS',
  JtexpressVn: 'JTEXPRESS_VN',
  FedexIntlMlserv: 'FEDEX_INTL_MLSERV',
  Vamox: 'VAMOX',
  AmsGrp: 'AMS_GRP',
  DhlJp: 'DHL_JP',
  Hrparcel: 'HRPARCEL',
  Geswl: 'GESWL',
  Bluestar: 'BLUESTAR',
  CdekTr: 'CDEK_TR',
  Descartes: 'DESCARTES',
  DeltecUk: 'DELTEC_UK',
  DtdcExpress: 'DTDC_EXPRESS',
  Tourline: 'TOURLINE',
  BhWorldwide: 'BH_WORLDWIDE',
  Ocs: 'OCS',
  YingnuoLogistics: 'YINGNUO_LOGISTICS',
  Ups: 'UPS',
  Toll: 'TOLL',
  PrtSeur: 'PRT_SEUR',
  DtdcAu: 'DTDC_AU',
  ThaDynamicLogistics: 'THA_DYNAMIC_LOGISTICS',
  UbiLogistics: 'UBI_LOGISTICS',
  FedexCrossborder: 'FEDEX_CROSSBORDER',
  A1Post: 'A1POST',
  TazmanianFreight: 'TAZMANIAN_FREIGHT',
  CjIntMy: 'CJ_INT_MY',
  SaiaFreight: 'SAIA_FREIGHT',
  SgQxpress: 'SG_QXPRESS',
  NhansSolutions: 'NHANS_SOLUTIONS',
  DpdFr: 'DPD_FR',
  Coordinadora: 'COORDINADORA',
  Andreani: 'ANDREANI',
  Doora: 'DOORA',
  InterparcelNz: 'INTERPARCEL_NZ',
  PhlJamexpress: 'PHL_JAMEXPRESS',
  BelBelgiumPost: 'BEL_BELGIUM_POST',
  UsApc: 'US_APC',
  IdnPos: 'IDN_POS',
  FrMondial: 'FR_MONDIAL',
  DeDhl: 'DE_DHL',
  HkRpx: 'HK_RPX',
  DhlPieceid: 'DHL_PIECEID',
  VnpostEms: 'VNPOST_EMS',
  Rrdonnelley: 'RRDONNELLEY',
  DpdDe: 'DPD_DE',
  DelcartIn: 'DELCART_IN',
  Imexglobalsolutions: 'IMEXGLOBALSOLUTIONS',
  Acommerce: 'ACOMMERCE',
  Eurodis: 'EURODIS',
  Canpar: 'CANPAR',
  Gls: 'GLS',
  IndEcom: 'IND_ECOM',
  EspEnvialia: 'ESP_ENVIALIA',
  DhlUk: 'DHL_UK',
  SmsaExpress: 'SMSA_EXPRESS',
  TntFr: 'TNT_FR',
  DexI: 'DEX_I',
  BudbeeWebhook: 'BUDBEE_WEBHOOK',
  CopaCourier: 'COPA_COURIER',
  VnmVietnamPost: 'VNM_VIETNAM_POST',
  DpdHk: 'DPD_HK',
  TollNz: 'TOLL_NZ',
  Echo: 'ECHO',
  FedexFr: 'FEDEX_FR',
  Borderexpress: 'BORDEREXPRESS',
  MailplusJpn: 'MAILPLUS_JPN',
  TntUkRefr: 'TNT_UK_REFR',
  Kec: 'KEC',
  DpdRo: 'DPD_RO',
  TntJp: 'TNT_JP',
  ThCj: 'TH_CJ',
  EcCn: 'EC_CN',
  FastwayUk: 'FASTWAY_UK',
  FastwayUs: 'FASTWAY_US',
  GlsDe: 'GLS_DE',
  GlsEs: 'GLS_ES',
  GlsFr: 'GLS_FR',
  MondialBe: 'MONDIAL_BE',
  SgtIt: 'SGT_IT',
  TntCn: 'TNT_CN',
  TntDe: 'TNT_DE',
  TntEs: 'TNT_ES',
  TntPl: 'TNT_PL',
  Parcelforce: 'PARCELFORCE',
  SwissPost: 'SWISS_POST',
  TollIpec: 'TOLL_IPEC',
  Air21: 'AIR_21',
  Airspeed: 'AIRSPEED',
  Bert: 'BERT',
  Bluedart: 'BLUEDART',
  Collectplus: 'COLLECTPLUS',
  Courierplus: 'COURIERPLUS',
  CourierPost: 'COURIER_POST',
  DhlGlobalMail: 'DHL_GLOBAL_MAIL',
  DpdUk: 'DPD_UK',
  DeltecDe: 'DELTEC_DE',
  DeutscheDe: 'DEUTSCHE_DE',
  Dotzot: 'DOTZOT',
  EltaGr: 'ELTA_GR',
  EmsCn: 'EMS_CN',
  Ecargo: 'ECARGO',
  Ensenda: 'ENSENDA',
  FercamIt: 'FERCAM_IT',
  FastwayZa: 'FASTWAY_ZA',
  FastwayAu: 'FASTWAY_AU',
  FirstLogisitcs: 'FIRST_LOGISITCS',
  Geodis: 'GEODIS',
  Globegistics: 'GLOBEGISTICS',
  Greyhound: 'GREYHOUND',
  JetshipMy: 'JETSHIP_MY',
  LionParcel: 'LION_PARCEL',
  Aeroflash: 'AEROFLASH',
  Ontrac: 'ONTRAC',
  Sagawa: 'SAGAWA',
  Siodemka: 'SIODEMKA',
  Startrack: 'STARTRACK',
  TntAu: 'TNT_AU',
  TntIt: 'TNT_IT',
  Transmission: 'TRANSMISSION',
  Yamato: 'YAMATO',
  DhlIt: 'DHL_IT',
  DhlAt: 'DHL_AT',
  LogisticsworldwideKr: 'LOGISTICSWORLDWIDE_KR',
  GlsSpain: 'GLS_SPAIN',
  AmazonUkApi: 'AMAZON_UK_API',
  DpdFrReference: 'DPD_FR_REFERENCE',
  DhlparcelUk: 'DHLPARCEL_UK',
  Megasave: 'MEGASAVE',
  Qualitypost: 'QUALITYPOST',
  IdsLogistics: 'IDS_LOGISTICS',
  Joyingbox: 'JOYINGBOX',
  PantherOrderNumber: 'PANTHER_ORDER_NUMBER',
  WatkinsShepard: 'WATKINS_SHEPARD',
  Fasttrack: 'FASTTRACK',
  UpExpress: 'UP_EXPRESS',
  Elogistica: 'ELOGISTICA',
  Ecourier: 'ECOURIER',
  CjPhilippines: 'CJ_PHILIPPINES',
  Speedex: 'SPEEDEX',
  Orangeconnex: 'ORANGECONNEX',
  Tecor: 'TECOR',
  Saee: 'SAEE',
  GlsItalyFtp: 'GLS_ITALY_FTP',
  Delivere: 'DELIVERE',
  Yycom: 'YYCOM',
  AdicionalPt: 'ADICIONAL_PT',
  Dksh: 'DKSH',
  NipponExpressFtp: 'NIPPON_EXPRESS_FTP',
  Gols: 'GOLS',
  Fujexp: 'FUJEXP',
  Qtrack: 'QTRACK',
  OmlogisticsApi: 'OMLOGISTICS_API',
  Gdpharm: 'GDPHARM',
  MisumiCn: 'MISUMI_CN',
  AirCanada: 'AIR_CANADA',
  City56Webhook: 'CITY56_WEBHOOK',
  SagawaApi: 'SAGAWA_API',
  Kedaex: 'KEDAEX',
  PgeonApi: 'PGEON_API',
  Weworldexpress: 'WEWORLDEXPRESS',
  JtLogistics: 'JT_LOGISTICS',
  Trusk: 'TRUSK',
  Viaxpress: 'VIAXPRESS',
  DhlSupplychainId: 'DHL_SUPPLYCHAIN_ID',
  ZuelligpharmaSftp: 'ZUELLIGPHARMA_SFTP',
  Meest: 'MEEST',
  TollPriority: 'TOLL_PRIORITY',
  MothershipApi: 'MOTHERSHIP_API',
  Capital: 'CAPITAL',
  EuropaketApi: 'EUROPAKET_API',
  Hfd: 'HFD',
  TourlineReference: 'TOURLINE_REFERENCE',
  GioEcourier: 'GIO_ECOURIER',
  CnLogistics: 'CN_LOGISTICS',
  Pandion: 'PANDION',
  BpostApi: 'BPOST_API',
  Passportshipping: 'PASSPORTSHIPPING',
  Pakajo: 'PAKAJO',
  Dachser: 'DACHSER',
  YusenSftp: 'YUSEN_SFTP',
  Shyplite: 'SHYPLITE',
  Xyy: 'XYY',
  Mwd: 'MWD',
  Faxecargo: 'FAXECARGO',
  Mazet: 'MAZET',
  FirstLogisticsApi: 'FIRST_LOGISTICS_API',
  SprintPack: 'SPRINT_PACK',
  HermesDeFtp: 'HERMES_DE_FTP',
  Concise: 'CONCISE',
  KerryExpressTwApi: 'KERRY_EXPRESS_TW_API',
  Ewe: 'EWE',
  Fastdespatch: 'FASTDESPATCH',
  AbcustomSftp: 'ABCUSTOM_SFTP',
  Chazki: 'CHAZKI',
  Shippie: 'SHIPPIE',
  GeodisApi: 'GEODIS_API',
  NaqelExpress: 'NAQEL_EXPRESS',
  PapaWebhook: 'PAPA_WEBHOOK',
  Forwardair: 'FORWARDAIR',
  DialogoLogisticaApi: 'DIALOGO_LOGISTICA_API',
  LalamoveApi: 'LALAMOVE_API',
  Tomydoor: 'TOMYDOOR',
  KronosWebhook: 'KRONOS_WEBHOOK',
  Jtcargo: 'JTCARGO',
  TCat: 'T_CAT',
  ConciseWebhook: 'CONCISE_WEBHOOK',
  TeleportWebhook: 'TELEPORT_WEBHOOK',
  CustomcoApi: 'CUSTOMCO_API',
  SpxTh: 'SPX_TH',
  BolloreLogistics: 'BOLLORE_LOGISTICS',
  ClicklinkSftp: 'CLICKLINK_SFTP',
  M3Logistics: 'M3LOGISTICS',
  VnpostApi: 'VNPOST_API',
  AxlehireFtp: 'AXLEHIRE_FTP',
  Shadowfax: 'SHADOWFAX',
  MyhermesUkApi: 'MYHERMES_UK_API',
  Daiichi: 'DAIICHI',
  MensajerosurbanosApi: 'MENSAJEROSURBANOS_API',
  Polarspeed: 'POLARSPEED',
  IdexpressId: 'IDEXPRESS_ID',
  Payo: 'PAYO',
  WhistlSftp: 'WHISTL_SFTP',
  IntexDe: 'INTEX_DE',
  Trans2U: 'TRANS2U',
  ProductcaregroupSftp: 'PRODUCTCAREGROUP_SFTP',
  Bigsmart: 'BIGSMART',
  ExpeditorsApiRef: 'EXPEDITORS_API_REF',
  AitworldwideApi: 'AITWORLDWIDE_API',
  Worldcourier: 'WORLDCOURIER',
  Quiqup: 'QUIQUP',
  AgedissSftp: 'AGEDISS_SFTP',
  AndreaniApi: 'ANDREANI_API',
  Crlexpress: 'CRLEXPRESS',
  Smartcat: 'SMARTCAT',
  Crossflight: 'CROSSFLIGHT',
  Procarrier: 'PROCARRIER',
  DhlReferenceApi: 'DHL_REFERENCE_API',
  SeinoApi: 'SEINO_API',
  Wspexpress: 'WSPEXPRESS',
  Kronos: 'KRONOS',
  TotalExpressApi: 'TOTAL_EXPRESS_API',
  Parcll: 'PARCLL',
  Xpedigo: 'XPEDIGO',
  StarTrackWebhook: 'STAR_TRACK_WEBHOOK',
  Gpost: 'GPOST',
  Ucs: 'UCS',
  Dmfgroup: 'DMFGROUP',
  CoordinadoraApi: 'COORDINADORA_API',
  Marken: 'MARKEN',
  Ntl: 'NTL',
  Redjepakketje: 'REDJEPAKKETJE',
  AlliedExpressFtp: 'ALLIED_EXPRESS_FTP',
  MondialrelayEs: 'MONDIALRELAY_ES',
  NaekoFtp: 'NAEKO_FTP',
  Mhi: 'MHI',
  Shippify: 'SHIPPIFY',
  MalcaAmitApi: 'MALCA_AMIT_API',
  JtexpressSgApi: 'JTEXPRESS_SG_API',
  DachserWeb: 'DACHSER_WEB',
  Flightlg: 'FLIGHTLG',
  Cago: 'CAGO',
  Com1Express: 'COM1EXPRESS',
  TonamiFtp: 'TONAMI_FTP',
  Packfleet: 'PACKFLEET',
  PurolatorInternational: 'PUROLATOR_INTERNATIONAL',
  WineshippingWebhook: 'WINESHIPPING_WEBHOOK',
  DhlEsSftp: 'DHL_ES_SFTP',
  PchomeApi: 'PCHOME_API',
  CeskapostaApi: 'CESKAPOSTA_API',
  Gorush: 'GORUSH',
  Homerunner: 'HOMERUNNER',
  AmazonOrder: 'AMAZON_ORDER',
  EfwnowApi: 'EFWNOW_API',
  CblLogisticaApi: 'CBL_LOGISTICA_API',
  Nimbuspost: 'NIMBUSPOST',
  LogwinLogistics: 'LOGWIN_LOGISTICS',
  NowlogApi: 'NOWLOG_API',
  DpdNl: 'DPD_NL',
  Godependable: 'GODEPENDABLE',
  Esdex: 'ESDEX',
  LogisystemsSftp: 'LOGISYSTEMS_SFTP',
  Expeditors: 'EXPEDITORS',
  SntglobalApi: 'SNTGLOBAL_API',
  Shipx: 'SHIPX',
  QintlApi: 'QINTL_API',
  Packs: 'PACKS',
  PostnlInternational: 'POSTNL_INTERNATIONAL',
  AmazonEmailPush: 'AMAZON_EMAIL_PUSH',
  DhlApi: 'DHL_API',
  Spx: 'SPX',
  Axlehire: 'AXLEHIRE',
  Icscourier: 'ICSCOURIER',
  DialogoLogistica: 'DIALOGO_LOGISTICA',
  ShunbangExpress: 'SHUNBANG_EXPRESS',
  TcsApi: 'TCS_API',
  SfExpressCn: 'SF_EXPRESS_CN',
  Packeta: 'PACKETA',
  SicTeliway: 'SIC_TELIWAY',
  MondialrelayFr: 'MONDIALRELAY_FR',
  IntimeFtp: 'INTIME_FTP',
  JdExpress: 'JD_EXPRESS',
  Fastbox: 'FASTBOX',
  Patheon: 'PATHEON',
  IndiaPost: 'INDIA_POST',
  TipsaRef: 'TIPSA_REF',
  Ecofreight: 'ECOFREIGHT',
  Vox: 'VOX',
  DirectfreightAuRef: 'DIRECTFREIGHT_AU_REF',
  BesttransportSftp: 'BESTTRANSPORT_SFTP',
  AustraliaPostApi: 'AUSTRALIA_POST_API',
  FragilepakSftp: 'FRAGILEPAK_SFTP',
  Flipxp: 'FLIPXP',
  ValueWebhook: 'VALUE_WEBHOOK',
  Daeshin: 'DAESHIN',
  Sherpa: 'SHERPA',
  MwdApi: 'MWD_API',
  Smartkargo: 'SMARTKARGO',
  DnjExpress: 'DNJ_EXPRESS',
  Gopeople: 'GOPEOPLE',
  MysendleApi: 'MYSENDLE_API',
  AramexApi: 'ARAMEX_API',
  Pidge: 'PIDGE',
  Thaiparcels: 'THAIPARCELS',
  PantherReferenceApi: 'PANTHER_REFERENCE_API',
  Postaplus: 'POSTAPLUS',
  Buffalo: 'BUFFALO',
  UEnvios: 'U_ENVIOS',
  EliteCo: 'ELITE_CO',
  Barqexp: 'BARQEXP',
  RocheInternalSftp: 'ROCHE_INTERNAL_SFTP',
  DbschenkerIceland: 'DBSCHENKER_ICELAND',
  TntFrReference: 'TNT_FR_REFERENCE',
  Newgisticsapi: 'NEWGISTICSAPI',
  Glovo: 'GLOVO',
  GwlogisApi: 'GWLOGIS_API',
  SpreetailApi: 'SPREETAIL_API',
  Moova: 'MOOVA',
  Plycongroup: 'PLYCONGROUP',
  UspsWebhook: 'USPS_WEBHOOK',
  Reimaginedelivery: 'REIMAGINEDELIVERY',
  EdfFtp: 'EDF_FTP',
  Dao365: 'DAO365',
  BiocairFtp: 'BIOCAIR_FTP',
  RansaWebhook: 'RANSA_WEBHOOK',
  Shipxpres: 'SHIPXPRES',
  CourantPlusApi: 'COURANT_PLUS_API',
  Shipa: 'SHIPA',
  Homelogistics: 'HOMELOGISTICS',
  Dx: 'DX',
  PosteItalianePaccocelere: 'POSTE_ITALIANE_PACCOCELERE',
  TollWebhook: 'TOLL_WEBHOOK',
  LctbrApi: 'LCTBR_API',
  DxFreight: 'DX_FREIGHT',
  DhlSftp: 'DHL_SFTP',
  Shiprocket: 'SHIPROCKET',
  UberWebhook: 'UBER_WEBHOOK',
  Statovernight: 'STATOVERNIGHT',
  Burd: 'BURD',
  Fastship: 'FASTSHIP',
  IbventureWebhook: 'IBVENTURE_WEBHOOK',
  GatiKweApi: 'GATI_KWE_API',
  CryopdpFtp: 'CRYOPDP_FTP',
  Hubbed: 'HUBBED',
  TipsaApi: 'TIPSA_API',
  Araskargo: 'ARASKARGO',
  ThijsNl: 'THIJS_NL',
  AtshealthcareReference: 'ATSHEALTHCARE_REFERENCE',
  _99Minutos: '99MINUTOS',
  HellenicPost: 'HELLENIC_POST',
  HsmGlobal: 'HSM_GLOBAL',
  Mnx: 'MNX',
  Nmtransfer: 'NMTRANSFER',
  Logysto: 'LOGYSTO',
  IndiaPostInt: 'INDIA_POST_INT',
  AmazonFbaSwishipIn: 'AMAZON_FBA_SWISHIP_IN',
  SrtTransport: 'SRT_TRANSPORT',
  Bomi: 'BOMI',
  DeliverrSftp: 'DELIVERR_SFTP',
  Hsdexpress: 'HSDEXPRESS',
  SimpletireWebhook: 'SIMPLETIRE_WEBHOOK',
  HunterExpressSftp: 'HUNTER_EXPRESS_SFTP',
  UpsApi: 'UPS_API',
  WooyoungLogisticsSftp: 'WOOYOUNG_LOGISTICS_SFTP',
  PhseApi: 'PHSE_API',
  WishEmailPush: 'WISH_EMAIL_PUSH',
  Northline: 'NORTHLINE',
  Medafrica: 'MEDAFRICA',
  DpdAtSftp: 'DPD_AT_SFTP',
  Anteraja: 'ANTERAJA',
  DhlGlobalForwardingApi: 'DHL_GLOBAL_FORWARDING_API',
  LbcexpressApi: 'LBCEXPRESS_API',
  Simsglobal: 'SIMSGLOBAL',
  Cdldelivers: 'CDLDELIVERS',
  Typ: 'TYP',
  TestingCourierWebhook: 'TESTING_COURIER_WEBHOOK',
  PandagoApi: 'PANDAGO_API',
  RoyalMailFtp: 'ROYAL_MAIL_FTP',
  Thunderexpress: 'THUNDEREXPRESS',
  SecretlabWebhook: 'SECRETLAB_WEBHOOK',
  Setel: 'SETEL',
  JdWorldwide: 'JD_WORLDWIDE',
  DpdRuApi: 'DPD_RU_API',
  ArgentsWebhook: 'ARGENTS_WEBHOOK',
  Postone: 'POSTONE',
  Tusklogistics: 'TUSKLOGISTICS',
  RhenusUkApi: 'RHENUS_UK_API',
  TaqbinSgApi: 'TAQBIN_SG_API',
  InntralogSftp: 'INNTRALOG_SFTP',
  Dayross: 'DAYROSS',
  CorreosexpressApi: 'CORREOSEXPRESS_API',
  InternationalSeurApi: 'INTERNATIONAL_SEUR_API',
  YodelApi: 'YODEL_API',
  Heroexpress: 'HEROEXPRESS',
  DhlSupplychainIn: 'DHL_SUPPLYCHAIN_IN',
  UrgentCargus: 'URGENT_CARGUS',
  Frontdoorcorp: 'FRONTDOORCORP',
  JtexpressPh: 'JTEXPRESS_PH',
  ParcelstarsWebhook: 'PARCELSTARS_WEBHOOK',
  DpdSkSftp: 'DPD_SK_SFTP',
  Movianto: 'MOVIANTO',
  OzepartsShipping: 'OZEPARTS_SHIPPING',
  Kargomkolay: 'KARGOMKOLAY',
  Trunkrs: 'TRUNKRS',
  OmnirpsWebhook: 'OMNIRPS_WEBHOOK',
  Chilexpress: 'CHILEXPRESS',
  TestingCourier: 'TESTING_COURIER',
  JneApi: 'JNE_API',
  BjshomedeliveryFtp: 'BJSHOMEDELIVERY_FTP',
  DexpressWebhook: 'DEXPRESS_WEBHOOK',
  UspsApi: 'USPS_API',
  Transvirtual: 'TRANSVIRTUAL',
  SolisticaApi: 'SOLISTICA_API',
  ChienventureWebhook: 'CHIENVENTURE_WEBHOOK',
  DpdUkSftp: 'DPD_UK_SFTP',
  InpostUk: 'INPOST_UK',
  Javit: 'JAVIT',
  ZtoDomestic: 'ZTO_DOMESTIC',
  DhlGtApi: 'DHL_GT_API',
  CevaTracking: 'CEVA_TRACKING',
  KomonExpress: 'KOMON_EXPRESS',
  EastwestcourierFtp: 'EASTWESTCOURIER_FTP',
  Danniao: 'DANNIAO',
  Spectran: 'SPECTRAN',
  DeliverIt: 'DELIVER_IT',
  Relaiscolis: 'RELAISCOLIS',
  GlsSpainApi: 'GLS_SPAIN_API',
  Postplus: 'POSTPLUS',
  Airterra: 'AIRTERRA',
  GioEcourierApi: 'GIO_ECOURIER_API',
  DpdChSftp: 'DPD_CH_SFTP',
  FedexApi: 'FEDEX_API',
  Intersmarttrans: 'INTERSMARTTRANS',
  HermesUkSftp: 'HERMES_UK_SFTP',
  ExelotFtp: 'EXELOT_FTP',
  DhlPaApi: 'DHL_PA_API',
  VirtransportSftp: 'VIRTRANSPORT_SFTP',
  Worldnet: 'WORLDNET',
  InstaboxWebhook: 'INSTABOX_WEBHOOK',
  Kng: 'KNG',
  FlashexpressWebhook: 'FLASHEXPRESS_WEBHOOK',
  MagyarPostaApi: 'MAGYAR_POSTA_API',
  WeshipApi: 'WESHIP_API',
  OhiWebhook: 'OHI_WEBHOOK',
  Mudita: 'MUDITA',
  BluedartApi: 'BLUEDART_API',
  TCatApi: 'T_CAT_API',
  Ads: 'ADS',
  HermesIt: 'HERMES_IT',
  FitzmarkApi: 'FITZMARK_API',
  PostiApi: 'POSTI_API',
  SmsaExpressWebhook: 'SMSA_EXPRESS_WEBHOOK',
  TamergroupWebhook: 'TAMERGROUP_WEBHOOK',
  Livrapide: 'LIVRAPIDE',
  NipponExpress: 'NIPPON_EXPRESS',
  Bettertrucks: 'BETTERTRUCKS',
  Fan: 'FAN',
  PbUspsflatsFtp: 'PB_USPSFLATS_FTP',
  Parcelright: 'PARCELRIGHT',
  Ithinklogistics: 'ITHINKLOGISTICS',
  KerryExpressThWebhook: 'KERRY_EXPRESS_TH_WEBHOOK',
  Ecoutier: 'ECOUTIER',
  Showl: 'SHOWL',
  BrtItApi: 'BRT_IT_API',
  RixonhkApi: 'RIXONHK_API',
  DbschenkerApi: 'DBSCHENKER_API',
  Ilyanglogis: 'ILYANGLOGIS',
  MailBoxEtc: 'MAIL_BOX_ETC',
  Weship: 'WESHIP',
  DhlGlobalMailApi: 'DHL_GLOBAL_MAIL_API',
  Activos24Api: 'ACTIVOS24_API',
  Atshealthcare: 'ATSHEALTHCARE',
  Luwjistik: 'LUWJISTIK',
  GwWorld: 'GW_WORLD',
  FairsendenApi: 'FAIRSENDEN_API',
  ServipWebhook: 'SERVIP_WEBHOOK',
  Swiship: 'SWISHIP',
  Tanet: 'TANET',
  HotsinCargo: 'HOTSIN_CARGO',
  Direx: 'DIREX',
  Huantong: 'HUANTONG',
  ImileApi: 'IMILE_API',
  Bdmnet: 'BDMNET',
  Auexpress: 'AUEXPRESS',
  Nytlogistics: 'NYTLOGISTICS',
  DsvReference: 'DSV_REFERENCE',
  NovofarmaWebhook: 'NOVOFARMA_WEBHOOK',
  AitworldwideSftp: 'AITWORLDWIDE_SFTP',
  Shopolive: 'SHOPOLIVE',
  FnfZa: 'FNF_ZA',
  DhlEcommerceGc: 'DHL_ECOMMERCE_GC',
  Fetchr: 'FETCHR',
  StarlinksApi: 'STARLINKS_API',
  Yyexpress: 'YYEXPRESS',
  Servientrega: 'SERVIENTREGA',
  Hanjin: 'HANJIN',
  SpanishSeurFtp: 'SPANISH_SEUR_FTP',
  DxB2BConnum: 'DX_B2B_CONNUM',
  HelthjemApi: 'HELTHJEM_API',
  Inexpost: 'INEXPOST',
  A2BBa: 'A2B_BA',
  RhenusGroup: 'RHENUS_GROUP',
  SberlogisticsRu: 'SBERLOGISTICS_RU',
  MalcaAmit: 'MALCA_AMIT',
  Ppl: 'PPL',
  OsmWorldwideSftp: 'OSM_WORLDWIDE_SFTP',
  Acilogistix: 'ACILOGISTIX',
  Optimacourier: 'OPTIMACOURIER',
  NovaPoshtaApi: 'NOVA_POSHTA_API',
  Loggi: 'LOGGI',
  Yifan: 'YIFAN',
  Mydynalogic: 'MYDYNALOGIC',
  Morninglobal: 'MORNINGLOBAL',
  ConciseApi: 'CONCISE_API',
  Fxtran: 'FXTRAN',
  DeliveryourparcelZa: 'DELIVERYOURPARCEL_ZA',
  Uparcel: 'UPARCEL',
  MobiBr: 'MOBI_BR',
  LoginextWebhook: 'LOGINEXT_WEBHOOK',
  Ems: 'EMS',
  Speedy: 'SPEEDY',
} as const;

export type ShipmentCarrier =
  (typeof ShipmentCarrier)[keyof typeof ShipmentCarrier];

/**
 * The tracking information for a shipment.
 * @export
 * @interface ShipmentTracker
 */
export interface ShipmentTracker {
  /**
   * The PayPal transaction ID.
   * @type {string}
   * @memberof ShipmentTracker
   */
  transaction_id: string;
  /**
   * The tracking number for the shipment. This property supports Unicode.
   * @type {string}
   * @memberof ShipmentTracker
   */
  tracking_number?: string;
  /**
   *
   * @type {ShipmentTrackingNumberType}
   * @memberof ShipmentTracker
   */
  tracking_number_type?: ShipmentTrackingNumberType;
  /**
   *
   * @type {ShipmentTrackingStatus}
   * @memberof ShipmentTracker
   */
  status: ShipmentTrackingStatus;
  /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   * @type {string}
   * @memberof ShipmentTracker
   */
  shipment_date?: string;
  /**
   *
   * @type {ShipmentCarrier}
   * @memberof ShipmentTracker
   */
  carrier?: ShipmentCarrier;
  /**
   * The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode.
   * @type {string}
   * @memberof ShipmentTracker
   */
  carrier_name_other?: string;
  /**
   * The postage payment ID. This property supports Unicode.
   * @type {string}
   * @memberof ShipmentTracker
   */
  postage_payment_id?: string;
  /**
   * If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
   * @type {boolean}
   * @memberof ShipmentTracker
   */
  notify_buyer?: boolean;
  /**
   * The quantity of items shipped.
   * @type {number}
   * @memberof ShipmentTracker
   */
  quantity?: number;
  /**
   * Indicates whether the carrier validated the tracking number.
   * @type {boolean}
   * @memberof ShipmentTracker
   */
  tracking_number_validated?: boolean;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof ShipmentTracker
   */
  last_updated_time?: string;
  /**
   * To denote whether the shipment is sent forward to the receiver or returned back.
   * @type {string}
   * @memberof ShipmentTracker
   */
  shipment_direction?: ShipmentTrackerShipmentDirectionEnum;
  /**
   * To denote which party uploaded the shipment tracking info.
   * @type {string}
   * @memberof ShipmentTracker
   */
  shipment_uploader?: ShipmentTrackerShipmentUploaderEnum;
}

export const ShipmentTrackerShipmentDirectionEnum = {
  Forward: 'FORWARD',
  Return: 'RETURN',
} as const;

export type ShipmentTrackerShipmentDirectionEnum =
  (typeof ShipmentTrackerShipmentDirectionEnum)[keyof typeof ShipmentTrackerShipmentDirectionEnum];
export const ShipmentTrackerShipmentUploaderEnum = {
  Merchant: 'MERCHANT',
  Consumer: 'CONSUMER',
  Partner: 'PARTNER',
} as const;

export type ShipmentTrackerShipmentUploaderEnum =
  (typeof ShipmentTrackerShipmentUploaderEnum)[keyof typeof ShipmentTrackerShipmentUploaderEnum];

/**
 * The tracking number type.
 * @export
 * @enum {string}
 */

export const ShipmentTrackingNumberType = {
  CarrierProvided: 'CARRIER_PROVIDED',
  E2EPartnerProvided: 'E2E_PARTNER_PROVIDED',
} as const;

export type ShipmentTrackingNumberType =
  (typeof ShipmentTrackingNumberType)[keyof typeof ShipmentTrackingNumberType];

/**
 * The status of the item shipment. For allowed values, see <a href=\"/docs/tracking/reference/shipping-status/\">Shipping Statuses</a>.
 * @export
 * @enum {string}
 */

export const ShipmentTrackingStatus = {
  Cancelled: 'CANCELLED',
  Delivered: 'DELIVERED',
  LocalPickup: 'LOCAL_PICKUP',
  OnHold: 'ON_HOLD',
  Shipped: 'SHIPPED',
  ShipmentCreated: 'SHIPMENT_CREATED',
  DroppedOff: 'DROPPED_OFF',
  InTransit: 'IN_TRANSIT',
  Returned: 'RETURNED',
  LabelPrinted: 'LABEL_PRINTED',
  Error: 'ERROR',
  Unconfirmed: 'UNCONFIRMED',
  PickupFailed: 'PICKUP_FAILED',
  DeliveryDelayed: 'DELIVERY_DELAYED',
  DeliveryScheduled: 'DELIVERY_SCHEDULED',
  DeliveryFailed: 'DELIVERY_FAILED',
  Inreturn: 'INRETURN',
  InProcess: 'IN_PROCESS',
  New: 'NEW',
  Void: 'VOID',
  Processed: 'PROCESSED',
  NotShipped: 'NOT_SHIPPED',
  Completed: 'COMPLETED',
} as const;

export type ShipmentTrackingStatus =
  (typeof ShipmentTrackingStatus)[keyof typeof ShipmentTrackingStatus];

/**
 * The shipping details.
 * @export
 * @interface ShippingDetail
 */
export interface ShippingDetail {
  /**
   *
   * @type {Name}
   * @memberof ShippingDetail
   */
  name?: Name;
  /**
   * A classification for the method of purchase fulfillment (e.g shipping, in-store pickup, etc). Either `type` or `options` may be present, but not both.
   * @type {string}
   * @memberof ShippingDetail
   */
  type?: ShippingDetailTypeEnum;
  /**
   * An array of shipping options that the payee or merchant offers to the payer to ship or pick up their items.
   * @type {Array<ShippingOption>}
   * @memberof ShippingDetail
   */
  options?: Array<ShippingOption>;
  /**
   *
   * @type {AddressPortable}
   * @memberof ShippingDetail
   */
  address?: AddressPortable;
}

export const ShippingDetailTypeEnum = {
  Shipping: 'SHIPPING',
  PickupInPerson: 'PICKUP_IN_PERSON',
  PickupInStore: 'PICKUP_IN_STORE',
  PickupFromPerson: 'PICKUP_FROM_PERSON',
} as const;

export type ShippingDetailTypeEnum =
  (typeof ShippingDetailTypeEnum)[keyof typeof ShippingDetailTypeEnum];

/**
 * The options that the payee or merchant offers to the payer to ship or pick up their items.
 * @export
 * @interface ShippingOption
 */
export interface ShippingOption {
  /**
   * A unique ID that identifies a payer-selected shipping option.
   * @type {string}
   * @memberof ShippingOption
   */
  id: string;
  /**
   * A description that the payer sees, which helps them choose an appropriate shipping option. For example, `Free Shipping`, `USPS Priority Shipping`, `Expédition prioritaire USPS`, or `USPS yōuxiān fā huò`. Localize this description to the payer\'s locale.
   * @type {string}
   * @memberof ShippingOption
   */
  label: string;
  /**
   *
   * @type {ShippingType}
   * @memberof ShippingOption
   */
  type?: ShippingType;
  /**
   *
   * @type {Money}
   * @memberof ShippingOption
   */
  amount?: Money;
  /**
   * If the API request sets `selected = true`, it represents the shipping option that the payee or merchant expects to be pre-selected for the payer when they first view the `shipping.options` in the PayPal Checkout experience. As part of the response if a `shipping.option` contains `selected=true`, it represents the shipping option that the payer selected during the course of checkout with PayPal. Only one `shipping.option` can be set to `selected=true`.
   * @type {boolean}
   * @memberof ShippingOption
   */
  selected: boolean;
}

/**
 * A classification for the method of purchase fulfillment.
 * @export
 * @enum {string}
 */

export const ShippingType = {
  Shipping: 'SHIPPING',
  Pickup: 'PICKUP',
  PickupInStore: 'PICKUP_IN_STORE',
  PickupFromPerson: 'PICKUP_FROM_PERSON',
} as const;

export type ShippingType = (typeof ShippingType)[keyof typeof ShippingType];

/**
 * The order shipping details.
 * @export
 * @interface ShippingWithTrackingDetails
 */
export interface ShippingWithTrackingDetails {
  /**
   *
   * @type {Name}
   * @memberof ShippingWithTrackingDetails
   */
  name?: Name;
  /**
   * A classification for the method of purchase fulfillment (e.g shipping, in-store pickup, etc). Either `type` or `options` may be present, but not both.
   * @type {string}
   * @memberof ShippingWithTrackingDetails
   */
  type?: ShippingWithTrackingDetailsTypeEnum;
  /**
   * An array of shipping options that the payee or merchant offers to the payer to ship or pick up their items.
   * @type {Array<ShippingOption>}
   * @memberof ShippingWithTrackingDetails
   */
  options?: Array<ShippingOption>;
  /**
   *
   * @type {AddressPortable}
   * @memberof ShippingWithTrackingDetails
   */
  address?: AddressPortable;
  /**
   * An array of trackers for a transaction.
   * @type {Array<Tracker>}
   * @memberof ShippingWithTrackingDetails
   */
  trackers?: Array<Tracker>;
}

export const ShippingWithTrackingDetailsTypeEnum = {
  Shipping: 'SHIPPING',
  PickupInPerson: 'PICKUP_IN_PERSON',
  PickupInStore: 'PICKUP_IN_STORE',
  PickupFromPerson: 'PICKUP_FROM_PERSON',
} as const;

export type ShippingWithTrackingDetailsTypeEnum =
  (typeof ShippingWithTrackingDetailsTypeEnum)[keyof typeof ShippingWithTrackingDetailsTypeEnum];

/**
 *
 * @export
 * @interface ShippingWithTrackingDetailsAllOf
 */
export interface ShippingWithTrackingDetailsAllOf {
  /**
   * An array of trackers for a transaction.
   * @type {Array<Tracker>}
   * @memberof ShippingWithTrackingDetailsAllOf
   */
  trackers?: Array<Tracker>;
}
/**
 * Information used to pay using Sofort.
 * @export
 * @interface Sofort
 */
export interface Sofort {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Sofort
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Sofort
   */
  country_code?: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof Sofort
   */
  bic?: string;
  /**
   * The last characters of the IBAN used to pay.
   * @type {string}
   * @memberof Sofort
   */
  iban_last_chars?: string;
}
/**
 * Information needed to pay using Sofort.
 * @export
 * @interface SofortRequest
 */
export interface SofortRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof SofortRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof SofortRequest
   */
  country_code: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof SofortRequest
   */
  experience_context?: ExperienceContextBase;
}
/**
 * Defines how and when the payment source gets vaulted.
 * @export
 * @enum {string}
 */

export const StoreInVaultInstruction = {
  OnSuccess: 'ON_SUCCESS',
} as const;

export type StoreInVaultInstruction =
  (typeof StoreInVaultInstruction)[keyof typeof StoreInVaultInstruction];

/**
 * Provides additional details to process a payment using a `payment_source` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/><ul><li>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`.</li><li>Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request.</li></ul>
 * @export
 * @interface StoredPaymentSource
 */
export interface StoredPaymentSource {
  /**
   *
   * @type {PaymentInitiator}
   * @memberof StoredPaymentSource
   */
  payment_initiator: PaymentInitiator;
  /**
   *
   * @type {StoredPaymentSourcePaymentType}
   * @memberof StoredPaymentSource
   */
  payment_type: StoredPaymentSourcePaymentType;
  /**
   *
   * @type {StoredPaymentSourceUsageType}
   * @memberof StoredPaymentSource
   */
  usage?: StoredPaymentSourceUsageType;
  /**
   *
   * @type {NetworkTransactionReference}
   * @memberof StoredPaymentSource
   */
  previous_network_transaction_reference?: NetworkTransactionReference;
}

/**
 * Indicates the type of the stored payment_source payment.
 * @export
 * @enum {string}
 */

export const StoredPaymentSourcePaymentType = {
  OneTime: 'ONE_TIME',
  Recurring: 'RECURRING',
  Unscheduled: 'UNSCHEDULED',
} as const;

export type StoredPaymentSourcePaymentType =
  (typeof StoredPaymentSourcePaymentType)[keyof typeof StoredPaymentSourcePaymentType];

/**
 * Indicates if this is a `first` or `subsequent` payment using a stored payment source (also referred to as stored credential or card on file).
 * @export
 * @enum {string}
 */

export const StoredPaymentSourceUsageType = {
  First: 'FIRST',
  Subsequent: 'SUBSEQUENT',
  Derived: 'DERIVED',
} as const;

export type StoredPaymentSourceUsageType =
  (typeof StoredPaymentSourceUsageType)[keyof typeof StoredPaymentSourceUsageType];

/**
 * Supplementary data about a payment. This object passes information that can be used to improve risk assessments and processing costs, for example, by providing Level 2 and Level 3 payment data.
 * @export
 * @interface SupplementaryData
 */
export interface SupplementaryData {
  /**
   *
   * @type {CardSupplementaryData}
   * @memberof SupplementaryData
   */
  card?: CardSupplementaryData;
}
/**
 *
 * @export
 * @interface TAXTOTALMISMATCH
 */
export interface TAXTOTALMISMATCH {
  /**
   *
   * @type {string}
   * @memberof TAXTOTALMISMATCH
   */
  issue?: TAXTOTALMISMATCHIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TAXTOTALMISMATCH
   */
  description?: TAXTOTALMISMATCHDescriptionEnum;
}

export const TAXTOTALMISMATCHIssueEnum = {
  TaxTotalMismatch: 'TAX_TOTAL_MISMATCH',
} as const;

export type TAXTOTALMISMATCHIssueEnum =
  (typeof TAXTOTALMISMATCHIssueEnum)[keyof typeof TAXTOTALMISMATCHIssueEnum];
export const TAXTOTALMISMATCHDescriptionEnum = {
  ShouldEqualSumOfTaxQuantityAcrossAllItemsForAGivenPurchaseUnit:
    'Should equal sum of (tax * quantity) across all items for a given purchase_unit.',
} as const;

export type TAXTOTALMISMATCHDescriptionEnum =
  (typeof TAXTOTALMISMATCHDescriptionEnum)[keyof typeof TAXTOTALMISMATCHDescriptionEnum];

/**
 *
 * @export
 * @interface TAXTOTALREQUIRED
 */
export interface TAXTOTALREQUIRED {
  /**
   *
   * @type {string}
   * @memberof TAXTOTALREQUIRED
   */
  issue?: TAXTOTALREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TAXTOTALREQUIRED
   */
  description?: TAXTOTALREQUIREDDescriptionEnum;
}

export const TAXTOTALREQUIREDIssueEnum = {
  TaxTotalRequired: 'TAX_TOTAL_REQUIRED',
} as const;

export type TAXTOTALREQUIREDIssueEnum =
  (typeof TAXTOTALREQUIREDIssueEnum)[keyof typeof TAXTOTALREQUIREDIssueEnum];
export const TAXTOTALREQUIREDDescriptionEnum = {
  IfItemDetailsAreSpecifiedItemsTaxTotalAndItemsQuantityCorrespondingAmountBreakdownTaxTotalIsRequired:
    'If item details are specified (items.tax_total and items.quantity) corresponding amount.breakdown.tax_total is required.',
} as const;

export type TAXTOTALREQUIREDDescriptionEnum =
  (typeof TAXTOTALREQUIREDDescriptionEnum)[keyof typeof TAXTOTALREQUIREDDescriptionEnum];

/**
 *
 * @export
 * @interface TOKENEXPIRED
 */
export interface TOKENEXPIRED {
  /**
   *
   * @type {string}
   * @memberof TOKENEXPIRED
   */
  issue?: TOKENEXPIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TOKENEXPIRED
   */
  description?: TOKENEXPIREDDescriptionEnum;
}

export const TOKENEXPIREDIssueEnum = {
  TokenExpired: 'TOKEN_EXPIRED',
} as const;

export type TOKENEXPIREDIssueEnum =
  (typeof TOKENEXPIREDIssueEnum)[keyof typeof TOKENEXPIREDIssueEnum];
export const TOKENEXPIREDDescriptionEnum = {
  TheTokenIsExpiredAndCannotBeUsedForPayment:
    'The token is expired and cannot be used for payment.',
} as const;

export type TOKENEXPIREDDescriptionEnum =
  (typeof TOKENEXPIREDDescriptionEnum)[keyof typeof TOKENEXPIREDDescriptionEnum];

/**
 *
 * @export
 * @interface TOKENIDNOTFOUND
 */
export interface TOKENIDNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof TOKENIDNOTFOUND
   */
  issue?: TOKENIDNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TOKENIDNOTFOUND
   */
  description?: TOKENIDNOTFOUNDDescriptionEnum;
}

export const TOKENIDNOTFOUNDIssueEnum = {
  TokenIdNotFound: 'TOKEN_ID_NOT_FOUND',
} as const;

export type TOKENIDNOTFOUNDIssueEnum =
  (typeof TOKENIDNOTFOUNDIssueEnum)[keyof typeof TOKENIDNOTFOUNDIssueEnum];
export const TOKENIDNOTFOUNDDescriptionEnum = {
  SpecifiedTokenWasNotFoundVerifyTheTokenAndTryTheRequestAgain:
    'Specified token was not found. Verify the token and try the request again.',
} as const;

export type TOKENIDNOTFOUNDDescriptionEnum =
  (typeof TOKENIDNOTFOUNDDescriptionEnum)[keyof typeof TOKENIDNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface TRACKERIDNOTFOUND
 */
export interface TRACKERIDNOTFOUND {
  /**
   *
   * @type {string}
   * @memberof TRACKERIDNOTFOUND
   */
  issue?: TRACKERIDNOTFOUNDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TRACKERIDNOTFOUND
   */
  description?: TRACKERIDNOTFOUNDDescriptionEnum;
}

export const TRACKERIDNOTFOUNDIssueEnum = {
  TrackerIdNotFound: 'TRACKER_ID_NOT_FOUND',
} as const;

export type TRACKERIDNOTFOUNDIssueEnum =
  (typeof TRACKERIDNOTFOUNDIssueEnum)[keyof typeof TRACKERIDNOTFOUNDIssueEnum];
export const TRACKERIDNOTFOUNDDescriptionEnum = {
  SpecifiedTrackerIdDoesNotExistCheckTheTrackerIdAndTryAgain:
    'Specified tracker ID does not exist. Check the tracker ID and try again.',
} as const;

export type TRACKERIDNOTFOUNDDescriptionEnum =
  (typeof TRACKERIDNOTFOUNDDescriptionEnum)[keyof typeof TRACKERIDNOTFOUNDDescriptionEnum];

/**
 *
 * @export
 * @interface TRANSACTIONBLOCKEDBYPAYEE
 */
export interface TRANSACTIONBLOCKEDBYPAYEE {
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONBLOCKEDBYPAYEE
   */
  issue?: TRANSACTIONBLOCKEDBYPAYEEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONBLOCKEDBYPAYEE
   */
  description?: TRANSACTIONBLOCKEDBYPAYEEDescriptionEnum;
}

export const TRANSACTIONBLOCKEDBYPAYEEIssueEnum = {
  TransactionBlockedByPayee: 'TRANSACTION_BLOCKED_BY_PAYEE',
} as const;

export type TRANSACTIONBLOCKEDBYPAYEEIssueEnum =
  (typeof TRANSACTIONBLOCKEDBYPAYEEIssueEnum)[keyof typeof TRANSACTIONBLOCKEDBYPAYEEIssueEnum];
export const TRANSACTIONBLOCKEDBYPAYEEDescriptionEnum = {
  TransactionBlockedByPayeesFraudProtectionSettings:
    'Transaction blocked by Payee’s Fraud Protection settings.',
} as const;

export type TRANSACTIONBLOCKEDBYPAYEEDescriptionEnum =
  (typeof TRANSACTIONBLOCKEDBYPAYEEDescriptionEnum)[keyof typeof TRANSACTIONBLOCKEDBYPAYEEDescriptionEnum];

/**
 *
 * @export
 * @interface TRANSACTIONLIMITEXCEEDED
 */
export interface TRANSACTIONLIMITEXCEEDED {
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONLIMITEXCEEDED
   */
  issue?: TRANSACTIONLIMITEXCEEDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONLIMITEXCEEDED
   */
  description?: TRANSACTIONLIMITEXCEEDEDDescriptionEnum;
}

export const TRANSACTIONLIMITEXCEEDEDIssueEnum = {
  TransactionLimitExceeded: 'TRANSACTION_LIMIT_EXCEEDED',
} as const;

export type TRANSACTIONLIMITEXCEEDEDIssueEnum =
  (typeof TRANSACTIONLIMITEXCEEDEDIssueEnum)[keyof typeof TRANSACTIONLIMITEXCEEDEDIssueEnum];
export const TRANSACTIONLIMITEXCEEDEDDescriptionEnum = {
  TotalPaymentAmountExceededTransactionLimit:
    'Total payment amount exceeded transaction limit.',
} as const;

export type TRANSACTIONLIMITEXCEEDEDDescriptionEnum =
  (typeof TRANSACTIONLIMITEXCEEDEDDescriptionEnum)[keyof typeof TRANSACTIONLIMITEXCEEDEDDescriptionEnum];

/**
 *
 * @export
 * @interface TRANSACTIONRECEIVINGLIMITEXCEEDED
 */
export interface TRANSACTIONRECEIVINGLIMITEXCEEDED {
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONRECEIVINGLIMITEXCEEDED
   */
  issue?: TRANSACTIONRECEIVINGLIMITEXCEEDEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONRECEIVINGLIMITEXCEEDED
   */
  description?: TRANSACTIONRECEIVINGLIMITEXCEEDEDDescriptionEnum;
}

export const TRANSACTIONRECEIVINGLIMITEXCEEDEDIssueEnum = {
  TransactionReceivingLimitExceeded: 'TRANSACTION_RECEIVING_LIMIT_EXCEEDED',
} as const;

export type TRANSACTIONRECEIVINGLIMITEXCEEDEDIssueEnum =
  (typeof TRANSACTIONRECEIVINGLIMITEXCEEDEDIssueEnum)[keyof typeof TRANSACTIONRECEIVINGLIMITEXCEEDEDIssueEnum];
export const TRANSACTIONRECEIVINGLIMITEXCEEDEDDescriptionEnum = {
  TheTransactionExceedsTheReceiversReceivingLimit:
    "The transaction exceeds the receiver's receiving limit.",
} as const;

export type TRANSACTIONRECEIVINGLIMITEXCEEDEDDescriptionEnum =
  (typeof TRANSACTIONRECEIVINGLIMITEXCEEDEDDescriptionEnum)[keyof typeof TRANSACTIONRECEIVINGLIMITEXCEEDEDDescriptionEnum];

/**
 *
 * @export
 * @interface TRANSACTIONREFUSED
 */
export interface TRANSACTIONREFUSED {
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONREFUSED
   */
  issue?: TRANSACTIONREFUSEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof TRANSACTIONREFUSED
   */
  description?: TRANSACTIONREFUSEDDescriptionEnum;
}

export const TRANSACTIONREFUSEDIssueEnum = {
  TransactionRefused: 'TRANSACTION_REFUSED',
} as const;

export type TRANSACTIONREFUSEDIssueEnum =
  (typeof TRANSACTIONREFUSEDIssueEnum)[keyof typeof TRANSACTIONREFUSEDIssueEnum];
export const TRANSACTIONREFUSEDDescriptionEnum = {
  TheRequestWasRefused: 'The request was refused.',
} as const;

export type TRANSACTIONREFUSEDDescriptionEnum =
  (typeof TRANSACTIONREFUSEDDescriptionEnum)[keyof typeof TRANSACTIONREFUSEDDescriptionEnum];

/**
 * The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.
 * @export
 * @interface TaxInfo
 */
export interface TaxInfo {
  /**
   * The customer\'s tax ID value.
   * @type {string}
   * @memberof TaxInfo
   */
  tax_id: string;
  /**
   * The customer\'s tax ID type.
   * @type {string}
   * @memberof TaxInfo
   */
  tax_id_type: TaxInfoTaxIdTypeEnum;
}

export const TaxInfoTaxIdTypeEnum = {
  Cpf: 'BR_CPF',
  Cnpj: 'BR_CNPJ',
} as const;

export type TaxInfoTaxIdTypeEnum =
  (typeof TaxInfoTaxIdTypeEnum)[keyof typeof TaxInfoTaxIdTypeEnum];

/**
 * Results of 3D Secure Authentication.
 * @export
 * @interface ThreeDSecureAuthenticationResponse
 */
export interface ThreeDSecureAuthenticationResponse {
  /**
   *
   * @type {ParesStatus}
   * @memberof ThreeDSecureAuthenticationResponse
   */
  authentication_status?: ParesStatus;
  /**
   *
   * @type {Enrolled}
   * @memberof ThreeDSecureAuthenticationResponse
   */
  enrollment_status?: Enrolled;
}

/**
 * The tokenized payment source to fund a payment.
 * @export
 * @interface Token
 */
export interface Token {
  /**
   * The PayPal-generated ID for the token.
   * @type {string}
   * @memberof Token
   */
  id: string;
  /**
   * The tokenization method that generated the ID.
   * @type {string}
   * @memberof Token
   */
  type: TokenTypeEnum;
}

export const TokenTypeEnum = {
  BillingAgreement: 'BILLING_AGREEMENT',
} as const;

export type TokenTypeEnum = (typeof TokenTypeEnum)[keyof typeof TokenTypeEnum];

/**
 * The tracking response on creation of tracker.
 * @export
 * @interface Tracker
 */
export interface Tracker {
  /**
   * The tracker id.
   * @type {string}
   * @memberof Tracker
   */
  id?: string;
  /**
   *
   * @type {any}
   * @memberof Tracker
   */
  status?: any;
  /**
   * An array of details of items in the shipment.
   * @type {Array<TrackerItem>}
   * @memberof Tracker
   */
  items?: Array<TrackerItem>;
  /**
   * An array of request-related HATEOAS links.
   * @type {Array<LinkDescription>}
   * @memberof Tracker
   */
  links?: Array<LinkDescription>;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Tracker
   */
  create_time?: string;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   * @type {string}
   * @memberof Tracker
   */
  update_time?: string;
}
/**
 *
 * @export
 * @interface TrackerAllOf
 */
export interface TrackerAllOf {
  /**
   * The tracker id.
   * @type {string}
   * @memberof TrackerAllOf
   */
  id?: string;
  /**
   *
   * @type {any}
   * @memberof TrackerAllOf
   */
  status?: any;
  /**
   * An array of details of items in the shipment.
   * @type {Array<TrackerItem>}
   * @memberof TrackerAllOf
   */
  items?: Array<TrackerItem>;
  /**
   * An array of request-related HATEOAS links.
   * @type {Array<LinkDescription>}
   * @memberof TrackerAllOf
   */
  links?: Array<LinkDescription>;
}
/**
 * The details of the items in the shipment.
 * @export
 * @interface TrackerItem
 */
export interface TrackerItem {
  /**
   * The item name or title.
   * @type {string}
   * @memberof TrackerItem
   */
  name?: string;
  /**
   * The item quantity. Must be a whole number.
   * @type {string}
   * @memberof TrackerItem
   */
  quantity?: string;
  /**
   * The stock keeping unit (SKU) for the item. This can contain unicode characters.
   * @type {string}
   * @memberof TrackerItem
   */
  sku?: string;
  /**
   * The URL to the item being purchased. Visible to buyer and used in buyer experiences.
   * @type {string}
   * @memberof TrackerItem
   */
  url?: string;
  /**
   * The URL of the item\'s image. File type and size restrictions apply. An image that violates these restrictions will not be honored.
   * @type {string}
   * @memberof TrackerItem
   */
  image_url?: string;
  /**
   *
   * @type {any}
   * @memberof TrackerItem
   */
  upc?: any;
}
/**
 * Information needed to pay using Trustly.
 * @export
 * @interface Trustly
 */
export interface Trustly {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof Trustly
   */
  name?: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof Trustly
   */
  country_code?: string;
  /**
   * The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.
   * @type {string}
   * @memberof Trustly
   */
  bic?: string;
  /**
   * The last characters of the IBAN used to pay.
   * @type {string}
   * @memberof Trustly
   */
  iban_last_chars?: string;
}
/**
 * Information needed to pay using Trustly.
 * @export
 * @interface TrustlyRequest
 */
export interface TrustlyRequest {
  /**
   * The full name representation like Mr J Smith.
   * @type {string}
   * @memberof TrustlyRequest
   */
  name: string;
  /**
   * The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   * @type {string}
   * @memberof TrustlyRequest
   */
  country_code: string;
  /**
   *
   * @type {ExperienceContextBase}
   * @memberof TrustlyRequest
   */
  experience_context?: ExperienceContextBase;
}
/**
 *
 * @export
 * @interface UNSUPPORTEDINTENT
 */
export interface UNSUPPORTEDINTENT {
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDINTENT
   */
  issue?: UNSUPPORTEDINTENTIssueEnum;
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDINTENT
   */
  description?: UNSUPPORTEDINTENTDescriptionEnum;
}

export const UNSUPPORTEDINTENTIssueEnum = {
  UnsupportedIntent: 'UNSUPPORTED_INTENT',
} as const;

export type UNSUPPORTEDINTENTIssueEnum =
  (typeof UNSUPPORTEDINTENTIssueEnum)[keyof typeof UNSUPPORTEDINTENTIssueEnum];
export const UNSUPPORTEDINTENTDescriptionEnum = {
  IntentAuthorizeIsNotSupportedForMultiplePurchaseUnitsOnlyIntentCaptureIsSupported:
    '`intent=AUTHORIZE` is not supported for multiple purchase units. Only `intent=CAPTURE` is supported.',
} as const;

export type UNSUPPORTEDINTENTDescriptionEnum =
  (typeof UNSUPPORTEDINTENTDescriptionEnum)[keyof typeof UNSUPPORTEDINTENTDescriptionEnum];

/**
 *
 * @export
 * @interface UNSUPPORTEDINTENTFORPAYMENTSOURCE
 */
export interface UNSUPPORTEDINTENTFORPAYMENTSOURCE {
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDINTENTFORPAYMENTSOURCE
   */
  issue?: UNSUPPORTEDINTENTFORPAYMENTSOURCEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDINTENTFORPAYMENTSOURCE
   */
  description?: UNSUPPORTEDINTENTFORPAYMENTSOURCEDescriptionEnum;
}

export const UNSUPPORTEDINTENTFORPAYMENTSOURCEIssueEnum = {
  UnsupportedIntentForPaymentSource: 'UNSUPPORTED_INTENT_FOR_PAYMENT_SOURCE',
} as const;

export type UNSUPPORTEDINTENTFORPAYMENTSOURCEIssueEnum =
  (typeof UNSUPPORTEDINTENTFORPAYMENTSOURCEIssueEnum)[keyof typeof UNSUPPORTEDINTENTFORPAYMENTSOURCEIssueEnum];
export const UNSUPPORTEDINTENTFORPAYMENTSOURCEDescriptionEnum = {
  IntentAuthorizeIsNotSupportedForTheSpecifiedPaymentSourceOnlyIntentCaptureIsSupported:
    '`intent=AUTHORIZE` is not supported for the specified payment_source. Only `intent=CAPTURE` is supported.',
} as const;

export type UNSUPPORTEDINTENTFORPAYMENTSOURCEDescriptionEnum =
  (typeof UNSUPPORTEDINTENTFORPAYMENTSOURCEDescriptionEnum)[keyof typeof UNSUPPORTEDINTENTFORPAYMENTSOURCEDescriptionEnum];

/**
 *
 * @export
 * @interface UNSUPPORTEDPATCHPARAMETERVALUE
 */
export interface UNSUPPORTEDPATCHPARAMETERVALUE {
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDPATCHPARAMETERVALUE
   */
  issue?: UNSUPPORTEDPATCHPARAMETERVALUEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDPATCHPARAMETERVALUE
   */
  description?: UNSUPPORTEDPATCHPARAMETERVALUEDescriptionEnum;
}

export const UNSUPPORTEDPATCHPARAMETERVALUEIssueEnum = {
  UnsupportedPatchParameterValue: 'UNSUPPORTED_PATCH_PARAMETER_VALUE',
} as const;

export type UNSUPPORTEDPATCHPARAMETERVALUEIssueEnum =
  (typeof UNSUPPORTEDPATCHPARAMETERVALUEIssueEnum)[keyof typeof UNSUPPORTEDPATCHPARAMETERVALUEIssueEnum];
export const UNSUPPORTEDPATCHPARAMETERVALUEDescriptionEnum = {
  TheValueSpecifiedForThisFieldIsNotCurrentlySupported:
    'The value specified for this field is not currently supported.',
} as const;

export type UNSUPPORTEDPATCHPARAMETERVALUEDescriptionEnum =
  (typeof UNSUPPORTEDPATCHPARAMETERVALUEDescriptionEnum)[keyof typeof UNSUPPORTEDPATCHPARAMETERVALUEDescriptionEnum];

/**
 *
 * @export
 * @interface UNSUPPORTEDPAYMENTINSTRUCTION
 */
export interface UNSUPPORTEDPAYMENTINSTRUCTION {
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDPAYMENTINSTRUCTION
   */
  issue?: UNSUPPORTEDPAYMENTINSTRUCTIONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDPAYMENTINSTRUCTION
   */
  description?: UNSUPPORTEDPAYMENTINSTRUCTIONDescriptionEnum;
}

export const UNSUPPORTEDPAYMENTINSTRUCTIONIssueEnum = {
  UnsupportedPaymentInstruction: 'UNSUPPORTED_PAYMENT_INSTRUCTION',
} as const;

export type UNSUPPORTEDPAYMENTINSTRUCTIONIssueEnum =
  (typeof UNSUPPORTEDPAYMENTINSTRUCTIONIssueEnum)[keyof typeof UNSUPPORTEDPAYMENTINSTRUCTIONIssueEnum];
export const UNSUPPORTEDPAYMENTINSTRUCTIONDescriptionEnum = {
  YouMustProvideThePaymentInstructionWhenYouCaptureAnAuthorizedPaymentForIntentAuthorizeForDetailsSeeAHrefDocsApiPaymentsV2AuthorizationsCaptureCaptureAuthorizationAForIntentCaptureSendThePaymentInstructionWhenYouCreateTheOrder:
    'You must provide the payment instruction when you capture an authorized payment for `intent=AUTHORIZE`. For details, see <a href="/docs/api/payments/v2/#authorizations_capture">Capture authorization</a>. For `intent=CAPTURE`, send the payment instruction when you create the order.',
} as const;

export type UNSUPPORTEDPAYMENTINSTRUCTIONDescriptionEnum =
  (typeof UNSUPPORTEDPAYMENTINSTRUCTIONDescriptionEnum)[keyof typeof UNSUPPORTEDPAYMENTINSTRUCTIONDescriptionEnum];

/**
 *
 * @export
 * @interface UNSUPPORTEDPROCESSINGINSTRUCTION
 */
export interface UNSUPPORTEDPROCESSINGINSTRUCTION {
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDPROCESSINGINSTRUCTION
   */
  issue?: UNSUPPORTEDPROCESSINGINSTRUCTIONIssueEnum;
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDPROCESSINGINSTRUCTION
   */
  description?: UNSUPPORTEDPROCESSINGINSTRUCTIONDescriptionEnum;
}

export const UNSUPPORTEDPROCESSINGINSTRUCTIONIssueEnum = {
  UnsupportedProcessingInstruction: 'UNSUPPORTED_PROCESSING_INSTRUCTION',
} as const;

export type UNSUPPORTEDPROCESSINGINSTRUCTIONIssueEnum =
  (typeof UNSUPPORTEDPROCESSINGINSTRUCTIONIssueEnum)[keyof typeof UNSUPPORTEDPROCESSINGINSTRUCTIONIssueEnum];
export const UNSUPPORTEDPROCESSINGINSTRUCTIONDescriptionEnum = {
  TheSpecifiedProcessingInstructionIsNotSupportedForTheGivenPaymentSourcePleaseReferToHttpsDeveloperPaypalComApiOrdersV2DefinitionProcessingInstructionForTheListOfPaymentSourceThatCanBeSpecifiedWithThisValue:
    'The specified processing_instruction is not supported for the given payment_source. Please refer to https://developer.paypal.com/api/orders/v2/#definition-processing_instruction for the list of payment_source that can be specified with this value.',
} as const;

export type UNSUPPORTEDPROCESSINGINSTRUCTIONDescriptionEnum =
  (typeof UNSUPPORTEDPROCESSINGINSTRUCTIONDescriptionEnum)[keyof typeof UNSUPPORTEDPROCESSINGINSTRUCTIONDescriptionEnum];

/**
 *
 * @export
 * @interface UNSUPPORTEDSHIPPINGTYPE
 */
export interface UNSUPPORTEDSHIPPINGTYPE {
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDSHIPPINGTYPE
   */
  issue?: UNSUPPORTEDSHIPPINGTYPEIssueEnum;
  /**
   *
   * @type {string}
   * @memberof UNSUPPORTEDSHIPPINGTYPE
   */
  description?: UNSUPPORTEDSHIPPINGTYPEDescriptionEnum;
}

export const UNSUPPORTEDSHIPPINGTYPEIssueEnum = {
  UnsupportedShippingType: 'UNSUPPORTED_SHIPPING_TYPE',
} as const;

export type UNSUPPORTEDSHIPPINGTYPEIssueEnum =
  (typeof UNSUPPORTEDSHIPPINGTYPEIssueEnum)[keyof typeof UNSUPPORTEDSHIPPINGTYPEIssueEnum];
export const UNSUPPORTEDSHIPPINGTYPEDescriptionEnum = {
  TheProvidedShippingTypeIsOnlySupportedForApplicationContextShippingPreferenceSetProvidedAddressOrNoShipping:
    'The provided `shipping.type` is only supported for `application_context.shipping_preference`=`SET_PROVIDED_ADDRESS` or `NO_SHIPPING`.',
} as const;

export type UNSUPPORTEDSHIPPINGTYPEDescriptionEnum =
  (typeof UNSUPPORTEDSHIPPINGTYPEDescriptionEnum)[keyof typeof UNSUPPORTEDSHIPPINGTYPEDescriptionEnum];

/**
 * Base vaulting specification. The object can be extended for specific use cases within each payment_source that supports vaulting.
 * @export
 * @interface V3VaultInstructionBase
 */
export interface V3VaultInstructionBase {
  /**
   *
   * @type {StoreInVaultInstruction}
   * @memberof V3VaultInstructionBase
   */
  store_in_vault: StoreInVaultInstruction;
}

/**
 *
 * @export
 * @interface VAULTINSTRUCTIONDUPLICATED
 */
export interface VAULTINSTRUCTIONDUPLICATED {
  /**
   *
   * @type {string}
   * @memberof VAULTINSTRUCTIONDUPLICATED
   */
  issue?: VAULTINSTRUCTIONDUPLICATEDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof VAULTINSTRUCTIONDUPLICATED
   */
  description?: VAULTINSTRUCTIONDUPLICATEDDescriptionEnum;
}

export const VAULTINSTRUCTIONDUPLICATEDIssueEnum = {
  VaultInstructionDuplicated: 'VAULT_INSTRUCTION_DUPLICATED',
} as const;

export type VAULTINSTRUCTIONDUPLICATEDIssueEnum =
  (typeof VAULTINSTRUCTIONDUPLICATEDIssueEnum)[keyof typeof VAULTINSTRUCTIONDUPLICATEDIssueEnum];
export const VAULTINSTRUCTIONDUPLICATEDDescriptionEnum = {
  OnlyOneVaultInstructionIsAllowedPleaseUseVaultStoreInVaultToProvideVaultInstruction:
    'Only one vault instruction is allowed. Please use `vault.store_in_vault` to provide vault instruction.',
} as const;

export type VAULTINSTRUCTIONDUPLICATEDDescriptionEnum =
  (typeof VAULTINSTRUCTIONDUPLICATEDDescriptionEnum)[keyof typeof VAULTINSTRUCTIONDUPLICATEDDescriptionEnum];

/**
 *
 * @export
 * @interface VAULTINSTRUCTIONREQUIRED
 */
export interface VAULTINSTRUCTIONREQUIRED {
  /**
   *
   * @type {string}
   * @memberof VAULTINSTRUCTIONREQUIRED
   */
  issue?: VAULTINSTRUCTIONREQUIREDIssueEnum;
  /**
   *
   * @type {string}
   * @memberof VAULTINSTRUCTIONREQUIRED
   */
  description?: VAULTINSTRUCTIONREQUIREDDescriptionEnum;
}

export const VAULTINSTRUCTIONREQUIREDIssueEnum = {
  VaultInstructionRequired: 'VAULT_INSTRUCTION_REQUIRED',
} as const;

export type VAULTINSTRUCTIONREQUIREDIssueEnum =
  (typeof VAULTINSTRUCTIONREQUIREDIssueEnum)[keyof typeof VAULTINSTRUCTIONREQUIREDIssueEnum];
export const VAULTINSTRUCTIONREQUIREDDescriptionEnum = {
  VaultInstructionIsRequiredPleaseUseVaultStoreInVaultToProvideVaultInstruction:
    'Vault instruction is required. Please use `vault.store_in_vault` to provide vault instruction.',
} as const;

export type VAULTINSTRUCTIONREQUIREDDescriptionEnum =
  (typeof VAULTINSTRUCTIONREQUIREDDescriptionEnum)[keyof typeof VAULTINSTRUCTIONREQUIREDDescriptionEnum];

/**
 * Basic vault instruction specification that can be extended by specific payment sources that supports vaulting.
 * @export
 * @interface VaultInstructionBase
 */
export interface VaultInstructionBase {
  /**
   *
   * @type {StoreInVaultInstruction}
   * @memberof VaultInstructionBase
   */
  store_in_vault?: StoreInVaultInstruction;
}

/**
 * Resource consolidating common request and response attributes for vaulting PayPal Wallet.
 * @export
 * @interface VaultPaypalWalletBase
 */
export interface VaultPaypalWalletBase {
  /**
   *
   * @type {StoreInVaultInstruction}
   * @memberof VaultPaypalWalletBase
   */
  store_in_vault?: StoreInVaultInstruction;
  /**
   * The description displayed to PayPal consumer on the approval flow for PayPal, as well as on the PayPal payment token management experience on PayPal.com.
   * @type {string}
   * @memberof VaultPaypalWalletBase
   */
  description?: string;
  /**
   * Expected business/pricing model for the billing agreement.
   * @type {string}
   * @memberof VaultPaypalWalletBase
   */
  usage_pattern?: VaultPaypalWalletBaseUsagePatternEnum;
  /**
   *
   * @type {ShippingDetail}
   * @memberof VaultPaypalWalletBase
   */
  shipping?: ShippingDetail;
  /**
   * The usage type associated with the PayPal payment token.
   * @type {string}
   * @memberof VaultPaypalWalletBase
   */
  usage_type: VaultPaypalWalletBaseUsageTypeEnum;
  /**
   *
   * @type {any}
   * @memberof VaultPaypalWalletBase
   */
  owner_id?: any;
  /**
   * The customer type associated with the PayPal payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.
   * @type {string}
   * @memberof VaultPaypalWalletBase
   */
  customer_type?: VaultPaypalWalletBaseCustomerTypeEnum;
  /**
   * Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.
   * @type {boolean}
   * @memberof VaultPaypalWalletBase
   */
  permit_multiple_payment_tokens?: boolean;
}

export const VaultPaypalWalletBaseUsagePatternEnum = {
  Immediate: 'IMMEDIATE',
  Deferred: 'DEFERRED',
  RecurringPrepaid: 'RECURRING_PREPAID',
  RecurringPostpaid: 'RECURRING_POSTPAID',
  ThresholdPrepaid: 'THRESHOLD_PREPAID',
  ThresholdPostpaid: 'THRESHOLD_POSTPAID',
} as const;

export type VaultPaypalWalletBaseUsagePatternEnum =
  (typeof VaultPaypalWalletBaseUsagePatternEnum)[keyof typeof VaultPaypalWalletBaseUsagePatternEnum];
export const VaultPaypalWalletBaseUsageTypeEnum = {
  Merchant: 'MERCHANT',
  Platform: 'PLATFORM',
} as const;

export type VaultPaypalWalletBaseUsageTypeEnum =
  (typeof VaultPaypalWalletBaseUsageTypeEnum)[keyof typeof VaultPaypalWalletBaseUsageTypeEnum];
export const VaultPaypalWalletBaseCustomerTypeEnum = {
  Consumer: 'CONSUMER',
  Business: 'BUSINESS',
} as const;

export type VaultPaypalWalletBaseCustomerTypeEnum =
  (typeof VaultPaypalWalletBaseCustomerTypeEnum)[keyof typeof VaultPaypalWalletBaseCustomerTypeEnum];

/**
 *
 * @export
 * @interface VaultPaypalWalletBaseAllOf
 */
export interface VaultPaypalWalletBaseAllOf {
  /**
   * The description displayed to PayPal consumer on the approval flow for PayPal, as well as on the PayPal payment token management experience on PayPal.com.
   * @type {string}
   * @memberof VaultPaypalWalletBaseAllOf
   */
  description?: string;
  /**
   * Expected business/pricing model for the billing agreement.
   * @type {string}
   * @memberof VaultPaypalWalletBaseAllOf
   */
  usage_pattern?: VaultPaypalWalletBaseAllOfUsagePatternEnum;
  /**
   *
   * @type {ShippingDetail}
   * @memberof VaultPaypalWalletBaseAllOf
   */
  shipping?: ShippingDetail;
  /**
   * The usage type associated with the PayPal payment token.
   * @type {string}
   * @memberof VaultPaypalWalletBaseAllOf
   */
  usage_type?: VaultPaypalWalletBaseAllOfUsageTypeEnum;
  /**
   *
   * @type {any}
   * @memberof VaultPaypalWalletBaseAllOf
   */
  owner_id?: any;
  /**
   * The customer type associated with the PayPal payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.
   * @type {string}
   * @memberof VaultPaypalWalletBaseAllOf
   */
  customer_type?: VaultPaypalWalletBaseAllOfCustomerTypeEnum;
  /**
   * Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.
   * @type {boolean}
   * @memberof VaultPaypalWalletBaseAllOf
   */
  permit_multiple_payment_tokens?: boolean;
}

export const VaultPaypalWalletBaseAllOfUsagePatternEnum = {
  Immediate: 'IMMEDIATE',
  Deferred: 'DEFERRED',
  RecurringPrepaid: 'RECURRING_PREPAID',
  RecurringPostpaid: 'RECURRING_POSTPAID',
  ThresholdPrepaid: 'THRESHOLD_PREPAID',
  ThresholdPostpaid: 'THRESHOLD_POSTPAID',
} as const;

export type VaultPaypalWalletBaseAllOfUsagePatternEnum =
  (typeof VaultPaypalWalletBaseAllOfUsagePatternEnum)[keyof typeof VaultPaypalWalletBaseAllOfUsagePatternEnum];
export const VaultPaypalWalletBaseAllOfUsageTypeEnum = {
  Merchant: 'MERCHANT',
  Platform: 'PLATFORM',
} as const;

export type VaultPaypalWalletBaseAllOfUsageTypeEnum =
  (typeof VaultPaypalWalletBaseAllOfUsageTypeEnum)[keyof typeof VaultPaypalWalletBaseAllOfUsageTypeEnum];
export const VaultPaypalWalletBaseAllOfCustomerTypeEnum = {
  Consumer: 'CONSUMER',
  Business: 'BUSINESS',
} as const;

export type VaultPaypalWalletBaseAllOfCustomerTypeEnum =
  (typeof VaultPaypalWalletBaseAllOfCustomerTypeEnum)[keyof typeof VaultPaypalWalletBaseAllOfCustomerTypeEnum];

/**
 * The details about a saved payment source.
 * @export
 * @interface VaultResponse
 */
export interface VaultResponse {
  /**
   * The PayPal-generated ID for the saved payment source.
   * @type {string}
   * @memberof VaultResponse
   */
  id?: string;
  /**
   * The vault status.
   * @type {string}
   * @memberof VaultResponse
   * @deprecated
   */
  status?: VaultResponseStatusEnum;
  /**
   *
   * @type {Customer}
   * @memberof VaultResponse
   */
  customer?: Customer;
  /**
   * An array of request-related HATEOAS links.
   * @type {Array<LinkDescription>}
   * @memberof VaultResponse
   */
  links?: Array<LinkDescription>;
}

export const VaultResponseStatusEnum = {
  Vaulted: 'VAULTED',
  Created: 'CREATED',
  Approved: 'APPROVED',
} as const;

export type VaultResponseStatusEnum =
  (typeof VaultResponseStatusEnum)[keyof typeof VaultResponseStatusEnum];

/**
 * Resource consolidating common request and response attirbutes for vaulting Venmo Wallet.
 * @export
 * @interface VaultVenmoWalletBase
 */
export interface VaultVenmoWalletBase {
  /**
   *
   * @type {StoreInVaultInstruction}
   * @memberof VaultVenmoWalletBase
   */
  store_in_vault: StoreInVaultInstruction;
  /**
   * The description displayed to Venmo consumer on the approval flow for Venmo, as well as on the Venmo payment token management experience on Venmo.com.
   * @type {string}
   * @memberof VaultVenmoWalletBase
   */
  description?: string;
  /**
   * Expected business/pricing model for the billing agreement.
   * @type {string}
   * @memberof VaultVenmoWalletBase
   */
  usage_pattern?: VaultVenmoWalletBaseUsagePatternEnum;
  /**
   * The usage type associated with the Venmo payment token.
   * @type {string}
   * @memberof VaultVenmoWalletBase
   */
  usage_type: VaultVenmoWalletBaseUsageTypeEnum;
  /**
   * The customer type associated with the Venmo payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.
   * @type {string}
   * @memberof VaultVenmoWalletBase
   */
  customer_type?: VaultVenmoWalletBaseCustomerTypeEnum;
  /**
   * Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same Venmo account.
   * @type {boolean}
   * @memberof VaultVenmoWalletBase
   */
  permit_multiple_payment_tokens?: boolean;
}

export const VaultVenmoWalletBaseUsagePatternEnum = {
  Immediate: 'IMMEDIATE',
  Deferred: 'DEFERRED',
  RecurringPrepaid: 'RECURRING_PREPAID',
  RecurringPostpaid: 'RECURRING_POSTPAID',
  ThresholdPrepaid: 'THRESHOLD_PREPAID',
  ThresholdPostpaid: 'THRESHOLD_POSTPAID',
} as const;

export type VaultVenmoWalletBaseUsagePatternEnum =
  (typeof VaultVenmoWalletBaseUsagePatternEnum)[keyof typeof VaultVenmoWalletBaseUsagePatternEnum];
export const VaultVenmoWalletBaseUsageTypeEnum = {
  Merchant: 'MERCHANT',
  Platform: 'PLATFORM',
} as const;

export type VaultVenmoWalletBaseUsageTypeEnum =
  (typeof VaultVenmoWalletBaseUsageTypeEnum)[keyof typeof VaultVenmoWalletBaseUsageTypeEnum];
export const VaultVenmoWalletBaseCustomerTypeEnum = {
  Consumer: 'CONSUMER',
  Business: 'BUSINESS',
} as const;

export type VaultVenmoWalletBaseCustomerTypeEnum =
  (typeof VaultVenmoWalletBaseCustomerTypeEnum)[keyof typeof VaultVenmoWalletBaseCustomerTypeEnum];

/**
 *
 * @export
 * @interface VaultVenmoWalletBaseAllOf
 */
export interface VaultVenmoWalletBaseAllOf {
  /**
   * The description displayed to Venmo consumer on the approval flow for Venmo, as well as on the Venmo payment token management experience on Venmo.com.
   * @type {string}
   * @memberof VaultVenmoWalletBaseAllOf
   */
  description?: string;
  /**
   * Expected business/pricing model for the billing agreement.
   * @type {string}
   * @memberof VaultVenmoWalletBaseAllOf
   */
  usage_pattern?: VaultVenmoWalletBaseAllOfUsagePatternEnum;
  /**
   * The usage type associated with the Venmo payment token.
   * @type {string}
   * @memberof VaultVenmoWalletBaseAllOf
   */
  usage_type?: VaultVenmoWalletBaseAllOfUsageTypeEnum;
  /**
   * The customer type associated with the Venmo payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.
   * @type {string}
   * @memberof VaultVenmoWalletBaseAllOf
   */
  customer_type?: VaultVenmoWalletBaseAllOfCustomerTypeEnum;
  /**
   * Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same Venmo account.
   * @type {boolean}
   * @memberof VaultVenmoWalletBaseAllOf
   */
  permit_multiple_payment_tokens?: boolean;
}

export const VaultVenmoWalletBaseAllOfUsagePatternEnum = {
  Immediate: 'IMMEDIATE',
  Deferred: 'DEFERRED',
  RecurringPrepaid: 'RECURRING_PREPAID',
  RecurringPostpaid: 'RECURRING_POSTPAID',
  ThresholdPrepaid: 'THRESHOLD_PREPAID',
  ThresholdPostpaid: 'THRESHOLD_POSTPAID',
} as const;

export type VaultVenmoWalletBaseAllOfUsagePatternEnum =
  (typeof VaultVenmoWalletBaseAllOfUsagePatternEnum)[keyof typeof VaultVenmoWalletBaseAllOfUsagePatternEnum];
export const VaultVenmoWalletBaseAllOfUsageTypeEnum = {
  Merchant: 'MERCHANT',
  Platform: 'PLATFORM',
} as const;

export type VaultVenmoWalletBaseAllOfUsageTypeEnum =
  (typeof VaultVenmoWalletBaseAllOfUsageTypeEnum)[keyof typeof VaultVenmoWalletBaseAllOfUsageTypeEnum];
export const VaultVenmoWalletBaseAllOfCustomerTypeEnum = {
  Consumer: 'CONSUMER',
  Business: 'BUSINESS',
} as const;

export type VaultVenmoWalletBaseAllOfCustomerTypeEnum =
  (typeof VaultVenmoWalletBaseAllOfCustomerTypeEnum)[keyof typeof VaultVenmoWalletBaseAllOfCustomerTypeEnum];

/**
 * Additional attributes associated with the use of this Venmo Wallet.
 * @export
 * @interface VenmoWalletAttributes
 */
export interface VenmoWalletAttributes {
  /**
   *
   * @type {Customer}
   * @memberof VenmoWalletAttributes
   */
  customer?: Customer;
  /**
   *
   * @type {VaultVenmoWalletBase}
   * @memberof VenmoWalletAttributes
   */
  vault?: VaultVenmoWalletBase;
}
/**
 * Additional attributes associated with the use of a Venmo Wallet.
 * @export
 * @interface VenmoWalletAttributesResponse
 */
export interface VenmoWalletAttributesResponse {
  /**
   *
   * @type {VaultResponse}
   * @memberof VenmoWalletAttributesResponse
   */
  vault?: VaultResponse;
}
/**
 * Customizes the buyer experience during the approval process for payment with Venmo.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>
 * @export
 * @interface VenmoWalletExperienceContext
 */
export interface VenmoWalletExperienceContext {
  /**
   * The business name of the merchant. The pattern is defined by an external party and supports Unicode.
   * @type {string}
   * @memberof VenmoWalletExperienceContext
   */
  brand_name?: string;
  /**
   * The location from which the shipping address is derived.
   * @type {string}
   * @memberof VenmoWalletExperienceContext
   */
  shipping_preference?: VenmoWalletExperienceContextShippingPreferenceEnum;
}

export const VenmoWalletExperienceContextShippingPreferenceEnum = {
  GetFromFile: 'GET_FROM_FILE',
  NoShipping: 'NO_SHIPPING',
  SetProvidedAddress: 'SET_PROVIDED_ADDRESS',
} as const;

export type VenmoWalletExperienceContextShippingPreferenceEnum =
  (typeof VenmoWalletExperienceContextShippingPreferenceEnum)[keyof typeof VenmoWalletExperienceContextShippingPreferenceEnum];

/**
 * Information needed to pay using Venmo.
 * @export
 * @interface VenmoWalletRequest
 */
export interface VenmoWalletRequest {
  /**
   * The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant\'s server so the saved payment source can be used for future transactions.
   * @type {string}
   * @memberof VenmoWalletRequest
   */
  vault_id?: string;
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof VenmoWalletRequest
   */
  email_address?: string;
  /**
   *
   * @type {VenmoWalletExperienceContext}
   * @memberof VenmoWalletRequest
   */
  experience_context?: VenmoWalletExperienceContext;
  /**
   *
   * @type {VenmoWalletAttributes}
   * @memberof VenmoWalletRequest
   */
  attributes?: VenmoWalletAttributes;
}
/**
 * Venmo wallet response.
 * @export
 * @interface VenmoWalletResponse
 */
export interface VenmoWalletResponse {
  /**
   * The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
   * @type {string}
   * @memberof VenmoWalletResponse
   */
  email_address?: string;
  /**
   * The PayPal payer ID, which is a masked version of the PayPal account number intended for use with third parties. The account number is reversibly encrypted and a proprietary variant of Base32 is used to encode the result.
   * @type {string}
   * @memberof VenmoWalletResponse
   */
  account_id?: string;
  /**
   * The Venmo user name chosen by the user, also know as a Venmo handle.
   * @type {string}
   * @memberof VenmoWalletResponse
   */
  user_name?: string;
  /**
   *
   * @type {Name2}
   * @memberof VenmoWalletResponse
   */
  name?: Name2;
  /**
   *
   * @type {Phone2}
   * @memberof VenmoWalletResponse
   */
  phone_number?: Phone2;
  /**
   *
   * @type {AddressPortable2}
   * @memberof VenmoWalletResponse
   */
  address?: AddressPortable2;
  /**
   *
   * @type {VenmoWalletAttributesResponse}
   * @memberof VenmoWalletResponse
   */
  attributes?: VenmoWalletAttributesResponse;
}

/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
     * @summary Authorize payment for order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [payPalClientMetadataId]
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {OrderAuthorizeRequest} [orderAuthorizeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersAuthorize: async (
      id: string,
      payPalRequestId?: string,
      prefer?: string,
      payPalClientMetadataId?: string,
      payPalAuthAssertion?: string,
      orderAuthorizeRequest?: OrderAuthorizeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('ordersAuthorize', 'id', id);
      const localVarPath = `/v2/checkout/orders/{id}/authorize`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        [
          'https://uri.paypal.com/services/payments/payment',
          'https://uri.paypal.com/services/payments/orders/client-side-integration',
        ],
        configuration
      );

      if (payPalRequestId != null) {
        localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
      }

      if (prefer != null) {
        localVarHeaderParameter['Prefer'] = String(prefer);
      }

      if (payPalClientMetadataId != null) {
        localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(
          payPalClientMetadataId
        );
      }

      if (payPalAuthAssertion != null) {
        localVarHeaderParameter['PayPal-Auth-Assertion'] =
          String(payPalAuthAssertion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        orderAuthorizeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
     * @summary Capture payment for order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [payPalClientMetadataId]
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {OrderCaptureRequest} [orderCaptureRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCapture: async (
      id: string,
      payPalRequestId?: string,
      prefer?: string,
      payPalClientMetadataId?: string,
      payPalAuthAssertion?: string,
      orderCaptureRequest?: OrderCaptureRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('ordersCapture', 'id', id);
      const localVarPath = `/v2/checkout/orders/{id}/capture`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        [
          'https://uri.paypal.com/services/payments/payment',
          'https://uri.paypal.com/services/payments/orders/client-side-integration',
        ],
        configuration
      );

      if (payPalRequestId != null) {
        localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
      }

      if (prefer != null) {
        localVarHeaderParameter['Prefer'] = String(prefer);
      }

      if (payPalClientMetadataId != null) {
        localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(
          payPalClientMetadataId
        );
      }

      if (payPalAuthAssertion != null) {
        localVarHeaderParameter['PayPal-Auth-Assertion'] =
          String(payPalAuthAssertion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        orderCaptureRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Payer confirms their intent to pay for the the Order with the given payment source.
     * @summary Confirm the Order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalClientMetadataId]
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {ConfirmOrderRequest} [confirmOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersConfirm: async (
      id: string,
      payPalClientMetadataId?: string,
      prefer?: string,
      confirmOrderRequest?: ConfirmOrderRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('ordersConfirm', 'id', id);
      const localVarPath =
        `/v2/checkout/orders/{id}/confirm-payment-source`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        [
          'https://uri.paypal.com/services/payments/payment',
          'https://uri.paypal.com/services/payments/initiatepayment',
        ],
        configuration
      );

      if (payPalClientMetadataId != null) {
        localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(
          payPalClientMetadataId
        );
      }

      if (prefer != null) {
        localVarHeaderParameter['Prefer'] = String(prefer);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        confirmOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
     * @summary Create order
     * @param {OrderRequest} orderRequest
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [payPalPartnerAttributionId]
     * @param {string} [payPalClientMetadataId]
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreate: async (
      orderRequest: OrderRequest,
      payPalRequestId?: string,
      payPalPartnerAttributionId?: string,
      payPalClientMetadataId?: string,
      prefer?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderRequest' is not null or undefined
      assertParamExists('ordersCreate', 'orderRequest', orderRequest);
      const localVarPath = `/v2/checkout/orders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        [
          'https://uri.paypal.com/services/payments/payment',
          'https://uri.paypal.com/services/payments/orders/client-side-integration',
        ],
        configuration
      );

      if (payPalRequestId != null) {
        localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
      }

      if (payPalPartnerAttributionId != null) {
        localVarHeaderParameter['PayPal-Partner-Attribution-Id'] = String(
          payPalPartnerAttributionId
        );
      }

      if (payPalClientMetadataId != null) {
        localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(
          payPalClientMetadataId
        );
      }

      if (prefer != null) {
        localVarHeaderParameter['Prefer'] = String(prefer);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        orderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
     * @summary Show order details
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [fields] A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGet: async (
      id: string,
      fields?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('ordersGet', 'id', id);
      const localVarPath = `/v2/checkout/orders/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        [
          'https://uri.paypal.com/services/payments/payment',
          'https://uri.paypal.com/services/payments/orders/client-side-integration',
        ],
        configuration
      );

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
     * @summary Update order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {Array<Patch>} [patch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersPatch: async (
      id: string,
      patch?: Array<Patch>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('ordersPatch', 'id', id);
      const localVarPath = `/v2/checkout/orders/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        [
          'https://uri.paypal.com/services/payments/payment',
          'https://uri.paypal.com/services/payments/orders/client-side-integration',
        ],
        configuration
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patch,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Adds tracking information for an Order.
     * @summary Add tracking information for an Order.
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {OrderTrackerRequest} orderTrackerRequest
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersTrackCreate: async (
      id: string,
      orderTrackerRequest: OrderTrackerRequest,
      payPalAuthAssertion?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('ordersTrackCreate', 'id', id);
      // verify required parameter 'orderTrackerRequest' is not null or undefined
      assertParamExists(
        'ordersTrackCreate',
        'orderTrackerRequest',
        orderTrackerRequest
      );
      const localVarPath = `/v2/checkout/orders/{id}/track`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        ['https://uri.paypal.com/services/payments/payment'],
        configuration
      );

      if (payPalAuthAssertion != null) {
        localVarHeaderParameter['PayPal-Auth-Assertion'] =
          String(payPalAuthAssertion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        orderTrackerRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);
  return {
    /**
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
     * @summary Authorize payment for order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [payPalClientMetadataId]
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {OrderAuthorizeRequest} [orderAuthorizeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersAuthorize(
      id: string,
      payPalRequestId?: string,
      prefer?: string,
      payPalClientMetadataId?: string,
      payPalAuthAssertion?: string,
      orderAuthorizeRequest?: OrderAuthorizeRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OrderAuthorizeResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAuthorize(
        id,
        payPalRequestId,
        prefer,
        payPalClientMetadataId,
        payPalAuthAssertion,
        orderAuthorizeRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
     * @summary Capture payment for order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [payPalClientMetadataId]
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {OrderCaptureRequest} [orderCaptureRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersCapture(
      id: string,
      payPalRequestId?: string,
      prefer?: string,
      payPalClientMetadataId?: string,
      payPalAuthAssertion?: string,
      orderCaptureRequest?: OrderCaptureRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCapture(
        id,
        payPalRequestId,
        prefer,
        payPalClientMetadataId,
        payPalAuthAssertion,
        orderCaptureRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Payer confirms their intent to pay for the the Order with the given payment source.
     * @summary Confirm the Order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalClientMetadataId]
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {ConfirmOrderRequest} [confirmOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersConfirm(
      id: string,
      payPalClientMetadataId?: string,
      prefer?: string,
      confirmOrderRequest?: ConfirmOrderRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ordersConfirm(
        id,
        payPalClientMetadataId,
        prefer,
        confirmOrderRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
     * @summary Create order
     * @param {OrderRequest} orderRequest
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [payPalPartnerAttributionId]
     * @param {string} [payPalClientMetadataId]
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersCreate(
      orderRequest: OrderRequest,
      payPalRequestId?: string,
      payPalPartnerAttributionId?: string,
      payPalClientMetadataId?: string,
      prefer?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ordersCreate(
        orderRequest,
        payPalRequestId,
        payPalPartnerAttributionId,
        payPalClientMetadataId,
        prefer,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
     * @summary Show order details
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [fields] A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersGet(
      id: string,
      fields?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ordersGet(
        id,
        fields,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
     * @summary Update order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {Array<Patch>} [patch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersPatch(
      id: string,
      patch?: Array<Patch>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ordersPatch(
        id,
        patch,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Adds tracking information for an Order.
     * @summary Add tracking information for an Order.
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {OrderTrackerRequest} orderTrackerRequest
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersTrackCreate(
      id: string,
      orderTrackerRequest: OrderTrackerRequest,
      payPalAuthAssertion?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.ordersTrackCreate(
          id,
          orderTrackerRequest,
          payPalAuthAssertion,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OrdersApiFp(configuration);
  return {
    /**
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
     * @summary Authorize payment for order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [payPalClientMetadataId]
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {OrderAuthorizeRequest} [orderAuthorizeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersAuthorize(
      id: string,
      payPalRequestId?: string,
      prefer?: string,
      payPalClientMetadataId?: string,
      payPalAuthAssertion?: string,
      orderAuthorizeRequest?: OrderAuthorizeRequest,
      options?: any
    ): AxiosPromise<OrderAuthorizeResponse> {
      return localVarFp
        .ordersAuthorize(
          id,
          payPalRequestId,
          prefer,
          payPalClientMetadataId,
          payPalAuthAssertion,
          orderAuthorizeRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
     * @summary Capture payment for order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [payPalClientMetadataId]
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {OrderCaptureRequest} [orderCaptureRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCapture(
      id: string,
      payPalRequestId?: string,
      prefer?: string,
      payPalClientMetadataId?: string,
      payPalAuthAssertion?: string,
      orderCaptureRequest?: OrderCaptureRequest,
      options?: any
    ): AxiosPromise<Order> {
      return localVarFp
        .ordersCapture(
          id,
          payPalRequestId,
          prefer,
          payPalClientMetadataId,
          payPalAuthAssertion,
          orderCaptureRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Payer confirms their intent to pay for the the Order with the given payment source.
     * @summary Confirm the Order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [payPalClientMetadataId]
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {ConfirmOrderRequest} [confirmOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersConfirm(
      id: string,
      payPalClientMetadataId?: string,
      prefer?: string,
      confirmOrderRequest?: ConfirmOrderRequest,
      options?: any
    ): AxiosPromise<Order> {
      return localVarFp
        .ordersConfirm(
          id,
          payPalClientMetadataId,
          prefer,
          confirmOrderRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
     * @summary Create order
     * @param {OrderRequest} orderRequest
     * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param {string} [payPalPartnerAttributionId]
     * @param {string} [payPalClientMetadataId]
     * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersCreate(
      orderRequest: OrderRequest,
      payPalRequestId?: string,
      payPalPartnerAttributionId?: string,
      payPalClientMetadataId?: string,
      prefer?: string,
      options?: any
    ): AxiosPromise<Order> {
      return localVarFp
        .ordersCreate(
          orderRequest,
          payPalRequestId,
          payPalPartnerAttributionId,
          payPalClientMetadataId,
          prefer,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
     * @summary Show order details
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} [fields] A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersGet(id: string, fields?: string, options?: any): AxiosPromise<Order> {
      return localVarFp
        .ordersGet(id, fields, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
     * @summary Update order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {Array<Patch>} [patch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersPatch(
      id: string,
      patch?: Array<Patch>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .ordersPatch(id, patch, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Adds tracking information for an Order.
     * @summary Add tracking information for an Order.
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {OrderTrackerRequest} orderTrackerRequest
     * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersTrackCreate(
      id: string,
      orderTrackerRequest: OrderTrackerRequest,
      payPalAuthAssertion?: string,
      options?: any
    ): AxiosPromise<Order> {
      return localVarFp
        .ordersTrackCreate(
          id,
          orderTrackerRequest,
          payPalAuthAssertion,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
  /**
   * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
   * @summary Authorize payment for order
   * @param {string} id The ID of the order that the tracking information is associated with.
   * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
   * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
   * @param {string} [payPalClientMetadataId]
   * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
   * @param {OrderAuthorizeRequest} [orderAuthorizeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrdersApi
   */
  public ordersAuthorize(
    id: string,
    payPalRequestId?: string,
    prefer?: string,
    payPalClientMetadataId?: string,
    payPalAuthAssertion?: string,
    orderAuthorizeRequest?: OrderAuthorizeRequest,
    options?: AxiosRequestConfig
  ) {
    return OrdersApiFp(this.configuration)
      .ordersAuthorize(
        id,
        payPalRequestId,
        prefer,
        payPalClientMetadataId,
        payPalAuthAssertion,
        orderAuthorizeRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
   * @summary Capture payment for order
   * @param {string} id The ID of the order that the tracking information is associated with.
   * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
   * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
   * @param {string} [payPalClientMetadataId]
   * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
   * @param {OrderCaptureRequest} [orderCaptureRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrdersApi
   */
  public ordersCapture(
    id: string,
    payPalRequestId?: string,
    prefer?: string,
    payPalClientMetadataId?: string,
    payPalAuthAssertion?: string,
    orderCaptureRequest?: OrderCaptureRequest,
    options?: AxiosRequestConfig
  ) {
    return OrdersApiFp(this.configuration)
      .ordersCapture(
        id,
        payPalRequestId,
        prefer,
        payPalClientMetadataId,
        payPalAuthAssertion,
        orderCaptureRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Payer confirms their intent to pay for the the Order with the given payment source.
   * @summary Confirm the Order
   * @param {string} id The ID of the order that the tracking information is associated with.
   * @param {string} [payPalClientMetadataId]
   * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
   * @param {ConfirmOrderRequest} [confirmOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrdersApi
   */
  public ordersConfirm(
    id: string,
    payPalClientMetadataId?: string,
    prefer?: string,
    confirmOrderRequest?: ConfirmOrderRequest,
    options?: AxiosRequestConfig
  ) {
    return OrdersApiFp(this.configuration)
      .ordersConfirm(
        id,
        payPalClientMetadataId,
        prefer,
        confirmOrderRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
   * @summary Create order
   * @param {OrderRequest} orderRequest
   * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
   * @param {string} [payPalPartnerAttributionId]
   * @param {string} [payPalClientMetadataId]
   * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrdersApi
   */
  public ordersCreate(
    orderRequest: OrderRequest,
    payPalRequestId?: string,
    payPalPartnerAttributionId?: string,
    payPalClientMetadataId?: string,
    prefer?: string,
    options?: AxiosRequestConfig
  ) {
    return OrdersApiFp(this.configuration)
      .ordersCreate(
        orderRequest,
        payPalRequestId,
        payPalPartnerAttributionId,
        payPalClientMetadataId,
        prefer,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
   * @summary Show order details
   * @param {string} id The ID of the order that the tracking information is associated with.
   * @param {string} [fields] A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrdersApi
   */
  public ordersGet(id: string, fields?: string, options?: AxiosRequestConfig) {
    return OrdersApiFp(this.configuration)
      .ordersGet(id, fields, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
   * @summary Update order
   * @param {string} id The ID of the order that the tracking information is associated with.
   * @param {Array<Patch>} [patch]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrdersApi
   */
  public ordersPatch(
    id: string,
    patch?: Array<Patch>,
    options?: AxiosRequestConfig
  ) {
    return OrdersApiFp(this.configuration)
      .ordersPatch(id, patch, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Adds tracking information for an Order.
   * @summary Add tracking information for an Order.
   * @param {string} id The ID of the order that the tracking information is associated with.
   * @param {OrderTrackerRequest} orderTrackerRequest
   * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrdersApi
   */
  public ordersTrackCreate(
    id: string,
    orderTrackerRequest: OrderTrackerRequest,
    payPalAuthAssertion?: string,
    options?: AxiosRequestConfig
  ) {
    return OrdersApiFp(this.configuration)
      .ordersTrackCreate(id, orderTrackerRequest, payPalAuthAssertion, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TrackersApi - axios parameter creator
 * @export
 */
export const TrackersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
     * @summary Update or cancel tracking information for a PayPal order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} trackerId The order tracking ID.
     * @param {Array<Patch>} [patch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersTrackersPatch: async (
      id: string,
      trackerId: string,
      patch?: Array<Patch>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('ordersTrackersPatch', 'id', id);
      // verify required parameter 'trackerId' is not null or undefined
      assertParamExists('ordersTrackersPatch', 'trackerId', trackerId);
      const localVarPath = `/v2/checkout/orders/{id}/trackers/{tracker_id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'tracker_id'}}`, encodeURIComponent(String(trackerId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'Oauth2',
        ['https://uri.paypal.com/services/payments/payment'],
        configuration
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patch,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TrackersApi - functional programming interface
 * @export
 */
export const TrackersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TrackersApiAxiosParamCreator(configuration);
  return {
    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
     * @summary Update or cancel tracking information for a PayPal order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} trackerId The order tracking ID.
     * @param {Array<Patch>} [patch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ordersTrackersPatch(
      id: string,
      trackerId: string,
      patch?: Array<Patch>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.ordersTrackersPatch(
          id,
          trackerId,
          patch,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * TrackersApi - factory interface
 * @export
 */
export const TrackersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TrackersApiFp(configuration);
  return {
    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
     * @summary Update or cancel tracking information for a PayPal order
     * @param {string} id The ID of the order that the tracking information is associated with.
     * @param {string} trackerId The order tracking ID.
     * @param {Array<Patch>} [patch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ordersTrackersPatch(
      id: string,
      trackerId: string,
      patch?: Array<Patch>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .ordersTrackersPatch(id, trackerId, patch, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TrackersApi - object-oriented interface
 * @export
 * @class TrackersApi
 * @extends {BaseAPI}
 */
export class TrackersApi extends BaseAPI {
  /**
   * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
   * @summary Update or cancel tracking information for a PayPal order
   * @param {string} id The ID of the order that the tracking information is associated with.
   * @param {string} trackerId The order tracking ID.
   * @param {Array<Patch>} [patch]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TrackersApi
   */
  public ordersTrackersPatch(
    id: string,
    trackerId: string,
    patch?: Array<Patch>,
    options?: AxiosRequestConfig
  ) {
    return TrackersApiFp(this.configuration)
      .ordersTrackersPatch(id, trackerId, patch, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
