import http from 'http';
import localVarRequest from 'request';

/* tslint:disable:no-unused-locals */
import { Refund } from '../model-payments-payment/refund';

import {
  Authentication,
  Interceptor,
  OAuth,
  ObjectSerializer,
  VoidAuth,
} from '../model-payments-payment/models';

import { HttpError } from './apis';

let defaultBasePath = 'https://api-m.sandbox.paypal.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum RefundsApiApiKeys {}

export class RefundsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    Oauth2: new OAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: RefundsApiApiKeys, value: string) {
    (this.authentications as any)[RefundsApiApiKeys[key]].apiKey = value;
  }

  set accessToken(token: string) {
    this.authentications.Oauth2.accessToken = token;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * Shows details for a refund, by ID.
   * @summary Show refund details
   * @param refundId The PayPal-generated ID for the refund for which to show details.
   * @param contentType The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;.
   */
  public async refundsGet(
    refundId: string,
    contentType: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Refund }> {
    const localVarPath =
      this.basePath +
      '/v2/payments/refunds/{refund_id}'.replace(
        '{' + 'refund_id' + '}',
        encodeURIComponent(String(refundId))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'refundId' is not null or undefined
    if (refundId === null || refundId === undefined) {
      throw new Error(
        'Required parameter refundId was null or undefined when calling refundsGet.'
      );
    }

    // verify required parameter 'contentType' is not null or undefined
    if (contentType === null || contentType === undefined) {
      throw new Error(
        'Required parameter contentType was null or undefined when calling refundsGet.'
      );
    }

    localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(
      contentType,
      'string'
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Oauth2.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Oauth2.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Refund }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, 'Refund');
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
