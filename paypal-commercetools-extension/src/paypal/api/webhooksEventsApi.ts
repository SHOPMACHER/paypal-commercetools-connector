/**
 * Webhooks Management
 * The PayPal REST APIs use <a href=\"/docs/api/notifications/webhooks/\"/>webhooks</a> for event notification. Webhooks are HTTP callbacks that receive notification messages for events. After you configure a webhook listener for your app, you can <a href=\"#webhooks_create\">create a webhook</a>, which subscribes the webhook listener for your app to events. The <code>notifications</code> namespace contains resource collections for webhooks.
 *
 * The version of the OpenAPI document: 1.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import http from 'http';
import localVarRequest from 'request';

/* tslint:disable:no-unused-locals */
import { Event } from '../model-notifications-webhooks/event';
import { EventList } from '../model-notifications-webhooks/eventList';
import { EventResend } from '../model-notifications-webhooks/eventResend';

import {
  Authentication,
  Interceptor,
  OAuth,
  ObjectSerializer,
  VoidAuth,
} from '../model-notifications-webhooks/models';

import { HttpError } from './apis';

let defaultBasePath = 'https://api-m.sandbox.paypal.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum WebhooksEventsApiApiKeys {}

export class WebhooksEventsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    Oauth2: new OAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: WebhooksEventsApiApiKeys, value: string) {
    (this.authentications as any)[WebhooksEventsApiApiKeys[key]].apiKey = value;
  }

  set accessToken(token: string) {
    this.authentications.Oauth2.accessToken = token;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * Shows details for a webhooks event notification, by ID.
   * @summary Show event notification details
   * @param eventId The ID of the webhook event notification to resend.
   */
  public async webhooksEventsGet(
    eventId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Event }> {
    const localVarPath =
      this.basePath +
      '/v1/notifications/webhooks-events/{event_id}'.replace(
        '{' + 'event_id' + '}',
        encodeURIComponent(String(eventId))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'eventId' is not null or undefined
    if (eventId === null || eventId === undefined) {
      throw new Error(
        'Required parameter eventId was null or undefined when calling webhooksEventsGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Oauth2.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Oauth2.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Event }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, 'Event');
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Lists webhooks event notifications. Use query parameters to filter the response.
   * @summary List event notifications
   * @param pageSize Limits the number of items in the response to the specified page size.
   * @param startTime Filters the errors in the response to those created on or after this date and time and on or before the &#x60;end_time&#x60; value. Both values are in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6) format. Example: &#x60;start_time&#x3D;2013-04-06T11:00:00Z&#x60;.
   * @param endTime Filters the errors in the response to those created on or after the &#x60;start_time&#x60; and on or before this date and time. Both values are in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Example: &#x60;end_time&#x3D;2013-04-06T11:00:00Z&#x60;.
   * @param transactionId Filters the response to a single transaction, by ID.
   * @param eventType Filters the response to a single event.
   */
  public async webhooksEventsList(
    pageSize?: number,
    startTime?: string,
    endTime?: string,
    transactionId?: string,
    eventType?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: EventList }> {
    const localVarPath = this.basePath + '/v1/notifications/webhooks-events';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    if (pageSize !== undefined) {
      localVarQueryParameters['page_size'] = ObjectSerializer.serialize(
        pageSize,
        'number'
      );
    }

    if (startTime !== undefined) {
      localVarQueryParameters['start_time'] = ObjectSerializer.serialize(
        startTime,
        'string'
      );
    }

    if (endTime !== undefined) {
      localVarQueryParameters['end_time'] = ObjectSerializer.serialize(
        endTime,
        'string'
      );
    }

    if (transactionId !== undefined) {
      localVarQueryParameters['transaction_id'] = ObjectSerializer.serialize(
        transactionId,
        'string'
      );
    }

    if (eventType !== undefined) {
      localVarQueryParameters['event_type'] = ObjectSerializer.serialize(
        eventType,
        'string'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Oauth2.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Oauth2.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: EventList }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, 'EventList');
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Resends a webhook event notification, by ID. Any pending notifications are not resent.
   * @summary Resend event notification
   * @param eventId The ID of the webhook event notification to resend.
   * @param eventResend
   */
  public async webhooksEventsResend(
    eventId: string,
    eventResend?: EventResend,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Event }> {
    const localVarPath =
      this.basePath +
      '/v1/notifications/webhooks-events/{event_id}/resend'.replace(
        '{' + 'event_id' + '}',
        encodeURIComponent(String(eventId))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'eventId' is not null or undefined
    if (eventId === null || eventId === undefined) {
      throw new Error(
        'Required parameter eventId was null or undefined when calling webhooksEventsResend.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(eventResend, 'EventResend'),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.Oauth2.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.Oauth2.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Event }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, 'Event');
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
