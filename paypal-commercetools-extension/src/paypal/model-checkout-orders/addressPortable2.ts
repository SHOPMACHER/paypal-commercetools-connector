/**
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AddressDetails1 } from './addressDetails1';

/**
 * The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
 */
export class AddressPortable2 {
  /**
   * The first line of the address, such as number and street, for example, `173 Drury Lane`. Needed for data entry, and Compliance and Risk checks. This field needs to pass the full address.
   */
  'addressLine1'?: string;
  /**
   * The second line of the address, for example, a suite or apartment number.
   */
  'addressLine2'?: string;
  /**
   * The third line of the address, if needed. Examples include a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.
   */
  'addressLine3'?: string;
  /**
   * The neighborhood, ward, or district. This is smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code that is used in Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>
   */
  'adminArea4'?: string;
  /**
   * The sub-locality, suburb, neighborhood, or district. This is smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, *bairro*, or neighborhood.</li><li>India. Sub-locality or district. Street name information isn\'t always available, but a sub-locality or district can be a very small area.</li></ul>
   */
  'adminArea3'?: string;
  /**
   * A city, town, or village. Smaller than `admin_area_level_1`.
   */
  'adminArea2'?: string;
  /**
   * The highest-level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. This data is formatted for postal delivery, for example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A *kanton*.</li></ul>
   */
  'adminArea1'?: string;
  /**
   * The postal code, which is the ZIP code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).
   */
  'postalCode'?: string;
  /**
   * The [2-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
   */
  'countryCode': string;
  'addressDetails'?: AddressDetails1;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'addressLine1',
      baseName: 'address_line_1',
      type: 'string',
    },
    {
      name: 'addressLine2',
      baseName: 'address_line_2',
      type: 'string',
    },
    {
      name: 'addressLine3',
      baseName: 'address_line_3',
      type: 'string',
    },
    {
      name: 'adminArea4',
      baseName: 'admin_area_4',
      type: 'string',
    },
    {
      name: 'adminArea3',
      baseName: 'admin_area_3',
      type: 'string',
    },
    {
      name: 'adminArea2',
      baseName: 'admin_area_2',
      type: 'string',
    },
    {
      name: 'adminArea1',
      baseName: 'admin_area_1',
      type: 'string',
    },
    {
      name: 'postalCode',
      baseName: 'postal_code',
      type: 'string',
    },
    {
      name: 'countryCode',
      baseName: 'country_code',
      type: 'string',
    },
    {
      name: 'addressDetails',
      baseName: 'address_details',
      type: 'AddressDetails1',
    },
  ];

  static getAttributeTypeMap() {
    return AddressPortable2.attributeTypeMap;
  }
}
