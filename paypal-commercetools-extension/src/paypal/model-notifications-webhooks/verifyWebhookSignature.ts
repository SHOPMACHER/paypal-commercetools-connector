/**
 * Webhooks Management
 * The PayPal REST APIs use <a href=\"/docs/api/notifications/webhooks/\"/>webhooks</a> for event notification. Webhooks are HTTP callbacks that receive notification messages for events. After you configure a webhook listener for your app, you can <a href=\"#webhooks_create\">create a webhook</a>, which subscribes the webhook listener for your app to events. The <code>notifications</code> namespace contains resource collections for webhooks.
 *
 * The version of the OpenAPI document: 1.11
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Event } from './event';

/**
 * A verify webhook signature request.
 */
export class VerifyWebhookSignature {
  /**
   * The algorithm that PayPal uses to generate the signature and that you can use to verify the signature. Extract this value from the `PAYPAL-AUTH-ALGO` response header, which is received with the webhook notification.
   */
  'authAlgo': string;
  /**
   * The X.509 public key certificate. Download the certificate from this URL and use it to verify the signature. Extract this value from the `PAYPAL-CERT-URL` response header, which is received with the webhook notification.
   */
  'certUrl': string;
  /**
   * The ID of the HTTP transmission. Contained in the `PAYPAL-TRANSMISSION-ID` header of the notification message.
   */
  'transmissionId': string;
  /**
   * The PayPal-generated asymmetric signature. Appears in the `PAYPAL-TRANSMISSION-SIG` header of the notification message.
   */
  'transmissionSig': string;
  /**
   * The date and time of the HTTP transmission, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Appears in the `PAYPAL-TRANSMISSION-TIME` header of the notification message.
   */
  'transmissionTime': Date;
  /**
   * The ID of the webhook as configured in your Developer Portal account.
   */
  'webhookId': string;
  'webhookEvent': Event;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'authAlgo',
      baseName: 'auth_algo',
      type: 'string',
    },
    {
      name: 'certUrl',
      baseName: 'cert_url',
      type: 'string',
    },
    {
      name: 'transmissionId',
      baseName: 'transmission_id',
      type: 'string',
    },
    {
      name: 'transmissionSig',
      baseName: 'transmission_sig',
      type: 'string',
    },
    {
      name: 'transmissionTime',
      baseName: 'transmission_time',
      type: 'Date',
    },
    {
      name: 'webhookId',
      baseName: 'webhook_id',
      type: 'string',
    },
    {
      name: 'webhookEvent',
      baseName: 'webhook_event',
      type: 'Event',
    },
  ];

  static getAttributeTypeMap() {
    return VerifyWebhookSignature.attributeTypeMap;
  }
}
