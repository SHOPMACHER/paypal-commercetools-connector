/**
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ShipmentCarrier } from './shipmentCarrier';
import { ShipmentTrackingNumberType } from './shipmentTrackingNumberType';
import { ShipmentTrackingStatus } from './shipmentTrackingStatus';
import { TrackerItem } from './trackerItem';

/**
 * The tracking details of an order.
 */
export class OrderTrackerRequest {
  /**
   * The PayPal transaction ID.
   */
  'transactionId': string;
  /**
   * The tracking number for the shipment. This property supports Unicode.
   */
  'trackingNumber'?: string;
  'trackingNumberType'?: ShipmentTrackingNumberType;
  'status': ShipmentTrackingStatus;
  /**
   * The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
   */
  'shipmentDate'?: string;
  'carrier'?: ShipmentCarrier;
  /**
   * The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode.
   */
  'carrierNameOther'?: string;
  /**
   * The postage payment ID. This property supports Unicode.
   */
  'postagePaymentId'?: string;
  /**
   * If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
   */
  'notifyBuyer'?: boolean = false;
  /**
   * The quantity of items shipped.
   */
  'quantity'?: number;
  /**
   * Indicates whether the carrier validated the tracking number.
   */
  'trackingNumberValidated'?: boolean;
  /**
   * The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
   */
  'lastUpdatedTime'?: string;
  /**
   * To denote whether the shipment is sent forward to the receiver or returned back.
   */
  'shipmentDirection'?: OrderTrackerRequest.ShipmentDirectionEnum;
  /**
   * To denote which party uploaded the shipment tracking info.
   */
  'shipmentUploader'?: OrderTrackerRequest.ShipmentUploaderEnum;
  /**
   * The PayPal capture ID.
   */
  'captureId': string;
  /**
   * If true, sends an email notification to the payer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
   */
  'notifyPayer'?: boolean = false;
  /**
   * An array of details of items in the shipment.
   */
  'items'?: Array<TrackerItem>;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'transactionId',
      baseName: 'transaction_id',
      type: 'string',
    },
    {
      name: 'trackingNumber',
      baseName: 'tracking_number',
      type: 'string',
    },
    {
      name: 'trackingNumberType',
      baseName: 'tracking_number_type',
      type: 'ShipmentTrackingNumberType',
    },
    {
      name: 'status',
      baseName: 'status',
      type: 'ShipmentTrackingStatus',
    },
    {
      name: 'shipmentDate',
      baseName: 'shipment_date',
      type: 'string',
    },
    {
      name: 'carrier',
      baseName: 'carrier',
      type: 'ShipmentCarrier',
    },
    {
      name: 'carrierNameOther',
      baseName: 'carrier_name_other',
      type: 'string',
    },
    {
      name: 'postagePaymentId',
      baseName: 'postage_payment_id',
      type: 'string',
    },
    {
      name: 'notifyBuyer',
      baseName: 'notify_buyer',
      type: 'boolean',
    },
    {
      name: 'quantity',
      baseName: 'quantity',
      type: 'number',
    },
    {
      name: 'trackingNumberValidated',
      baseName: 'tracking_number_validated',
      type: 'boolean',
    },
    {
      name: 'lastUpdatedTime',
      baseName: 'last_updated_time',
      type: 'string',
    },
    {
      name: 'shipmentDirection',
      baseName: 'shipment_direction',
      type: 'OrderTrackerRequest.ShipmentDirectionEnum',
    },
    {
      name: 'shipmentUploader',
      baseName: 'shipment_uploader',
      type: 'OrderTrackerRequest.ShipmentUploaderEnum',
    },
    {
      name: 'captureId',
      baseName: 'capture_id',
      type: 'string',
    },
    {
      name: 'notifyPayer',
      baseName: 'notify_payer',
      type: 'boolean',
    },
    {
      name: 'items',
      baseName: 'items',
      type: 'Array<TrackerItem>',
    },
  ];

  static getAttributeTypeMap() {
    return OrderTrackerRequest.attributeTypeMap;
  }
}

export namespace OrderTrackerRequest {
  export enum ShipmentDirectionEnum {
    Forward = <any>'FORWARD',
    Return = <any>'RETURN',
  }
  export enum ShipmentUploaderEnum {
    Merchant = <any>'MERCHANT',
    Consumer = <any>'CONSUMER',
    Partner = <any>'PARTNER',
  }
}
