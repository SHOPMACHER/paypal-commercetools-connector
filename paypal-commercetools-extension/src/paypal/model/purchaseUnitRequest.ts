/**
 * Orders
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AmountWithBreakdown } from './amountWithBreakdown';
import { Item } from './item';
import { Payee } from './payee';
import { PaymentInstruction } from './paymentInstruction';
import { ShippingDetail } from './shippingDetail';
import { SupplementaryData } from './supplementaryData';

/**
 * The purchase unit request. Includes required information for the payment contract.
 */
export class PurchaseUnitRequest {
  /**
   * The API caller-provided external ID for the purchase unit. Required for multiple purchase units when you must update the order through `PATCH`. If you omit this value and the order contains only one purchase unit, PayPal sets this value to `default`.
   */
  'referenceId'?: string;
  'amount': AmountWithBreakdown;
  'payee'?: Payee;
  'paymentInstruction'?: PaymentInstruction;
  /**
   * The purchase description. The maximum length of the character is dependent on the type of characters used. The character length is specified assuming a US ASCII character. Depending on type of character; (e.g. accented character, Japanese characters) the number of characters that that can be specified as input might not equal the permissible max length.
   */
  'description'?: string;
  /**
   * The API caller-provided external ID. Used to reconcile client transactions with PayPal transactions. Appears in transaction and settlement reports but is not visible to the payer.
   */
  'customId'?: string;
  /**
   * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
   */
  'invoiceId'?: string;
  /**
   * The soft descriptor is the dynamic text used to construct the statement descriptor that appears on a payer\'s card statement.<br><br>If an Order is paid using the \"PayPal Wallet\", the statement descriptor will appear in following format on the payer\'s card statement: <code><var>PAYPAL_prefix</var>+(space)+<var>merchant_descriptor</var>+(space)+ <var>soft_descriptor</var></code><blockquote><strong>Note:</strong> The merchant descriptor is the descriptor of the merchantâ€™s payment receiving preferences which can be seen by logging into the merchant account https://www.sandbox.paypal.com/businessprofile/settings/info/edit</blockquote>The <code>PAYPAL</code> prefix uses 8 characters. Only the first 22 characters will be displayed in the statement. <br>For example, if:<ul><li>The PayPal prefix toggle is <code>PAYPAL *</code>.</li><li>The merchant descriptor in the profile is <code>Janes Gift</code>.</li><li>The soft descriptor is <code>800-123-1234</code>.</li></ul>Then, the statement descriptor on the card is <code>PAYPAL * Janes Gift 80</code>.
   */
  'softDescriptor'?: string;
  /**
   * An array of items that the customer purchases from the merchant.
   */
  'items'?: Array<Item>;
  'shipping'?: ShippingDetail;
  'supplementaryData'?: SupplementaryData;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'referenceId',
      baseName: 'reference_id',
      type: 'string',
    },
    {
      name: 'amount',
      baseName: 'amount',
      type: 'AmountWithBreakdown',
    },
    {
      name: 'payee',
      baseName: 'payee',
      type: 'Payee',
    },
    {
      name: 'paymentInstruction',
      baseName: 'payment_instruction',
      type: 'PaymentInstruction',
    },
    {
      name: 'description',
      baseName: 'description',
      type: 'string',
    },
    {
      name: 'customId',
      baseName: 'custom_id',
      type: 'string',
    },
    {
      name: 'invoiceId',
      baseName: 'invoice_id',
      type: 'string',
    },
    {
      name: 'softDescriptor',
      baseName: 'soft_descriptor',
      type: 'string',
    },
    {
      name: 'items',
      baseName: 'items',
      type: 'Array<Item>',
    },
    {
      name: 'shipping',
      baseName: 'shipping',
      type: 'ShippingDetail',
    },
    {
      name: 'supplementaryData',
      baseName: 'supplementary_data',
      type: 'SupplementaryData',
    },
  ];

  static getAttributeTypeMap() {
    return PurchaseUnitRequest.attributeTypeMap;
  }
}
